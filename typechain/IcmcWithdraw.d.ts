/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IcmcWithdrawInterface extends ethers.utils.Interface {
  functions: {
    "getWithdrawalTransactionRecord(tuple)": FunctionFragment;
    "withdraw(tuple,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getWithdrawalTransactionRecord",
    values: [
      {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getWithdrawalTransactionRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IcmcWithdraw extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IcmcWithdrawInterface;

  functions: {
    getWithdrawalTransactionRecord(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getWithdrawalTransactionRecord(tuple)"(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    withdraw(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      aliceSignature: BytesLike,
      bobSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(tuple,bytes,bytes)"(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      aliceSignature: BytesLike,
      bobSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getWithdrawalTransactionRecord(
    wd: {
      channelAddress: string;
      assetId: string;
      recipient: string;
      amount: BigNumberish;
      nonce: BigNumberish;
      callTo: string;
      callData: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getWithdrawalTransactionRecord(tuple)"(
    wd: {
      channelAddress: string;
      assetId: string;
      recipient: string;
      amount: BigNumberish;
      nonce: BigNumberish;
      callTo: string;
      callData: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    wd: {
      channelAddress: string;
      assetId: string;
      recipient: string;
      amount: BigNumberish;
      nonce: BigNumberish;
      callTo: string;
      callData: BytesLike;
    },
    aliceSignature: BytesLike,
    bobSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(tuple,bytes,bytes)"(
    wd: {
      channelAddress: string;
      assetId: string;
      recipient: string;
      amount: BigNumberish;
      nonce: BigNumberish;
      callTo: string;
      callData: BytesLike;
    },
    aliceSignature: BytesLike,
    bobSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getWithdrawalTransactionRecord(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getWithdrawalTransactionRecord(tuple)"(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      aliceSignature: BytesLike,
      bobSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(tuple,bytes,bytes)"(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      aliceSignature: BytesLike,
      bobSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getWithdrawalTransactionRecord(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWithdrawalTransactionRecord(tuple)"(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      aliceSignature: BytesLike,
      bobSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(tuple,bytes,bytes)"(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      aliceSignature: BytesLike,
      bobSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getWithdrawalTransactionRecord(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWithdrawalTransactionRecord(tuple)"(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      aliceSignature: BytesLike,
      bobSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(tuple,bytes,bytes)"(
      wd: {
        channelAddress: string;
        assetId: string;
        recipient: string;
        amount: BigNumberish;
        nonce: BigNumberish;
        callTo: string;
        callData: BytesLike;
      },
      aliceSignature: BytesLike,
      bobSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
