/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IcmcAssetInterface extends ethers.utils.Interface {
  functions: {
    "exit(address,address,address)": FunctionFragment;
    "getExitableAmount(address,address)": FunctionFragment;
    "getTotalTransferred(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exit",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExitableAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTransferred",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExitableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTransferred",
    data: BytesLike
  ): Result;

  events: {};
}

export class IcmcAsset extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IcmcAssetInterface;

  functions: {
    exit(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exit(address,address,address)"(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getExitableAmount(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getExitableAmount(address,address)"(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalTransferred(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalTransferred(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  exit(
    assetId: string,
    owner: string,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exit(address,address,address)"(
    assetId: string,
    owner: string,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getExitableAmount(
    assetId: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getExitableAmount(address,address)"(
    assetId: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalTransferred(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalTransferred(address)"(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    exit(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "exit(address,address,address)"(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getExitableAmount(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExitableAmount(address,address)"(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTransferred(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalTransferred(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    exit(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exit(address,address,address)"(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getExitableAmount(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExitableAmount(address,address)"(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTransferred(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalTransferred(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exit(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(address,address,address)"(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getExitableAmount(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExitableAmount(address,address)"(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTransferred(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalTransferred(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
