/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestLibIterableMappingInterface extends ethers.utils.Interface {
  functions: {
    "addTransferDefinition(tuple)": FunctionFragment;
    "getTransferDefinitionByIndex(uint256)": FunctionFragment;
    "getTransferDefinitionByName(string)": FunctionFragment;
    "getTransferDefinitions()": FunctionFragment;
    "isEmptyString(string)": FunctionFragment;
    "length()": FunctionFragment;
    "nameExists(string)": FunctionFragment;
    "removeTransferDefinition(string)": FunctionFragment;
    "stringEqual(string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTransferDefinition",
    values: [
      {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferDefinitionByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferDefinitionByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferDefinitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEmptyString",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "nameExists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeTransferDefinition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringEqual",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTransferDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferDefinitionByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferDefinitionByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferDefinitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEmptyString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nameExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTransferDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringEqual",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestLibIterableMapping extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestLibIterableMappingInterface;

  functions: {
    addTransferDefinition(
      transfer: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTransferDefinition(tuple)"(
      transfer: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTransferDefinitionByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
      };
    }>;

    "getTransferDefinitionByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
      };
    }>;

    getTransferDefinitionByName(
      name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
      };
    }>;

    "getTransferDefinitionByName(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
      };
    }>;

    getTransferDefinitions(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
      }[];
    }>;

    "getTransferDefinitions()"(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
      }[];
    }>;

    isEmptyString(
      s: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isEmptyString(string)"(
      s: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    length(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "length()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    nameExists(
      name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "nameExists(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    removeTransferDefinition(
      name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeTransferDefinition(string)"(
      name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stringEqual(
      s: string,
      t: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "stringEqual(string,string)"(
      s: string,
      t: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  addTransferDefinition(
    transfer: {
      name: string;
      definition: string;
      stateEncoding: string;
      resolverEncoding: string;
      encodedCancel: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTransferDefinition(tuple)"(
    transfer: {
      name: string;
      definition: string;
      stateEncoding: string;
      resolverEncoding: string;
      encodedCancel: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTransferDefinitionByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    definition: string;
    stateEncoding: string;
    resolverEncoding: string;
    encodedCancel: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
  }>;

  "getTransferDefinitionByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    definition: string;
    stateEncoding: string;
    resolverEncoding: string;
    encodedCancel: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
  }>;

  getTransferDefinitionByName(
    name: string,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    definition: string;
    stateEncoding: string;
    resolverEncoding: string;
    encodedCancel: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
  }>;

  "getTransferDefinitionByName(string)"(
    name: string,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    definition: string;
    stateEncoding: string;
    resolverEncoding: string;
    encodedCancel: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
  }>;

  getTransferDefinitions(
    overrides?: CallOverrides
  ): Promise<
    {
      name: string;
      definition: string;
      stateEncoding: string;
      resolverEncoding: string;
      encodedCancel: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }[]
  >;

  "getTransferDefinitions()"(
    overrides?: CallOverrides
  ): Promise<
    {
      name: string;
      definition: string;
      stateEncoding: string;
      resolverEncoding: string;
      encodedCancel: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }[]
  >;

  isEmptyString(s: string, overrides?: CallOverrides): Promise<boolean>;

  "isEmptyString(string)"(
    s: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  "length()"(overrides?: CallOverrides): Promise<BigNumber>;

  nameExists(name: string, overrides?: CallOverrides): Promise<boolean>;

  "nameExists(string)"(
    name: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeTransferDefinition(
    name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeTransferDefinition(string)"(
    name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stringEqual(
    s: string,
    t: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stringEqual(string,string)"(
    s: string,
    t: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addTransferDefinition(
      transfer: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "addTransferDefinition(tuple)"(
      transfer: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getTransferDefinitionByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      definition: string;
      stateEncoding: string;
      resolverEncoding: string;
      encodedCancel: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    "getTransferDefinitionByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      definition: string;
      stateEncoding: string;
      resolverEncoding: string;
      encodedCancel: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    getTransferDefinitionByName(
      name: string,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      definition: string;
      stateEncoding: string;
      resolverEncoding: string;
      encodedCancel: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    "getTransferDefinitionByName(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      definition: string;
      stateEncoding: string;
      resolverEncoding: string;
      encodedCancel: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    getTransferDefinitions(
      overrides?: CallOverrides
    ): Promise<
      {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
      }[]
    >;

    "getTransferDefinitions()"(
      overrides?: CallOverrides
    ): Promise<
      {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: string;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
      }[]
    >;

    isEmptyString(s: string, overrides?: CallOverrides): Promise<boolean>;

    "isEmptyString(string)"(
      s: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    "length()"(overrides?: CallOverrides): Promise<BigNumber>;

    nameExists(name: string, overrides?: CallOverrides): Promise<boolean>;

    "nameExists(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeTransferDefinition(
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTransferDefinition(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stringEqual(
      s: string,
      t: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stringEqual(string,string)"(
      s: string,
      t: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addTransferDefinition(
      transfer: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addTransferDefinition(tuple)"(
      transfer: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTransferDefinitionByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTransferDefinitionByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferDefinitionByName(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTransferDefinitionByName(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferDefinitions(overrides?: CallOverrides): Promise<BigNumber>;

    "getTransferDefinitions()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEmptyString(s: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isEmptyString(string)"(
      s: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    "length()"(overrides?: CallOverrides): Promise<BigNumber>;

    nameExists(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nameExists(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTransferDefinition(
      name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeTransferDefinition(string)"(
      name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stringEqual(
      s: string,
      t: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stringEqual(string,string)"(
      s: string,
      t: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTransferDefinition(
      transfer: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTransferDefinition(tuple)"(
      transfer: {
        name: string;
        definition: string;
        stateEncoding: string;
        resolverEncoding: string;
        encodedCancel: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTransferDefinitionByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransferDefinitionByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferDefinitionByName(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransferDefinitionByName(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferDefinitions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransferDefinitions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEmptyString(
      s: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEmptyString(string)"(
      s: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "length()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nameExists(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nameExists(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTransferDefinition(
      name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeTransferDefinition(string)"(
      name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stringEqual(
      s: string,
      t: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stringEqual(string,string)"(
      s: string,
      t: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
