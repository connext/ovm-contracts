/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CmcDepositInterface extends ethers.utils.Interface {
  functions: {
    "depositAlice(address,uint256)": FunctionFragment;
    "exit(address,address,address)": FunctionFragment;
    "getAlice()": FunctionFragment;
    "getBob()": FunctionFragment;
    "getExitableAmount(address,address)": FunctionFragment;
    "getTotalDepositsAlice(address)": FunctionFragment;
    "getTotalDepositsBob(address)": FunctionFragment;
    "getTotalTransferred(address)": FunctionFragment;
    "lock()": FunctionFragment;
    "setup(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositAlice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "getAlice", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBob", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExitableAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDepositsAlice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDepositsBob",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTransferred",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositAlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAlice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExitableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDepositsAlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDepositsBob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTransferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;

  events: {
    "AliceDeposited(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AliceDeposited"): EventFragment;
}

export class CmcDeposit extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CmcDepositInterface;

  functions: {
    depositAlice(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "depositAlice(address,uint256)"(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    exit(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exit(address,address,address)"(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAlice(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAlice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getBob(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getBob()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getExitableAmount(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getExitableAmount(address,address)"(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalDepositsAlice(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalDepositsAlice(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalDepositsBob(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalDepositsBob(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalTransferred(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalTransferred(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setup(
      _alice: string,
      _bob: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setup(address,address)"(
      _alice: string,
      _bob: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  depositAlice(
    assetId: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "depositAlice(address,uint256)"(
    assetId: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  exit(
    assetId: string,
    owner: string,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exit(address,address,address)"(
    assetId: string,
    owner: string,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAlice(overrides?: CallOverrides): Promise<string>;

  "getAlice()"(overrides?: CallOverrides): Promise<string>;

  getBob(overrides?: CallOverrides): Promise<string>;

  "getBob()"(overrides?: CallOverrides): Promise<string>;

  getExitableAmount(
    assetId: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getExitableAmount(address,address)"(
    assetId: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDepositsAlice(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalDepositsAlice(address)"(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDepositsBob(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalDepositsBob(address)"(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalTransferred(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalTransferred(address)"(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock(overrides?: CallOverrides): Promise<BigNumber>;

  "lock()"(overrides?: CallOverrides): Promise<BigNumber>;

  setup(
    _alice: string,
    _bob: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setup(address,address)"(
    _alice: string,
    _bob: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    depositAlice(
      assetId: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAlice(address,uint256)"(
      assetId: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "exit(address,address,address)"(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAlice(overrides?: CallOverrides): Promise<string>;

    "getAlice()"(overrides?: CallOverrides): Promise<string>;

    getBob(overrides?: CallOverrides): Promise<string>;

    "getBob()"(overrides?: CallOverrides): Promise<string>;

    getExitableAmount(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExitableAmount(address,address)"(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDepositsAlice(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDepositsAlice(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDepositsBob(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDepositsBob(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTransferred(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalTransferred(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<BigNumber>;

    "lock()"(overrides?: CallOverrides): Promise<BigNumber>;

    setup(
      _alice: string,
      _bob: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setup(address,address)"(
      _alice: string,
      _bob: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AliceDeposited(assetId: null, amount: null): EventFilter;
  };

  estimateGas: {
    depositAlice(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "depositAlice(address,uint256)"(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    exit(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exit(address,address,address)"(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAlice(overrides?: CallOverrides): Promise<BigNumber>;

    "getAlice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBob(overrides?: CallOverrides): Promise<BigNumber>;

    "getBob()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExitableAmount(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExitableAmount(address,address)"(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDepositsAlice(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDepositsAlice(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDepositsBob(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDepositsBob(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTransferred(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalTransferred(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<BigNumber>;

    "lock()"(overrides?: CallOverrides): Promise<BigNumber>;

    setup(
      _alice: string,
      _bob: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setup(address,address)"(
      _alice: string,
      _bob: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositAlice(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "depositAlice(address,uint256)"(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(address,address,address)"(
      assetId: string,
      owner: string,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAlice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAlice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBob(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBob()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitableAmount(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExitableAmount(address,address)"(
      assetId: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDepositsAlice(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalDepositsAlice(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDepositsBob(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalDepositsBob(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTransferred(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalTransferred(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setup(
      _alice: string,
      _bob: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setup(address,address)"(
      _alice: string,
      _bob: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
