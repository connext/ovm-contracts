/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IcmcDepositInterface extends ethers.utils.Interface {
  functions: {
    "depositAlice(address,uint256)": FunctionFragment;
    "getTotalDepositsAlice(address)": FunctionFragment;
    "getTotalDepositsBob(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositAlice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDepositsAlice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDepositsBob",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositAlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDepositsAlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDepositsBob",
    data: BytesLike
  ): Result;

  events: {
    "AliceDeposited(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AliceDeposited"): EventFragment;
}

export class IcmcDeposit extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IcmcDepositInterface;

  functions: {
    depositAlice(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "depositAlice(address,uint256)"(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getTotalDepositsAlice(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalDepositsAlice(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalDepositsBob(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalDepositsBob(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  depositAlice(
    assetId: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "depositAlice(address,uint256)"(
    assetId: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getTotalDepositsAlice(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalDepositsAlice(address)"(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDepositsBob(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalDepositsBob(address)"(
    assetId: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    depositAlice(
      assetId: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAlice(address,uint256)"(
      assetId: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTotalDepositsAlice(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDepositsAlice(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDepositsBob(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDepositsBob(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AliceDeposited(assetId: null, amount: null): EventFilter;
  };

  estimateGas: {
    depositAlice(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "depositAlice(address,uint256)"(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getTotalDepositsAlice(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDepositsAlice(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDepositsBob(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalDepositsBob(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositAlice(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "depositAlice(address,uint256)"(
      assetId: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDepositsAlice(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalDepositsAlice(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDepositsBob(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalDepositsBob(address)"(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
