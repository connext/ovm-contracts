"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* Imports: External */
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const config_1 = require("hardhat/config");
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const global_dir_1 = require("hardhat/internal/util/global-dir");
require("./type-extensions");
const OPTIMISM_SOLC_BIN_URL = 'https://raw.githubusercontent.com/ethereum-optimism/solc-bin/gh-pages/bin';
const DEFAULT_OVM_SOLC_VERSION = '0.7.6';
const getOvmSolcPath = async (version) => {
    const ovmCompilersCache = path.join(await global_dir_1.getCompilersDir(), 'ovm');
    const cachedCompilerPath = path.join(ovmCompilersCache, `${version}.js`);
    if (fs.existsSync(cachedCompilerPath)) {
        return cachedCompilerPath;
    }
    console.log(`Downloading OVM compiler version ${version}`);
    const compilerContentResponse = await node_fetch_1.default(OPTIMISM_SOLC_BIN_URL + `/soljson-v${version}.js`);
    if (!compilerContentResponse.ok) {
        throw new Error(`Unable to download OVM compiler version ${version}. Are you sure that version exists?`);
    }
    const compilerContent = await compilerContentResponse.text();
    fs.mkdirSync(path.join(ovmCompilersCache), { recursive: true });
    fs.writeFileSync(cachedCompilerPath, compilerContent);
    return cachedCompilerPath;
};
config_1.subtask(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLC, async ({ input, solcPath }, { config, run }, runSuper) => {
    let ovmSolcVersion;
    if (!config.ovm || !config.ovm.solcVersion) {
        ovmSolcVersion = DEFAULT_OVM_SOLC_VERSION;
    }
    else {
        ovmSolcVersion = config.ovm.solcVersion;
    }
    const ovmSolcPath = await getOvmSolcPath(ovmSolcVersion);
    const ovmInput = {
        language: 'Solidity',
        sources: {},
        settings: input.settings,
    };
    const evmInput = {
        language: 'Solidity',
        sources: {},
        settings: input.settings,
    };
    // Separate the EVM and OVM inputs.
    for (const file of Object.keys(input.sources)) {
        evmInput.sources[file] = input.sources[file];
        if (!input.sources[file].content.includes('// @unsupported: ovm')) {
            ovmInput.sources[file] = input.sources[file];
        }
    }
    console.log(`Compiling ${Object.keys(ovmInput.sources).length} files with OVM compiler ${ovmSolcVersion}`);
    // Build both inputs separately.
    const evmOutput = await runSuper({ input: evmInput, solcPath });
    const ovmOutput = await run(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLCJS, {
        input: ovmInput,
        solcJsPath: ovmSolcPath,
    });
    ovmOutput.errors = (ovmOutput.errors || []).map((error) => {
        if (error.severity === 'error') {
            error.formattedMessage = `OVM Compiler Error (silence by adding: "// @unsupported: ovm" to the top of this file):\n ${error.formattedMessage}`;
        }
        return error;
    });
    // Filter out any "No input sources specified" errors, but only if one of the two compilations
    // threw the error.
    let errors = (ovmOutput.errors || []).concat(evmOutput.errors || []);
    const filtered = errors.filter((error) => {
        return error.message !== 'No input sources specified.';
    });
    if (errors.length === filtered.length + 1) {
        errors = filtered;
    }
    // Transfer over any OVM outputs to the EVM output, with an identifier.
    for (const fileName of Object.keys(ovmOutput.contracts || {})) {
        if (fileName in evmOutput.contracts) {
            for (const [contractName, contractOutput] of Object.entries(ovmOutput.contracts[fileName])) {
                const linkRefs = contractOutput.evm.bytecode.linkReferences;
                for (const linkRefFileName of Object.keys(linkRefs || {})) {
                    for (const [linkRefName, linkRefOutput] of Object.entries(linkRefs[linkRefFileName])) {
                        delete linkRefs[linkRefFileName][linkRefName];
                        linkRefs[linkRefFileName][`${linkRefName}.ovm`] = linkRefOutput;
                    }
                }
                evmOutput.contracts[fileName][`${contractName}.ovm`] = contractOutput;
            }
        }
    }
    const output = {
        errors,
        contracts: evmOutput.contracts,
        sources: evmOutput.sources,
    };
    return output;
});
//# sourceMappingURL=index.js.map