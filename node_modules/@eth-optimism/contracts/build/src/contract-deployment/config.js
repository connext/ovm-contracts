"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeContractDeployConfig = void 0;
const contract_defs_1 = require("../contract-defs");
exports.makeContractDeployConfig = async (config, AddressManager) => {
    return {
        OVM_L2CrossDomainMessenger: {
            factory: contract_defs_1.getContractFactory('OVM_L2CrossDomainMessenger'),
            params: [AddressManager.address],
        },
        OVM_L1CrossDomainMessenger: {
            factory: contract_defs_1.getContractFactory('OVM_L1CrossDomainMessenger'),
            params: [],
        },
        Proxy__OVM_L1CrossDomainMessenger: {
            factory: contract_defs_1.getContractFactory('Lib_ResolvedDelegateProxy'),
            params: [AddressManager.address, 'OVM_L1CrossDomainMessenger'],
            afterDeploy: async (contracts) => {
                const xDomainMessenger = contract_defs_1.getContractFactory('OVM_L1CrossDomainMessenger')
                    .connect(config.deploymentSigner)
                    .attach(contracts.Proxy__OVM_L1CrossDomainMessenger.address);
                await xDomainMessenger.initialize(AddressManager.address);
                await AddressManager.setAddress('OVM_L2CrossDomainMessenger', config.ovmGlobalContext.L2CrossDomainMessengerAddress);
            },
        },
        OVM_CanonicalTransactionChain: {
            factory: contract_defs_1.getContractFactory('OVM_CanonicalTransactionChain'),
            params: [
                AddressManager.address,
                config.transactionChainConfig.forceInclusionPeriodSeconds,
            ],
            afterDeploy: async (contracts) => {
                const sequencer = config.transactionChainConfig.sequencer;
                const sequencerAddress = typeof sequencer === 'string'
                    ? sequencer
                    : await sequencer.getAddress();
                await AddressManager.setAddress('OVM_DecompressionPrecompileAddress', '0x4200000000000000000000000000000000000005');
                await AddressManager.setAddress('OVM_Sequencer', sequencerAddress);
                await AddressManager.setAddress('Sequencer', sequencerAddress);
                await contracts.OVM_CanonicalTransactionChain.init();
            },
        },
        OVM_StateCommitmentChain: {
            factory: contract_defs_1.getContractFactory('OVM_StateCommitmentChain'),
            params: [
                AddressManager.address,
                config.stateChainConfig.fraudProofWindowSeconds,
                config.stateChainConfig.sequencerPublishWindowSeconds,
            ],
            afterDeploy: async (contracts) => {
                await contracts.OVM_StateCommitmentChain.init();
            },
        },
        OVM_DeployerWhitelist: {
            factory: contract_defs_1.getContractFactory('OVM_DeployerWhitelist'),
            params: [],
        },
        OVM_L1MessageSender: {
            factory: contract_defs_1.getContractFactory('OVM_L1MessageSender'),
            params: [],
        },
        OVM_L2ToL1MessagePasser: {
            factory: contract_defs_1.getContractFactory('OVM_L2ToL1MessagePasser'),
            params: [],
        },
        OVM_SafetyChecker: {
            factory: contract_defs_1.getContractFactory('OVM_SafetyChecker'),
            params: [],
        },
        OVM_ExecutionManager: {
            factory: contract_defs_1.getContractFactory('OVM_ExecutionManager'),
            params: [
                AddressManager.address,
                config.ovmGasMeteringConfig,
                config.ovmGlobalContext,
            ],
        },
        OVM_StateManager: {
            factory: contract_defs_1.getContractFactory('OVM_StateManager'),
            params: [await config.deploymentSigner.getAddress()],
            afterDeploy: async (contracts) => {
                await contracts.OVM_StateManager.setExecutionManager(contracts.OVM_ExecutionManager.address);
            },
        },
        OVM_StateManagerFactory: {
            factory: contract_defs_1.getContractFactory('OVM_StateManagerFactory'),
        },
        OVM_FraudVerifier: {
            factory: contract_defs_1.getContractFactory('OVM_FraudVerifier'),
            params: [AddressManager.address],
        },
        OVM_StateTransitionerFactory: {
            factory: contract_defs_1.getContractFactory('OVM_StateTransitionerFactory'),
        },
        OVM_ECDSAContractAccount: {
            factory: contract_defs_1.getContractFactory('OVM_ECDSAContractAccount'),
        },
        OVM_SequencerEntrypoint: {
            factory: contract_defs_1.getContractFactory('OVM_SequencerEntrypoint'),
        },
        OVM_ProxySequencerEntrypoint: {
            factory: contract_defs_1.getContractFactory('OVM_ProxySequencerEntrypoint'),
        },
        mockOVM_ECDSAContractAccount: {
            factory: contract_defs_1.getContractFactory('mockOVM_ECDSAContractAccount'),
        },
        OVM_BondManager: {
            factory: contract_defs_1.getContractFactory('mockOVM_BondManager'),
            params: [AddressManager.address],
        },
        OVM_ETH: {
            factory: contract_defs_1.getContractFactory('OVM_ETH'),
            params: [config.ethConfig.initialAmount, 'Ether', 18, 'ETH'],
        },
    };
};
//# sourceMappingURL=config.js.map