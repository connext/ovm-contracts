import { BigNumber } from "@ethersproject/bignumber";
export declare class Currency {
    static DAI: (amount: any, daiRate?: any) => Currency;
    static DEI: (amount: any, daiRate?: any) => Currency;
    static ETH: (amount: any, daiRate?: any) => Currency;
    static FIN: (amount: any, daiRate?: any) => Currency;
    static WEI: (amount: any, daiRate?: any) => Currency;
    typeToSymbol: {
        DAI: string;
        DEI: string;
        ETH: string;
        FIN: string;
        WEI: string;
    };
    defaultOptions: {
        DAI: {
            commas: boolean;
            decimals: number;
            symbol: boolean;
            round: boolean;
        };
        DEI: {
            commas: boolean;
            decimals: number;
            symbol: boolean;
            round: boolean;
        };
        ETH: {
            commas: boolean;
            decimals: number;
            symbol: boolean;
            round: boolean;
        };
        FIN: {
            commas: boolean;
            decimals: number;
            symbol: boolean;
            round: boolean;
        };
        WEI: {
            commas: boolean;
            decimals: number;
            symbol: boolean;
            round: boolean;
        };
    };
    wad: BigNumber;
    ray: BigNumber;
    type: string;
    daiRate: string;
    daiRateGiven: boolean;
    constructor(type: string, amount: any, daiRate?: any);
    get amount(): string;
    get currency(): {
        amount: string;
        type: string;
    };
    get symbol(): string;
    get floor(): string;
    toString(): string;
    isEthType(type?: any): boolean;
    isTokenType(type?: any): boolean;
    toBN(): BigNumber;
    format(_options?: any): string;
    round(decimals: any): string;
    getRate: (currency: any) => string;
    toDAI: (daiRate?: any) => Currency;
    toDEI: (daiRate?: any) => Currency;
    toETH: (daiRate?: any) => Currency;
    toFIN: (daiRate?: any) => Currency;
    toWEI: (daiRate?: any) => Currency;
    toGWEI: (daiRate?: any) => Currency;
    _convert: (targetType: any, daiRate?: any) => Currency;
    _round: (decStr: any) => string;
    _floor: (decStr: any) => string;
    toWad: (n: any) => BigNumber;
    toRay: (n: any) => BigNumber;
    fromWad: (n: any) => string;
    fromRoundRay: (n: any) => string;
    fromRay: (n: any) => string;
}
//# sourceMappingURL=currency.d.ts.map