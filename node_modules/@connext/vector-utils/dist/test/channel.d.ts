import { UpdateType, ChannelUpdate, ChannelUpdateDetailsMap, FullChannelState, UpdateParams, UpdateParamsMap, NetworkContext, IChannelSigner, FullTransferState } from "@connext/vector-types";
import { ChannelSigner } from "../channelSigner";
export declare type PartialChannelUpdate<T extends UpdateType> = Partial<Omit<ChannelUpdate<T>, "details"> & {
    details: Partial<ChannelUpdateDetailsMap[T]>;
}>;
export declare type PartialFullChannelState<T extends UpdateType> = Partial<Omit<FullChannelState, "latestUpdate" | "networkContext"> & {
    latestUpdate: PartialChannelUpdate<T>;
    networkContext: Partial<NetworkContext>;
}>;
export declare type PartialUpdateParams<T extends UpdateType> = Partial<Omit<UpdateParams<T>, "details"> & {
    details?: Partial<UpdateParamsMap[T]>;
}>;
export declare function createTestUpdateParams<T extends UpdateType>(type: T, overrides?: PartialUpdateParams<T>): UpdateParams<T>;
export declare function createTestChannelUpdate<T extends UpdateType>(type: T, overrides?: PartialChannelUpdate<T>): ChannelUpdate<T>;
export declare function createTestChannelState<T extends UpdateType = typeof UpdateType.setup>(type: T, overrides?: PartialFullChannelState<T>, transferOverrides?: Partial<FullTransferState>): {
    channel: FullChannelState;
    transfer: FullTransferState;
};
export declare function createTestChannelStateWithSigners<T extends UpdateType = typeof UpdateType.setup>(signers: IChannelSigner[], type: T, overrides?: PartialFullChannelState<T>): FullChannelState;
export declare function createTestChannelUpdateWithSigners<T extends UpdateType = typeof UpdateType.setup>(signers: ChannelSigner[], type: T, overrides?: PartialChannelUpdate<T>): ChannelUpdate<T>;
//# sourceMappingURL=channel.d.ts.map