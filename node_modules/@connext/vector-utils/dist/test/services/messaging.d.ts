import { ChannelUpdate, IMessagingService, NodeError, LockInformation, MessagingError, Result, FullChannelState, EngineError, FullTransferState, EngineParams, VectorError, ProtocolError, RouterConfigResponse, RouterError } from "@connext/vector-types";
export declare class MemoryMessagingService implements IMessagingService {
    private readonly evt;
    flush(): Promise<void>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    sendProtocolMessage(channelUpdate: ChannelUpdate<any>, previousUpdate?: ChannelUpdate<any>, timeout?: number, numRetries?: number): Promise<Result<{
        update: ChannelUpdate<any>;
        previousUpdate: ChannelUpdate<any>;
    }, ProtocolError>>;
    respondToProtocolMessage(inbox: string, channelUpdate: ChannelUpdate<any>, previousUpdate?: ChannelUpdate<any>): Promise<void>;
    respondWithProtocolError(inbox: string, error: ProtocolError): Promise<void>;
    onReceiveProtocolMessage(myPublicIdentifier: string, callback: (result: Result<{
        update: ChannelUpdate<any>;
        previousUpdate: ChannelUpdate<any>;
    }, ProtocolError>, from: string, inbox: string) => void): Promise<void>;
    sendSetupMessage(setupInfo: Result<Omit<EngineParams.Setup, "counterpartyIdentifier">, Error>, to: string, from: string, timeout?: number, numRetries?: number): Promise<Result<{
        channelAddress: string;
    }, MessagingError>>;
    onReceiveSetupMessage(publicIdentifier: string, callback: (setupInfo: Result<Omit<EngineParams.Setup, "counterpartyIdentifier">, MessagingError>, from: string, inbox: string) => void): Promise<void>;
    respondToSetupMessage(inbox: string, params: Result<{
        channelAddress: string;
    }, Error>): Promise<void>;
    sendRequestCollateralMessage(requestCollateralParams: Result<EngineParams.RequestCollateral, VectorError>, to: string, from: string, timeout?: number, numRetries?: number): Promise<Result<undefined, VectorError>>;
    onReceiveRequestCollateralMessage(publicIdentifier: string, callback: (params: Result<EngineParams.RequestCollateral, VectorError>, from: string, inbox: string) => void): Promise<void>;
    respondToRequestCollateralMessage(inbox: string, params: Result<{
        message?: string;
    }, Error>): Promise<void>;
    sendRestoreStateMessage(restoreData: Result<{
        chainId: number;
    } | {
        channelAddress: string;
    }, EngineError>, to: string, from: string, timeout?: number, numRetries?: number): Promise<Result<{
        channel: FullChannelState;
        activeTransfers: FullTransferState[];
    } | void, EngineError>>;
    onReceiveRestoreStateMessage(publicIdentifier: string, callback: (restoreData: Result<{
        chainId: number;
    } | {
        channelAddress: string;
    }, EngineError>, from: string, inbox: string) => void): Promise<void>;
    respondToRestoreStateMessage(inbox: string, restoreData: Result<{
        channel: FullChannelState;
        activeTransfers: FullTransferState[];
    } | void, EngineError>): Promise<void>;
    respondToLockMessage(inbox: string, lockInformation: Result<LockInformation, NodeError>): Promise<void>;
    onReceiveLockMessage(myPublicIdentifier: string, callback: (lockInfo: Result<LockInformation, NodeError>, from: string, inbox: string) => void): Promise<void>;
    sendLockMessage(lockInfo: Result<LockInformation, NodeError>, to: string, from: string, timeout?: number, numRetries?: number): Promise<Result<LockInformation, NodeError>>;
    sendIsAliveMessage(isAlive: Result<{
        channelAddress: string;
    }, VectorError>, to: string, from: string, timeout?: number, numRetries?: number): Promise<Result<{
        channelAddress: string;
    }, VectorError>>;
    onReceiveIsAliveMessage(publicIdentifier: string, callback: (isAlive: Result<{
        channelAddress: string;
    }, VectorError>, from: string, inbox: string) => void): Promise<void>;
    respondToIsAliveMessage(inbox: string, params: Result<{
        channelAddress: string;
    }, VectorError>): Promise<void>;
    sendRouterConfigMessage(configRequest: Result<void, VectorError>, to: string, from: string, timeout?: number, numRetries?: number): Promise<Result<RouterConfigResponse, RouterError | MessagingError>>;
    subscribe(subject: string, callback: (data: any) => void): Promise<void>;
    request(subject: string, timeout: number, data: any): Promise<any>;
    publish(subject: string, data: any): Promise<void>;
    unsubscribe(subject: string): Promise<void>;
}
//# sourceMappingURL=messaging.d.ts.map