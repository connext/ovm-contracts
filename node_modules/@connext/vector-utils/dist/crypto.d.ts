/// <reference types="node" />
import { Address, Bytes32, HexString, PublicKey, PrivateKey, SignatureString } from "@connext/vector-types";
export declare const VECTOR_SIGN_PREFIX = "\u0016Vector Signed Message:\n";
export declare const UTILITY_SIGN_PREFIX = "\u0017Utility Signed Message:\n";
export declare const bufferify: (input: Uint8Array | Buffer | string) => Buffer;
export declare const getPublicKeyError: (value: any) => string | undefined;
export declare const isValidPublicKey: (value: any) => boolean;
export declare const getPrivateKeyError: (value: any) => string | undefined;
export declare const isValidPrivateKey: (value: any) => boolean;
export declare const getEthSignatureError: (value: any) => string | undefined;
export declare const isValidEthSignature: (value: any) => boolean;
export declare const getPublicKeyFromPrivateKey: (privateKey: PrivateKey) => PublicKey;
export declare const getAddressFromPublicKey: (publicKey: PublicKey) => Address;
export declare const getAddressFromPrivateKey: (privateKey: PrivateKey) => Address;
export declare const getRandomPrivateKey: () => PrivateKey;
export declare const getRandomPublicKey: () => PublicKey;
export declare const getRandomSignature: () => PublicKey;
export declare const hashChannelMessage: (message: string) => Bytes32;
export declare const hashUtilityMessage: (message: string) => Bytes32;
export declare const encrypt: (message: string, publicKey: PublicKey) => Promise<HexString>;
export declare const decrypt: (encrypted: HexString, privateKey: PrivateKey) => Promise<HexString>;
export declare const signChannelMessage: (message: string, privateKey: PrivateKey) => Promise<HexString>;
export declare const recoverAddressFromChannelMessage: (message: HexString, sig: SignatureString) => Promise<Address>;
export declare const signUtilityMessage: (message: string, privateKey: PrivateKey) => Promise<HexString>;
export declare const recoverAddressFroUtilityMessage: (message: HexString, sig: SignatureString) => Promise<Address>;
//# sourceMappingURL=crypto.d.ts.map