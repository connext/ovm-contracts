import { Static, TLiteral } from "@sinclair/typebox";
declare const GetRouterConfigParamsSchema: import("@sinclair/typebox").TObject<{
    routerIdentifier: import("@sinclair/typebox").TString;
}>;
declare const GetTransferStateByRoutingIdParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    routingId: import("@sinclair/typebox").TString;
}>;
declare const GetTransferStatesByRoutingIdParamsSchema: import("@sinclair/typebox").TObject<{
    routingId: import("@sinclair/typebox").TString;
}>;
declare const GetActiveTransfersParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
}>;
declare const GetTransferStateParamsSchema: import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString;
}>;
declare const GetRegisteredTransfersParamsSchema: import("@sinclair/typebox").TObject<{
    chainId: import("@sinclair/typebox").TNumber;
}>;
declare const SetupEngineParamsSchema: import("@sinclair/typebox").TObject<{
    counterpartyIdentifier: import("@sinclair/typebox").TString;
    chainId: import("@sinclair/typebox").TNumber;
    timeout: import("@sinclair/typebox").TString;
    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>>>;
}>;
declare const DepositEngineParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    assetId: import("@sinclair/typebox").TString;
    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>>>;
}>;
declare const RequestCollateralEngineParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    assetId: import("@sinclair/typebox").TString;
    amount: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
declare const CreateConditionalTransferParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    amount: import("@sinclair/typebox").TString;
    assetId: import("@sinclair/typebox").TString;
    recipient: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    recipientChainId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    recipientAssetId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    timeout: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>>>;
    type: import("@sinclair/typebox").TString;
    details: import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>;
}>;
declare const ResolveTransferParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    transferId: import("@sinclair/typebox").TString;
    meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>>>;
    transferResolver: import("@sinclair/typebox").TAny;
}>;
declare const DisputeChannelParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
}>;
declare const DefundChannelParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
}>;
declare const DisputeTransferParamsSchema: import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString;
}>;
declare const DefundTransferParamsSchema: import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString;
}>;
declare const SignUtilityMessageParamsSchema: import("@sinclair/typebox").TObject<{
    message: import("@sinclair/typebox").TString;
}>;
declare const SendIsAliveParamsSchema: import("@sinclair/typebox").TObject<{
    channelAddress: import("@sinclair/typebox").TString;
    skipCheckIn: import("@sinclair/typebox").TBoolean;
}>;
declare const RestoreStateParamsSchema: import("@sinclair/typebox").TObject<{
    counterpartyIdentifier: import("@sinclair/typebox").TString;
    chainId: import("@sinclair/typebox").TNumber;
}>;
declare const RpcRequestEngineParamsSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TNumber;
    jsonrpc: TLiteral<"2.0">;
    method: import("@sinclair/typebox").TUnion<[TLiteral<"chan_signUtilityMessage" | "chan_getConfig" | "chan_getRouterConfig" | "chan_getStatus" | "chan_getChannelState" | "chan_getChannelStateByParticipants" | "chan_getChannelStates" | "chan_getTransferStateByRoutingId" | "chan_getTransferStatesByRoutingId" | "chan_getActiveTransfers" | "chan_getRegisteredTransfers" | "chan_getTransferState" | "chan_setup" | "chan_sendIsAlive" | "chan_requestSetup" | "chan_deposit" | "chan_requestCollateral" | "chan_createTransfer" | "chan_resolveTransfer" | "chan_restoreState" | "chan_withdraw" | "chan_subscribe" | "chan_unsubscribeAll" | "connext_authenticate" | "chan_dispute" | "chan_defund" | "chan_disputeTransfer" | "chan_defundTransfer" | "chan_decrypt" | "chan_subscription">]>;
    params: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
}>;
export declare namespace EngineParams {
    const RpcRequestSchema: import("@sinclair/typebox").TObject<{
        id: import("@sinclair/typebox").TNumber;
        jsonrpc: TLiteral<"2.0">;
        method: import("@sinclair/typebox").TUnion<[TLiteral<"chan_signUtilityMessage" | "chan_getConfig" | "chan_getRouterConfig" | "chan_getStatus" | "chan_getChannelState" | "chan_getChannelStateByParticipants" | "chan_getChannelStates" | "chan_getTransferStateByRoutingId" | "chan_getTransferStatesByRoutingId" | "chan_getActiveTransfers" | "chan_getRegisteredTransfers" | "chan_getTransferState" | "chan_setup" | "chan_sendIsAlive" | "chan_requestSetup" | "chan_deposit" | "chan_requestCollateral" | "chan_createTransfer" | "chan_resolveTransfer" | "chan_restoreState" | "chan_withdraw" | "chan_subscribe" | "chan_unsubscribeAll" | "connext_authenticate" | "chan_dispute" | "chan_defund" | "chan_disputeTransfer" | "chan_defundTransfer" | "chan_decrypt" | "chan_subscription">]>;
        params: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
    }>;
    type RpcRequest = Static<typeof RpcRequestEngineParamsSchema>;
    const GetRouterConfigSchema: import("@sinclair/typebox").TObject<{
        routerIdentifier: import("@sinclair/typebox").TString;
    }>;
    type GetRouterConfig = Static<typeof GetRouterConfigParamsSchema>;
    const SignUtilityMessageSchema: import("@sinclair/typebox").TObject<{
        message: import("@sinclair/typebox").TString;
    }>;
    type SignUtilityMessage = Static<typeof SignUtilityMessageParamsSchema>;
    const SendIsAliveSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        skipCheckIn: import("@sinclair/typebox").TBoolean;
    }>;
    type SendIsAlive = Static<typeof SendIsAliveParamsSchema>;
    const GetTransferStateByRoutingIdSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        routingId: import("@sinclair/typebox").TString;
    }>;
    type GetTransferStateByRoutingId = Static<typeof GetTransferStateByRoutingIdParamsSchema>;
    const GetTransferStatesByRoutingIdSchema: import("@sinclair/typebox").TObject<{
        routingId: import("@sinclair/typebox").TString;
    }>;
    type GetTransferStatesByRoutingId = Static<typeof GetTransferStatesByRoutingIdParamsSchema>;
    const GetChannelStatesSchema: import("@sinclair/typebox").TObject<{}>;
    type GetChannelStates = Static<typeof GetChannelStatesSchema>;
    const GetChannelStateSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
    }>;
    type GetChannelState = Static<typeof GetChannelStateSchema>;
    const GetChannelStateByParticipantsSchema: import("@sinclair/typebox").TObject<{
        alice: import("@sinclair/typebox").TString;
        bob: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
    }>;
    type GetChannelStateByParticipants = Static<typeof GetChannelStateByParticipantsSchema>;
    const GetActiveTransfersSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
    }>;
    type GetActiveTransfers = Static<typeof GetActiveTransfersParamsSchema>;
    const GetTransferStateSchema: import("@sinclair/typebox").TObject<{
        transferId: import("@sinclair/typebox").TString;
    }>;
    type GetTransferState = Static<typeof GetTransferStateParamsSchema>;
    const GetRegisteredTransfersSchema: import("@sinclair/typebox").TObject<{
        chainId: import("@sinclair/typebox").TNumber;
    }>;
    type GetRegisteredTransfers = Static<typeof GetRegisteredTransfersParamsSchema>;
    const SetupSchema: import("@sinclair/typebox").TObject<{
        counterpartyIdentifier: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
        timeout: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>>>;
    }>;
    type Setup = Static<typeof SetupEngineParamsSchema>;
    const RestoreStateSchema: import("@sinclair/typebox").TObject<{
        counterpartyIdentifier: import("@sinclair/typebox").TString;
        chainId: import("@sinclair/typebox").TNumber;
    }>;
    type RestoreState = Static<typeof RestoreStateParamsSchema>;
    const DepositSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>>>;
    }>;
    type Deposit = Static<typeof DepositEngineParamsSchema>;
    const RequestCollateralSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>;
    type RequestCollateral = Static<typeof RequestCollateralEngineParamsSchema>;
    const ConditionalTransferSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        recipient: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        recipientChainId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        recipientAssetId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        timeout: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>>>;
        type: import("@sinclair/typebox").TString;
        details: import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>;
    }>;
    type ConditionalTransfer = Static<typeof CreateConditionalTransferParamsSchema>;
    const ResolveTransferSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        transferId: import("@sinclair/typebox").TString;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>>>;
        transferResolver: import("@sinclair/typebox").TAny;
    }>;
    type ResolveTransfer = Static<typeof ResolveTransferParamsSchema>;
    const WithdrawSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
        amount: import("@sinclair/typebox").TString;
        assetId: import("@sinclair/typebox").TString;
        recipient: import("@sinclair/typebox").TString;
        fee: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        callTo: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        callData: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        meta: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TDict<import("@sinclair/typebox").TAny>>>;
    }>;
    type Withdraw = Static<typeof WithdrawSchema>;
    const DisputeChannelSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
    }>;
    type DisputeChannel = Static<typeof DisputeChannelParamsSchema>;
    const DefundChannelSchema: import("@sinclair/typebox").TObject<{
        channelAddress: import("@sinclair/typebox").TString;
    }>;
    type DefundChannel = Static<typeof DefundChannelParamsSchema>;
    const DisputeTransferSchema: import("@sinclair/typebox").TObject<{
        transferId: import("@sinclair/typebox").TString;
    }>;
    type DisputeTransfer = Static<typeof DisputeTransferParamsSchema>;
    const DefundTransferSchema: import("@sinclair/typebox").TObject<{
        transferId: import("@sinclair/typebox").TString;
    }>;
    type DefundTransfer = Static<typeof DefundTransferParamsSchema>;
}
export {};
//# sourceMappingURL=engine.d.ts.map