"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

var _SolidityListener = _interopRequireDefault(require("./SolidityListener.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786", "\u5964\x03\x84\u0440\x04\x02\t\x02\x04\x03\t\x03\x04", "\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t", "\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04", "\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10", "\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13", "\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17", "\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A", "\x04\x1B\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E", "\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#", "\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04", "*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x04", "1\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x04", "8\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04", "?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04", "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04", "M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04", "T\tT\x04U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04", "[\t[\x04\\\t\\\x04]\t]\x03\x02\x03\x02\x03\x02\x03", "\x02\x03\x02\x03\x02\x03\x02\x07\x02\xC2\n\x02", "\f\x02\x0E\x02\xC5\x0B\x02\x03\x02\x03\x02\x03", "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03", "\x04\x03\x05\x03\x05\x05\x05\xD2\n\x05\x03\x06", "\x03\x06\x05\x06\xD6\n\x06\x03\x07\x03\x07\x03", "\b\x05\b\xDB\n\b\x03\b\x03\b\x05\b\xDF\n\b\x03\b\x05", "\b\xE2\n\b\x03\t\x03\t\x03\t\x05\t\xE7\n\t\x03\n\x03", "\n\x03\n\x03\n\x05\n\xED\n\n\x03\n\x03\n\x03\n\x03\n", "\x05\n\xF3\n\n\x03\n\x03\n\x05\n\xF7\n\n\x03\n\x03\n", "\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x07\n\u0101\n\n\f", "\n\x0E\n\u0104\x0B\n\x03\n\x03\n\x03\n\x03\n\x03\n\x05", "\n\u010B\n\n\x03\x0B\x05\x0B\u010E\n\x0B\x03\x0B\x03", "\x0B\x03\x0B\x03\x0B\x03\x0B\x03\x0B\x07\x0B\u0116", "\n\x0B\f\x0B\x0E\x0B\u0119\x0B\x0B\x05\x0B\u011B\n\x0B", "\x03\x0B\x03\x0B\x07\x0B\u011F\n\x0B\f\x0B\x0E\x0B", "\u0122\x0B\x0B\x03\x0B\x03\x0B\x03\f\x03\f\x03\f\x05", "\f\u0129\n\f\x03\f\x05\f\u012C\n\f\x03\r\x03\r\x03\r\x03", "\r\x03\r\x03\r\x03\r\x05\r\u0135\n\r\x03\x0E\x03\x0E", "\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x07\x0E", "\u013E\n\x0E\f\x0E\x0E\x0E\u0141\x0B\x0E\x03\x0E\x03", "\x0E\x03\x0E\x05\x0E\u0146\n\x0E\x03\x0E\x03\x0E", "\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F", "\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10", "\x05\x10\u0156\n\x10\x03\x10\x03\x10\x03\x11\x03", "\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03", "\x11\x07\x11\u0162\n\x11\f\x11\x0E\x11\u0165\x0B\x11", "\x05\x11\u0167\n\x11\x03\x11\x03\x11\x03\x12\x03", "\x12\x03\x12\x05\x12\u016E\n\x12\x03\x12\x03\x12", "\x07\x12\u0172\n\x12\f\x12\x0E\x12\u0175\x0B\x12\x03", "\x12\x03\x12\x03\x13\x03\x13\x03\x13\x05\x13\u017C", "\n\x13\x03\x13\x05\x13\u017F\n\x13\x03\x14\x03\x14", "\x03\x14\x03\x14\x05\x14\u0185\n\x14\x03\x14\x03", "\x14\x05\x14\u0189\n\x14\x03\x15\x03\x15\x05\x15", "\u018D\n\x15\x03\x15\x03\x15\x03\x15\x05\x15\u0192", "\n\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17", "\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17", "\x07\x17\u019F\n\x17\f\x17\x0E\x17\u01A2\x0B\x17\x03", "\x18\x03\x18\x03\x18\x03\x18\x05\x18\u01A8\n\x18", "\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A", "\x03\x1A\x03\x1A\x05\x1A\u01B2\n\x1A\x03\x1A\x03", "\x1A\x07\x1A\u01B6\n\x1A\f\x1A\x0E\x1A\u01B9\x0B\x1A", "\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B", "\x07\x1B\u01C1\n\x1B\f\x1B\x0E\x1B\u01C4\x0B\x1B\x05", "\x1B\u01C6\n\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C", "\x05\x1C\u01CC\n\x1C\x03\x1C\x05\x1C\u01CF\n\x1C\x03", "\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u01D5\n\x1D", "\f\x1D\x0E\x1D\u01D8\x0B\x1D\x05\x1D\u01DA\n\x1D\x03", "\x1D\x03\x1D\x03\x1E\x03\x1E\x05\x1E\u01E0\n\x1E", "\x03\x1E\x05\x1E\u01E3\n\x1E\x03\x1F\x03\x1F\x03", "\x1F\x03\x1F\x07\x1F\u01E9\n\x1F\f\x1F\x0E\x1F\u01EC", "\x0B\x1F\x05\x1F\u01EE\n\x1F\x03\x1F\x03\x1F\x03", " \x03 \x05 \u01F4\n \x03!\x03!\x05!\u01F8\n!\x03!\x03", "!\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x05\"\u0203", "\n\"\x03\"\x03\"\x03\"\x05\"\u0208\n\"\x03\"\x07\"\u020B", "\n\"\f\"\x0E\"\u020E\x0B\"\x03#\x03#\x03#\x07#\u0213\n#", "\f#\x0E#\u0216\x0B#\x03$\x03$\x05$\u021A\n$\x03%\x03%", "\x03%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03", "&\x07&\u0228\n&\f&\x0E&\u022B\x0B&\x03&\x03&\x05&\u022F", "\n&\x03'\x03'\x03(\x03(\x03)\x03)\x07)\u0237\n)\f)\x0E", ")\u023A\x0B)\x03)\x03)\x03*\x03*\x03*\x03*\x03*\x03", "*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x05*\u024B\n*\x03", "+\x03+\x03+\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05", ",\u0257\n,\x03-\x03-\x03-\x05-\u025C\n-\x03-\x03-\x06", "-\u0260\n-\r-\x0E-\u0261\x03.\x03.\x05.\u0266\n.\x03.\x05", ".\u0269\n.\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03/\x03", "0\x030\x050\u0275\n0\x031\x031\x031\x031\x051\u027B\n", "1\x031\x031\x051\u027F\n1\x031\x051\u0282\n1\x031\x03", "1\x031\x032\x032\x052\u0289\n2\x032\x032\x033\x033\x03", "3\x033\x033\x033\x033\x033\x034\x034\x034\x035\x03", "5\x035\x036\x036\x056\u029D\n6\x036\x036\x037\x037\x03", "7\x038\x038\x038\x038\x039\x039\x039\x039\x039\x03", "9\x039\x059\u02AF\n9\x039\x039\x059\u02B3\n9\x039\x03", "9\x03:\x05:\u02B8\n:\x03:\x03:\x05:\u02BC\n:\x07:\u02BE", "\n:\f:\x0E:\u02C1\x0B:\x03;\x03;\x05;\u02C5\n;\x03;\x07", ";\u02C8\n;\f;\x0E;\u02CB\x0B;\x03;\x05;\u02CE\n;\x03;\x03", ";\x03<\x03<\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03", "=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03", "=\x05=\u02E6\n=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03", "=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03", "=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03", "=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03", "=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x05", "=\u0317\n=\x03=\x03=\x03=\x03=\x05=\u031D\n=\x03=\x03", "=\x05=\u0321\n=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03", "=\x03=\x03=\x03=\x03=\x03=\x03=\x07=\u0331\n=\f=\x0E", "=\u0334\x0B=\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x05", ">\u033D\n>\x03>\x03>\x03>\x03>\x03>\x03>\x05>\u0345\n", ">\x05>\u0347\n>\x03?\x03?\x03?\x07?\u034C\n?\f?\x0E?\u034F", "\x0B?\x03@\x03@\x03@\x07@\u0354\n@\f@\x0E@\u0357\x0B@", "\x03@\x05@\u035A\n@\x03A\x03A\x03A\x03A\x03B\x03B\x05", "B\u0362\nB\x03B\x03B\x05B\u0366\nB\x05B\u0368\nB\x03C\x03", "C\x03C\x03C\x03C\x03D\x03D\x07D\u0371\nD\fD\x0ED\u0374", "\x0BD\x03D\x03D\x03E\x03E\x03E\x03E\x03E\x03E\x03", "E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03", "E\x03E\x05E\u038A\nE\x03F\x03F\x03F\x05F\u038F\nF\x03", "G\x03G\x03G\x03G\x03H\x03H\x03H\x03H\x05H\u0399\nH\x03", "H\x03H\x05H\u039D\nH\x03H\x03H\x07H\u03A1\nH\fH\x0EH\u03A4", "\x0BH\x03H\x05H\u03A7\nH\x03I\x03I\x03I\x03I\x05I\u03AD", "\nI\x03J\x03J\x03J\x03J\x03K\x03K\x03K\x03K\x03K\x03", "K\x05K\u03B9\nK\x03L\x03L\x03L\x07L\u03BE\nL\fL\x0EL\u03C1", "\x0BL\x03M\x03M\x03M\x03N\x03N\x03N\x03O\x03O\x03", "O\x07O\u03CC\nO\fO\x0EO\u03CF\x0BO\x03P\x03P\x03P\x03", "P\x03P\x03P\x05P\u03D7\nP\x03Q\x03Q\x03Q\x03Q\x05Q\u03DD", "\nQ\x03Q\x03Q\x05Q\u03E1\nQ\x03Q\x03Q\x03R\x03R\x03", "R\x03S\x03S\x03S\x05S\u03EB\nS\x03S\x03S\x03S\x05S\u03F0", "\nS\x03S\x03S\x03T\x03T\x03T\x03T\x03U\x03U\x03U\x03", "U\x05U\u03FC\nU\x03V\x03V\x03V\x03V\x03W\x03W\x05W\u0404", "\nW\x03W\x03W\x05W\u0408\nW\x07W\u040A\nW\fW\x0EW\u040D\x0B", "W\x03W\x03W\x03W\x03W\x03W\x07W\u0414\nW\fW\x0EW\u0417", "\x0BW\x05W\u0419\nW\x03W\x05W\u041C\nW\x03X\x03X\x05X", "\u0420\nX\x03Y\x03Y\x05Y\u0424\nY\x03Z\x03Z\x03[\x06[", "\u0429\n[\r[\x0E[\u042A\x03\\\x03\\\x03\\\x03\\\x03\\\x07", "\\\u0432\n\\\f\\\x0E\\\u0435\x0B\\\x03\\\x03\\\x05\\\u0439", "\n\\\x03]\x06]\u043C\n]\r]\x0E]\u043D\x03]\x02\x04Bx^\x02", "\x04\x06\b\n\f\x0E\x10\x12\x14\x16\x18\x1A\x1C\x1E", " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\x80\x82\x84", "\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C", "\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4", "\xB6\xB8\x02\x11\x03\x02\x05\x0B\x03\x02\x14\x16", "\x03\x02(*\x06\x02nnuuyy{{\x05\x02$$58ae\x03\x029:\x03", "\x02=>\x03\x02?@\x04\x02\x0E\x0ECD\x03\x02EF\x03", "\x02\x07\n\x03\x02IJ\x04\x02\x0B\x0BNW\x03\x02g", "h\b\x02\x0F\x0F**__qquu~\x7F\x02\u04BB\x02\xC3\x03\x02", "\x02\x02\x04\xC8\x03\x02\x02\x02\x06\xCD\x03\x02", "\x02\x02\b\xD1\x03\x02\x02\x02\n\xD3\x03\x02\x02", "\x02\f\xD7\x03\x02\x02\x02\x0E\xE1\x03\x02\x02", "\x02\x10\xE3\x03\x02\x02\x02\x12\u010A\x03\x02\x02", "\x02\x14\u010D\x03\x02\x02\x02\x16\u0125\x03\x02\x02", "\x02\x18\u0134\x03\x02\x02\x02\x1A\u0136\x03\x02\x02", "\x02\x1C\u0149\x03\x02\x02\x02\x1E\u0150\x03\x02\x02", "\x02 \u0159\x03\x02\x02\x02\"\u016A\x03\x02\x02\x02", "$\u0178\x03\x02\x02\x02&\u0180\x03\x02\x02\x02(\u0191", "\x03\x02\x02\x02*\u0193\x03\x02\x02\x02,\u01A0\x03", "\x02\x02\x02.\u01A3\x03\x02\x02\x020\u01AB\x03\x02", "\x02\x022\u01AD\x03\x02\x02\x024\u01BC\x03\x02\x02", "\x026\u01C9\x03\x02\x02\x028\u01D0\x03\x02\x02\x02", ":\u01DD\x03\x02\x02\x02<\u01E4\x03\x02\x02\x02>\u01F1", "\x03\x02\x02\x02@\u01F5\x03\x02\x02\x02B\u0202\x03", "\x02\x02\x02D\u020F\x03\x02\x02\x02F\u0219\x03\x02", "\x02\x02H\u021B\x03\x02\x02\x02J\u0222\x03\x02\x02", "\x02L\u0230\x03\x02\x02\x02N\u0232\x03\x02\x02\x02", "P\u0234\x03\x02\x02\x02R\u024A\x03\x02\x02\x02T\u024C", "\x03\x02\x02\x02V\u024F\x03\x02\x02\x02X\u0258\x03", "\x02\x02\x02Z\u0263\x03\x02\x02\x02\\\u026C\x03\x02", "\x02\x02^\u0274\x03\x02\x02\x02`\u0276\x03\x02\x02", "\x02b\u0286\x03\x02\x02\x02d\u028C\x03\x02\x02\x02", "f\u0294\x03\x02\x02\x02h\u0297\x03\x02\x02\x02j\u029A", "\x03\x02\x02\x02l\u02A0\x03\x02\x02\x02n\u02A3\x03", "\x02\x02\x02p\u02AE\x03\x02\x02\x02r\u02B7\x03\x02", "\x02\x02t\u02C2\x03\x02\x02\x02v\u02D1\x03\x02\x02", "\x02x\u02E5\x03\x02\x02\x02z\u0346\x03\x02\x02\x02", "|\u0348\x03\x02\x02\x02~\u0350\x03\x02\x02\x02\x80", "\u035B\x03\x02\x02\x02\x82\u0367\x03\x02\x02\x02\x84", "\u0369\x03\x02\x02\x02\x86\u036E\x03\x02\x02\x02\x88", "\u0389\x03\x02\x02\x02\x8A\u038E\x03\x02\x02\x02\x8C", "\u0390\x03\x02\x02\x02\x8E\u0398\x03\x02\x02\x02\x90", "\u03A8\x03\x02\x02\x02\x92\u03AE\x03\x02\x02\x02\x94", "\u03B8\x03\x02\x02\x02\x96\u03BA\x03\x02\x02\x02\x98", "\u03C2\x03\x02\x02\x02\x9A\u03C5\x03\x02\x02\x02\x9C", "\u03C8\x03\x02\x02\x02\x9E\u03D6\x03\x02\x02\x02\xA0", "\u03D8\x03\x02\x02\x02\xA2\u03E4\x03\x02\x02\x02\xA4", "\u03E7\x03\x02\x02\x02\xA6\u03F3\x03\x02\x02\x02\xA8", "\u03FB\x03\x02\x02\x02\xAA\u03FD\x03\x02\x02\x02\xAC", "\u041B\x03\x02\x02\x02\xAE\u041F\x03\x02\x02\x02\xB0", "\u0421\x03\x02\x02\x02\xB2\u0425\x03\x02\x02\x02\xB4", "\u0428\x03\x02\x02\x02\xB6\u042C\x03\x02\x02\x02\xB8", "\u043B\x03\x02\x02\x02\xBA\xC2\x05\x04\x03\x02\xBB", "\xC2\x05\x12\n\x02\xBC\xC2\x05\x14\x0B\x02\xBD", "\xC2\x052\x1A\x02\xBE\xC2\x05 \x11\x02\xBF\xC2", "\x05&\x14\x02\xC0\xC2\x05\x1C\x0F\x02\xC1\xBA", "\x03\x02\x02\x02\xC1\xBB\x03\x02\x02\x02\xC1\xBC", "\x03\x02\x02\x02\xC1\xBD\x03\x02\x02\x02\xC1\xBE", "\x03\x02\x02\x02\xC1\xBF\x03\x02\x02\x02\xC1\xC0", "\x03\x02\x02\x02\xC2\xC5\x03\x02\x02\x02\xC3\xC1", "\x03\x02\x02\x02\xC3\xC4\x03\x02\x02\x02\xC4\xC6", "\x03\x02\x02\x02\xC5\xC3\x03\x02\x02\x02\xC6\xC7", "\x07\x02\x02\x03\xC7\x03\x03\x02\x02\x02\xC8\xC9", "\x07\x03\x02\x02\xC9\xCA\x05\x06\x04\x02\xCA\xCB", "\x05\b\x05\x02\xCB\xCC\x07\x04\x02\x02\xCC\x05", "\x03\x02\x02\x02\xCD\xCE\x05\xB2Z\x02\xCE\x07", "\x03\x02\x02\x02\xCF\xD2\x05\n\x06\x02\xD0\xD2", "\x05x=\x02\xD1\xCF\x03\x02\x02\x02\xD1\xD0\x03", "\x02\x02\x02\xD2\t\x03\x02\x02\x02\xD3\xD5\x05", "\x0E\b\x02\xD4\xD6\x05\x0E\b\x02\xD5\xD4\x03\x02", "\x02\x02\xD5\xD6\x03\x02\x02\x02\xD6\x0B\x03\x02", "\x02\x02\xD7\xD8\t\x02\x02\x02\xD8\r\x03\x02\x02", "\x02\xD9\xDB\x05\f\x07\x02\xDA\xD9\x03\x02\x02", "\x02\xDA\xDB\x03\x02\x02\x02\xDB\xDC\x03\x02\x02", "\x02\xDC\xE2\x07\x81\x02\x02\xDD\xDF\x05\f\x07", "\x02\xDE\xDD\x03\x02\x02\x02\xDE\xDF\x03\x02\x02", "\x02\xDF\xE0\x03\x02\x02\x02\xE0\xE2\x07g\x02", "\x02\xE1\xDA\x03\x02\x02\x02\xE1\xDE\x03\x02\x02", "\x02\xE2\x0F\x03\x02\x02\x02\xE3\xE6\x05\xB2Z", "\x02\xE4\xE5\x07\f\x02\x02\xE5\xE7\x05\xB2Z\x02", "\xE6\xE4\x03\x02\x02\x02\xE6\xE7\x03\x02\x02\x02", "\xE7\x11\x03\x02\x02\x02\xE8\xE9\x07\r\x02\x02", "\xE9\xEC\x07\x80\x02\x02\xEA\xEB\x07\f\x02\x02", "\xEB\xED\x05\xB2Z\x02\xEC\xEA\x03\x02\x02\x02", "\xEC\xED\x03\x02\x02\x02\xED\xEE\x03\x02\x02\x02", "\xEE\u010B\x07\x04\x02\x02\xEF\xF2\x07\r\x02\x02", "\xF0\xF3\x07\x0E\x02\x02\xF1\xF3\x05\xB2Z\x02", "\xF2\xF0\x03\x02\x02\x02\xF2\xF1\x03\x02\x02\x02", "\xF3\xF6\x03\x02\x02\x02\xF4\xF5\x07\f\x02\x02", "\xF5\xF7\x05\xB2Z\x02\xF6\xF4\x03\x02\x02\x02", "\xF6\xF7\x03\x02\x02\x02\xF7\xF8\x03\x02\x02\x02", "\xF8\xF9\x07\x0F\x02\x02\xF9\xFA\x07\x80\x02\x02", "\xFA\u010B\x07\x04\x02\x02\xFB\xFC\x07\r\x02\x02", "\xFC\xFD\x07\x10\x02\x02\xFD\u0102\x05\x10\t\x02", "\xFE\xFF\x07\x11\x02\x02\xFF\u0101\x05\x10\t\x02", "\u0100\xFE\x03\x02\x02\x02\u0101\u0104\x03\x02\x02\x02", "\u0102\u0100\x03\x02\x02\x02\u0102\u0103\x03\x02\x02\x02", "\u0103\u0105\x03\x02\x02\x02\u0104\u0102\x03\x02\x02\x02", "\u0105\u0106\x07\x12\x02\x02\u0106\u0107\x07\x0F\x02\x02", "\u0107\u0108\x07\x80\x02\x02\u0108\u0109\x07\x04\x02\x02", "\u0109\u010B\x03\x02\x02\x02\u010A\xE8\x03\x02\x02\x02", "\u010A\xEF\x03\x02\x02\x02\u010A\xFB\x03\x02\x02\x02", "\u010B\x13\x03\x02\x02\x02\u010C\u010E\x07\x13\x02\x02", "\u010D\u010C\x03\x02\x02\x02\u010D\u010E\x03\x02\x02\x02", "\u010E\u010F\x03\x02\x02\x02\u010F\u0110\t\x03\x02\x02", "\u0110\u011A\x05\xB2Z\x02\u0111\u0112\x07\x17\x02\x02", "\u0112\u0117\x05\x16\f\x02\u0113\u0114\x07\x11\x02\x02", "\u0114\u0116\x05\x16\f\x02\u0115\u0113\x03\x02\x02\x02", "\u0116\u0119\x03\x02\x02\x02\u0117\u0115\x03\x02\x02\x02", "\u0117\u0118\x03\x02\x02\x02\u0118\u011B\x03\x02\x02\x02", "\u0119\u0117\x03\x02\x02\x02\u011A\u0111\x03\x02\x02\x02", "\u011A\u011B\x03\x02\x02\x02\u011B\u011C\x03\x02\x02\x02", "\u011C\u0120\x07\x10\x02\x02\u011D\u011F\x05\x18\r\x02", "\u011E\u011D\x03\x02\x02\x02\u011F\u0122\x03\x02\x02\x02", "\u0120\u011E\x03\x02\x02\x02\u0120\u0121\x03\x02\x02\x02", "\u0121\u0123\x03\x02\x02\x02\u0122\u0120\x03\x02\x02\x02", "\u0123\u0124\x07\x12\x02\x02\u0124\x15\x03\x02\x02\x02", "\u0125\u012B\x05D#\x02\u0126\u0128\x07\x18\x02\x02\u0127", "\u0129\x05|?\x02\u0128\u0127\x03\x02\x02\x02\u0128\u0129", "\x03\x02\x02\x02\u0129\u012A\x03\x02\x02\x02\u012A\u012C", "\x07\x19\x02\x02\u012B\u0126\x03\x02\x02\x02\u012B\u012C", "\x03\x02\x02\x02\u012C\x17\x03\x02\x02\x02\u012D\u0135", "\x05\x1A\x0E\x02\u012E\u0135\x05\x1E\x10\x02\u012F\u0135", "\x05 \x11\x02\u0130\u0135\x05\"\x12\x02\u0131\u0135\x05", "&\x14\x02\u0132\u0135\x05.\x18\x02\u0133\u0135\x052\x1A", "\x02\u0134\u012D\x03\x02\x02\x02\u0134\u012E\x03\x02\x02", "\x02\u0134\u012F\x03\x02\x02\x02\u0134\u0130\x03\x02\x02", "\x02\u0134\u0131\x03\x02\x02\x02\u0134\u0132\x03\x02\x02", "\x02\u0134\u0133\x03\x02\x02\x02\u0135\x19\x03\x02\x02", "\x02\u0136\u013F\x05B\"\x02\u0137\u013E\x07w\x02\x02\u0138", "\u013E\x07t\x02\x02\u0139\u013E\x07v\x02\x02\u013A\u013E", "\x07n\x02\x02\u013B\u013E\x07o\x02\x02\u013C\u013E\x05", "\xB6\\\x02\u013D\u0137\x03\x02\x02\x02\u013D\u0138\x03", "\x02\x02\x02\u013D\u0139\x03\x02\x02\x02\u013D\u013A\x03", "\x02\x02\x02\u013D\u013B\x03\x02\x02\x02\u013D\u013C\x03", "\x02\x02\x02\u013E\u0141\x03\x02\x02\x02\u013F\u013D\x03", "\x02\x02\x02\u013F\u0140\x03\x02\x02\x02\u0140\u0142\x03", "\x02\x02\x02\u0141\u013F\x03\x02\x02\x02\u0142\u0145\x05", "\xB2Z\x02\u0143\u0144\x07\x0B\x02\x02\u0144\u0146\x05", "x=\x02\u0145\u0143\x03\x02\x02\x02\u0145\u0146\x03\x02", "\x02\x02\u0146\u0147\x03\x02\x02\x02\u0147\u0148\x07\x04", "\x02\x02\u0148\x1B\x03\x02\x02\x02\u0149\u014A\x05B", "\"\x02\u014A\u014B\x07n\x02\x02\u014B\u014C\x05\xB2Z\x02", "\u014C\u014D\x07\x0B\x02\x02\u014D\u014E\x05x=\x02\u014E", "\u014F\x07\x04\x02\x02\u014F\x1D\x03\x02\x02\x02\u0150", "\u0151\x07\x1A\x02\x02\u0151\u0152\x05\xB2Z\x02\u0152", "\u0155\x07\x1B\x02\x02\u0153\u0156\x07\x0E\x02\x02\u0154", "\u0156\x05B\"\x02\u0155\u0153\x03\x02\x02\x02\u0155\u0154", "\x03\x02\x02\x02\u0156\u0157\x03\x02\x02\x02\u0157\u0158", "\x07\x04\x02\x02\u0158\x1F\x03\x02\x02\x02\u0159\u015A", "\x07\x1C\x02\x02\u015A\u015B\x05\xB2Z\x02\u015B\u0166", "\x07\x10\x02\x02\u015C\u015D\x05@!\x02\u015D\u0163\x07", "\x04\x02\x02\u015E\u015F\x05@!\x02\u015F\u0160\x07\x04", "\x02\x02\u0160\u0162\x03\x02\x02\x02\u0161\u015E\x03\x02", "\x02\x02\u0162\u0165\x03\x02\x02\x02\u0163\u0161\x03\x02", "\x02\x02\u0163\u0164\x03\x02\x02\x02\u0164\u0167\x03\x02", "\x02\x02\u0165\u0163\x03\x02\x02\x02\u0166\u015C\x03\x02", "\x02\x02\u0166\u0167\x03\x02\x02\x02\u0167\u0168\x03\x02", "\x02\x02\u0168\u0169\x07\x12\x02\x02\u0169!\x03\x02", "\x02\x02\u016A\u016B\x07\x1D\x02\x02\u016B\u016D\x05\xB2", "Z\x02\u016C\u016E\x054\x1B\x02\u016D\u016C\x03\x02\x02", "\x02\u016D\u016E\x03\x02\x02\x02\u016E\u0173\x03\x02\x02", "\x02\u016F\u0172\x07x\x02\x02\u0170\u0172\x05\xB6\\\x02", "\u0171\u016F\x03\x02\x02\x02\u0171\u0170\x03\x02\x02\x02", "\u0172\u0175\x03\x02\x02\x02\u0173\u0171\x03\x02\x02\x02", "\u0173\u0174\x03\x02\x02\x02\u0174\u0176\x03\x02\x02\x02", "\u0175\u0173\x03\x02\x02\x02\u0176\u0177\x05P)\x02\u0177", "#\x03\x02\x02\x02\u0178\u017E\x05\xB2Z\x02\u0179\u017B", "\x07\x18\x02\x02\u017A\u017C\x05|?\x02\u017B\u017A\x03", "\x02\x02\x02\u017B\u017C\x03\x02\x02\x02\u017C\u017D\x03", "\x02\x02\x02\u017D\u017F\x07\x19\x02\x02\u017E\u0179\x03", "\x02\x02\x02\u017E\u017F\x03\x02\x02\x02\u017F%\x03", "\x02\x02\x02\u0180\u0181\x05(\x15\x02\u0181\u0182\x05", "4\x1B\x02\u0182\u0184\x05,\x17\x02\u0183\u0185\x05*\x16", "\x02\u0184\u0183\x03\x02\x02\x02\u0184\u0185\x03\x02\x02", "\x02\u0185\u0188\x03\x02\x02\x02\u0186\u0189\x07\x04\x02", "\x02\u0187\u0189\x05P)\x02\u0188\u0186\x03\x02\x02\x02", "\u0188\u0187\x03\x02\x02\x02\u0189'\x03\x02\x02\x02", "\u018A\u018C\x07\x1E\x02\x02\u018B\u018D\x05\xB2Z\x02", "\u018C\u018B\x03\x02\x02\x02\u018C\u018D\x03\x02\x02\x02", "\u018D\u0192\x03\x02\x02\x02\u018E\u0192\x07|\x02\x02", "\u018F\u0192\x07}\x02\x02\u0190\u0192\x07~\x02\x02\u0191", "\u018A\x03\x02\x02\x02\u0191\u018E\x03\x02\x02\x02\u0191", "\u018F\x03\x02\x02\x02\u0191\u0190\x03\x02\x02\x02\u0192", ")\x03\x02\x02\x02\u0193\u0194\x07\x1F\x02\x02\u0194", "\u0195\x054\x1B\x02\u0195+\x03\x02\x02\x02\u0196\u019F", "\x07r\x02\x02\u0197\u019F\x07w\x02\x02\u0198\u019F\x07", "t\x02\x02\u0199\u019F\x07v\x02\x02\u019A\u019F\x07x\x02", "\x02\u019B\u019F\x05N(\x02\u019C\u019F\x05$\x13\x02\u019D", "\u019F\x05\xB6\\\x02\u019E\u0196\x03\x02\x02\x02\u019E", "\u0197\x03\x02\x02\x02\u019E\u0198\x03\x02\x02\x02\u019E", "\u0199\x03\x02\x02\x02\u019E\u019A\x03\x02\x02\x02\u019E", "\u019B\x03\x02\x02\x02\u019E\u019C\x03\x02\x02\x02\u019E", "\u019D\x03\x02\x02\x02\u019F\u01A2\x03\x02\x02\x02\u01A0", "\u019E\x03\x02\x02\x02\u01A0\u01A1\x03\x02\x02\x02\u01A1", "-\x03\x02\x02\x02\u01A2\u01A0\x03\x02\x02\x02\u01A3", "\u01A4\x07 \x02\x02\u01A4\u01A5\x05\xB2Z\x02\u01A5\u01A7", "\x058\x1D\x02\u01A6\u01A8\x07l\x02\x02\u01A7\u01A6\x03", "\x02\x02\x02\u01A7\u01A8\x03\x02\x02\x02\u01A8\u01A9\x03", "\x02\x02\x02\u01A9\u01AA\x07\x04\x02\x02\u01AA/\x03", "\x02\x02\x02\u01AB\u01AC\x05\xB2Z\x02\u01AC1\x03\x02", "\x02\x02\u01AD\u01AE\x07!\x02\x02\u01AE\u01AF\x05\xB2", "Z\x02\u01AF\u01B1\x07\x10\x02\x02\u01B0\u01B2\x050\x19", "\x02\u01B1\u01B0\x03\x02\x02\x02\u01B1\u01B2\x03\x02\x02", "\x02\u01B2\u01B7\x03\x02\x02\x02\u01B3\u01B4\x07\x11\x02", "\x02\u01B4\u01B6\x050\x19\x02\u01B5\u01B3\x03\x02\x02", "\x02\u01B6\u01B9\x03\x02\x02\x02\u01B7\u01B5\x03\x02\x02", "\x02\u01B7\u01B8\x03\x02\x02\x02\u01B8\u01BA\x03\x02\x02", "\x02\u01B9\u01B7\x03\x02\x02\x02\u01BA\u01BB\x07\x12\x02", "\x02\u01BB3\x03\x02\x02\x02\u01BC\u01C5\x07\x18\x02", "\x02\u01BD\u01C2\x056\x1C\x02\u01BE\u01BF\x07\x11\x02", "\x02\u01BF\u01C1\x056\x1C\x02\u01C0\u01BE\x03\x02\x02", "\x02\u01C1\u01C4\x03\x02\x02\x02\u01C2\u01C0\x03\x02\x02", "\x02\u01C2\u01C3\x03\x02\x02\x02\u01C3\u01C6\x03\x02\x02", "\x02\u01C4\u01C2\x03\x02\x02\x02\u01C5\u01BD\x03\x02\x02", "\x02\u01C5\u01C6\x03\x02\x02\x02\u01C6\u01C7\x03\x02\x02", "\x02\u01C7\u01C8\x07\x19\x02\x02\u01C85\x03\x02\x02", "\x02\u01C9\u01CB\x05B\"\x02\u01CA\u01CC\x05L'\x02\u01CB\u01CA", "\x03\x02\x02\x02\u01CB\u01CC\x03\x02\x02\x02\u01CC\u01CE", "\x03\x02\x02\x02\u01CD\u01CF\x05\xB2Z\x02\u01CE\u01CD", "\x03\x02\x02\x02\u01CE\u01CF\x03\x02\x02\x02\u01CF7", "\x03\x02\x02\x02\u01D0\u01D9\x07\x18\x02\x02\u01D1\u01D6", "\x05:\x1E\x02\u01D2\u01D3\x07\x11\x02\x02\u01D3\u01D5", "\x05:\x1E\x02\u01D4\u01D2\x03\x02\x02\x02\u01D5\u01D8", "\x03\x02\x02\x02\u01D6\u01D4\x03\x02\x02\x02\u01D6\u01D7", "\x03\x02\x02\x02\u01D7\u01DA\x03\x02\x02\x02\u01D8\u01D6", "\x03\x02\x02\x02\u01D9\u01D1\x03\x02\x02\x02\u01D9\u01DA", "\x03\x02\x02\x02\u01DA\u01DB\x03\x02\x02\x02\u01DB\u01DC", "\x07\x19\x02\x02\u01DC9\x03\x02\x02\x02\u01DD\u01DF", "\x05B\"\x02\u01DE\u01E0\x07s\x02\x02\u01DF\u01DE\x03\x02", "\x02\x02\u01DF\u01E0\x03\x02\x02\x02\u01E0\u01E2\x03\x02", "\x02\x02\u01E1\u01E3\x05\xB2Z\x02\u01E2\u01E1\x03\x02", "\x02\x02\u01E2\u01E3\x03\x02\x02\x02\u01E3;\x03\x02", "\x02\x02\u01E4\u01ED\x07\x18\x02\x02\u01E5\u01EA\x05>", " \x02\u01E6\u01E7\x07\x11\x02\x02\u01E7\u01E9\x05> \x02", "\u01E8\u01E6\x03\x02\x02\x02\u01E9\u01EC\x03\x02\x02\x02", "\u01EA\u01E8\x03\x02\x02\x02\u01EA\u01EB\x03\x02\x02\x02", "\u01EB\u01EE\x03\x02\x02\x02\u01EC\u01EA\x03\x02\x02\x02", "\u01ED\u01E5\x03\x02\x02\x02\u01ED\u01EE\x03\x02\x02\x02", "\u01EE\u01EF\x03\x02\x02\x02\u01EF\u01F0\x07\x19\x02\x02", "\u01F0=\x03\x02\x02\x02\u01F1\u01F3\x05B\"\x02\u01F2\u01F4", "\x05L'\x02\u01F3\u01F2\x03\x02\x02\x02\u01F3\u01F4\x03", "\x02\x02\x02\u01F4?\x03\x02\x02\x02\u01F5\u01F7\x05", "B\"\x02\u01F6\u01F8\x05L'\x02\u01F7\u01F6\x03\x02\x02\x02", "\u01F7\u01F8\x03\x02\x02\x02\u01F8\u01F9\x03\x02\x02\x02", "\u01F9\u01FA\x05\xB2Z\x02\u01FAA\x03\x02\x02\x02\u01FB", "\u01FC\b\"\x01\x02\u01FC\u0203\x05v<\x02\u01FD\u0203\x05D", "#\x02\u01FE\u0203\x05H%\x02\u01FF\u0203\x05J&\x02\u0200\u0201", "\x07$\x02\x02\u0201\u0203\x07u\x02\x02\u0202\u01FB\x03", "\x02\x02\x02\u0202\u01FD\x03\x02\x02\x02\u0202\u01FE\x03", "\x02\x02\x02\u0202\u01FF\x03\x02\x02\x02\u0202\u0200\x03", "\x02\x02\x02\u0203\u020C\x03\x02\x02\x02\u0204\u0205\f", "\x05\x02\x02\u0205\u0207\x07\"\x02\x02\u0206\u0208\x05", "x=\x02\u0207\u0206\x03\x02\x02\x02\u0207\u0208\x03\x02", "\x02\x02\u0208\u0209\x03\x02\x02\x02\u0209\u020B\x07#", "\x02\x02\u020A\u0204\x03\x02\x02\x02\u020B\u020E\x03\x02", "\x02\x02\u020C\u020A\x03\x02\x02\x02\u020C\u020D\x03\x02", "\x02\x02\u020DC\x03\x02\x02\x02\u020E\u020C\x03\x02", "\x02\x02\u020F\u0214\x05\xB2Z\x02\u0210\u0211\x07%\x02", "\x02\u0211\u0213\x05\xB2Z\x02\u0212\u0210\x03\x02\x02", "\x02\u0213\u0216\x03\x02\x02\x02\u0214\u0212\x03\x02\x02", "\x02\u0214\u0215\x03\x02\x02\x02\u0215E\x03\x02\x02", "\x02\u0216\u0214\x03\x02\x02\x02\u0217\u021A\x05v<\x02", "\u0218\u021A\x05D#\x02\u0219\u0217\x03\x02\x02\x02\u0219", "\u0218\x03\x02\x02\x02\u021AG\x03\x02\x02\x02\u021B", "\u021C\x07&\x02\x02\u021C\u021D\x07\x18\x02\x02\u021D", "\u021E\x05F$\x02\u021E\u021F\x07'\x02\x02\u021F\u0220\x05", "B\"\x02\u0220\u0221\x07\x19\x02\x02\u0221I\x03\x02\x02", "\x02\u0222\u0223\x07\x1E\x02\x02\u0223\u0229\x05<\x1F", "\x02\u0224\u0228\x07t\x02\x02\u0225\u0228\x07r\x02\x02", "\u0226\u0228\x05N(\x02\u0227\u0224\x03\x02\x02\x02\u0227", "\u0225\x03\x02\x02\x02\u0227\u0226\x03\x02\x02\x02\u0228", "\u022B\x03\x02\x02\x02\u0229\u0227\x03\x02\x02\x02\u0229", "\u022A\x03\x02\x02\x02\u022A\u022E\x03\x02\x02\x02\u022B", "\u0229\x03\x02\x02\x02\u022C\u022D\x07\x1F\x02\x02\u022D", "\u022F\x05<\x1F\x02\u022E\u022C\x03\x02\x02\x02\u022E", "\u022F\x03\x02\x02\x02\u022FK\x03\x02\x02\x02\u0230", "\u0231\t\x04\x02\x02\u0231M\x03\x02\x02\x02\u0232\u0233", "\t\x05\x02\x02\u0233O\x03\x02\x02\x02\u0234\u0238\x07", "\x10\x02\x02\u0235\u0237\x05R*\x02\u0236\u0235\x03\x02", "\x02\x02\u0237\u023A\x03\x02\x02\x02\u0238\u0236\x03\x02", "\x02\x02\u0238\u0239\x03\x02\x02\x02\u0239\u023B\x03\x02", "\x02\x02\u023A\u0238\x03\x02\x02\x02\u023B\u023C\x07\x12", "\x02\x02\u023CQ\x03\x02\x02\x02\u023D\u024B\x05V,\x02", "\u023E\u024B\x05X-\x02\u023F\u024B\x05\\/\x02\u0240\u024B\x05", "`1\x02\u0241\u024B\x05P)\x02\u0242\u024B\x05b2\x02\u0243\u024B", "\x05d3\x02\u0244\u024B\x05f4\x02\u0245\u024B\x05h5\x02\u0246", "\u024B\x05j6\x02\u0247\u024B\x05l7\x02\u0248\u024B\x05n8\x02", "\u0249\u024B\x05^0\x02\u024A\u023D\x03\x02\x02\x02\u024A", "\u023E\x03\x02\x02\x02\u024A\u023F\x03\x02\x02\x02\u024A", "\u0240\x03\x02\x02\x02\u024A\u0241\x03\x02\x02\x02\u024A", "\u0242\x03\x02\x02\x02\u024A\u0243\x03\x02\x02\x02\u024A", "\u0244\x03\x02\x02\x02\u024A\u0245\x03\x02\x02\x02\u024A", "\u0246\x03\x02\x02\x02\u024A\u0247\x03\x02\x02\x02\u024A", "\u0248\x03\x02\x02\x02\u024A\u0249\x03\x02\x02\x02\u024B", "S\x03\x02\x02\x02\u024C\u024D\x05x=\x02\u024D\u024E\x07", "\x04\x02\x02\u024EU\x03\x02\x02\x02\u024F\u0250\x07", "+\x02\x02\u0250\u0251\x07\x18\x02\x02\u0251\u0252\x05", "x=\x02\u0252\u0253\x07\x19\x02\x02\u0253\u0256\x05R*\x02", "\u0254\u0255\x07,\x02\x02\u0255\u0257\x05R*\x02\u0256\u0254", "\x03\x02\x02\x02\u0256\u0257\x03\x02\x02\x02\u0257W", "\x03\x02\x02\x02\u0258\u0259\x07-\x02\x02\u0259\u025B", "\x05x=\x02\u025A\u025C\x05*\x16\x02\u025B\u025A\x03\x02", "\x02\x02\u025B\u025C\x03\x02\x02\x02\u025C\u025D\x03\x02", "\x02\x02\u025D\u025F\x05P)\x02\u025E\u0260\x05Z.\x02\u025F", "\u025E\x03\x02\x02\x02\u0260\u0261\x03\x02\x02\x02\u0261", "\u025F\x03\x02\x02\x02\u0261\u0262\x03\x02\x02\x02\u0262", "Y\x03\x02\x02\x02\u0263\u0268\x07.\x02\x02\u0264\u0266", "\x05\xB2Z\x02\u0265\u0264\x03\x02\x02\x02\u0265\u0266", "\x03\x02\x02\x02\u0266\u0267\x03\x02\x02\x02\u0267\u0269", "\x054\x1B\x02\u0268\u0265\x03\x02\x02\x02\u0268\u0269", "\x03\x02\x02\x02\u0269\u026A\x03\x02\x02\x02\u026A\u026B", "\x05P)\x02\u026B[\x03\x02\x02\x02\u026C\u026D\x07/\x02", "\x02\u026D\u026E\x07\x18\x02\x02\u026E\u026F\x05x=\x02", "\u026F\u0270\x07\x19\x02\x02\u0270\u0271\x05R*\x02\u0271", "]\x03\x02\x02\x02\u0272\u0275\x05p9\x02\u0273\u0275\x05", "T+\x02\u0274\u0272\x03\x02\x02\x02\u0274\u0273\x03\x02", "\x02\x02\u0275_\x03\x02\x02\x02\u0276\u0277\x07\x1B", "\x02\x02\u0277\u027A\x07\x18\x02\x02\u0278\u027B\x05^", "0\x02\u0279\u027B\x07\x04\x02\x02\u027A\u0278\x03\x02", "\x02\x02\u027A\u0279\x03\x02\x02\x02\u027B\u027E\x03\x02", "\x02\x02\u027C\u027F\x05T+\x02\u027D\u027F\x07\x04\x02", "\x02\u027E\u027C\x03\x02\x02\x02\u027E\u027D\x03\x02\x02", "\x02\u027F\u0281\x03\x02\x02\x02\u0280\u0282\x05x=\x02", "\u0281\u0280\x03\x02\x02\x02\u0281\u0282\x03\x02\x02\x02", "\u0282\u0283\x03\x02\x02\x02\u0283\u0284\x07\x19\x02\x02", "\u0284\u0285\x05R*\x02\u0285a\x03\x02\x02\x02\u0286\u0288", "\x070\x02\x02\u0287\u0289\x07\x80\x02\x02\u0288\u0287", "\x03\x02\x02\x02\u0288\u0289\x03\x02\x02\x02\u0289\u028A", "\x03\x02\x02\x02\u028A\u028B\x05\x86D\x02\u028Bc\x03", "\x02\x02\x02\u028C\u028D\x071\x02\x02\u028D\u028E\x05", "R*\x02\u028E\u028F\x07/\x02\x02\u028F\u0290\x07\x18\x02", "\x02\u0290\u0291\x05x=\x02\u0291\u0292\x07\x19\x02\x02", "\u0292\u0293\x07\x04\x02\x02\u0293e\x03\x02\x02\x02", "\u0294\u0295\x07p\x02\x02\u0295\u0296\x07\x04\x02\x02", "\u0296g\x03\x02\x02\x02\u0297\u0298\x07m\x02\x02\u0298", "\u0299\x07\x04\x02\x02\u0299i\x03\x02\x02\x02\u029A", "\u029C\x072\x02\x02\u029B\u029D\x05x=\x02\u029C\u029B\x03", "\x02\x02\x02\u029C\u029D\x03\x02\x02\x02\u029D\u029E\x03", "\x02\x02\x02\u029E\u029F\x07\x04\x02\x02\u029Fk\x03", "\x02\x02\x02\u02A0\u02A1\x073\x02\x02\u02A1\u02A2\x07", "\x04\x02\x02\u02A2m\x03\x02\x02\x02\u02A3\u02A4\x07", "4\x02\x02\u02A4\u02A5\x05\x84C\x02\u02A5\u02A6\x07\x04", "\x02\x02\u02A6o\x03\x02\x02\x02\u02A7\u02A8\x075\x02", "\x02\u02A8\u02AF\x05t;\x02\u02A9\u02AF\x05@!\x02\u02AA\u02AB", "\x07\x18\x02\x02\u02AB\u02AC\x05r:\x02\u02AC\u02AD\x07", "\x19\x02\x02\u02AD\u02AF\x03\x02\x02\x02\u02AE\u02A7\x03", "\x02\x02\x02\u02AE\u02A9\x03\x02\x02\x02\u02AE\u02AA\x03", "\x02\x02\x02\u02AF\u02B2\x03\x02\x02\x02\u02B0\u02B1\x07", "\x0B\x02\x02\u02B1\u02B3\x05x=\x02\u02B2\u02B0\x03\x02", "\x02\x02\u02B2\u02B3\x03\x02\x02\x02\u02B3\u02B4\x03\x02", "\x02\x02\u02B4\u02B5\x07\x04\x02\x02\u02B5q\x03\x02", "\x02\x02\u02B6\u02B8\x05@!\x02\u02B7\u02B6\x03\x02\x02", "\x02\u02B7\u02B8\x03\x02\x02\x02\u02B8\u02BF\x03\x02\x02", "\x02\u02B9\u02BB\x07\x11\x02\x02\u02BA\u02BC\x05@!\x02", "\u02BB\u02BA\x03\x02\x02\x02\u02BB\u02BC\x03\x02\x02\x02", "\u02BC\u02BE\x03\x02\x02\x02\u02BD\u02B9\x03\x02\x02\x02", "\u02BE\u02C1\x03\x02\x02\x02\u02BF\u02BD\x03\x02\x02\x02", "\u02BF\u02C0\x03\x02\x02\x02\u02C0s\x03\x02\x02\x02", "\u02C1\u02BF\x03\x02\x02\x02\u02C2\u02C9\x07\x18\x02\x02", "\u02C3\u02C5\x05\xB2Z\x02\u02C4\u02C3\x03\x02\x02\x02", "\u02C4\u02C5\x03\x02\x02\x02\u02C5\u02C6\x03\x02\x02\x02", "\u02C6\u02C8\x07\x11\x02\x02\u02C7\u02C4\x03\x02\x02\x02", "\u02C8\u02CB\x03\x02\x02\x02\u02C9\u02C7\x03\x02\x02\x02", "\u02C9\u02CA\x03\x02\x02\x02\u02CA\u02CD\x03\x02\x02\x02", "\u02CB\u02C9\x03\x02\x02\x02\u02CC\u02CE\x05\xB2Z\x02", "\u02CD\u02CC\x03\x02\x02\x02\u02CD\u02CE\x03\x02\x02\x02", "\u02CE\u02CF\x03\x02\x02\x02\u02CF\u02D0\x07\x19\x02\x02", "\u02D0u\x03\x02\x02\x02\u02D1\u02D2\t\x06\x02\x02\u02D2", "w\x03\x02\x02\x02\u02D3\u02D4\b=\x01\x02\u02D4\u02D5\x07", ";\x02\x02\u02D5\u02E6\x05B\"\x02\u02D6\u02D7\x07\x18\x02", "\x02\u02D7\u02D8\x05x=\x02\u02D8\u02D9\x07\x19\x02\x02", "\u02D9\u02E6\x03\x02\x02\x02\u02DA\u02DB\t\x07\x02\x02", "\u02DB\u02E6\x05x=\x15\u02DC\u02DD\t\b\x02\x02\u02DD\u02E6\x05", "x=\x14\u02DE\u02DF\t\t\x02\x02\u02DF\u02E6\x05x=\x13\u02E0", "\u02E1\x07A\x02\x02\u02E1\u02E6\x05x=\x12\u02E2\u02E3\x07", "\x06\x02\x02\u02E3\u02E6\x05x=\x11\u02E4\u02E6\x05z>\x02", "\u02E5\u02D3\x03\x02\x02\x02\u02E5\u02D6\x03\x02\x02\x02", "\u02E5\u02DA\x03\x02\x02\x02\u02E5\u02DC\x03\x02\x02\x02", "\u02E5\u02DE\x03\x02\x02\x02\u02E5\u02E0\x03\x02\x02\x02", "\u02E5\u02E2\x03\x02\x02\x02\u02E5\u02E4\x03\x02\x02\x02", "\u02E6\u0332\x03\x02\x02\x02\u02E7\u02E8\f\x10\x02\x02", "\u02E8\u02E9\x07B\x02\x02\u02E9\u0331\x05x=\x11\u02EA\u02EB", "\f\x0F\x02\x02\u02EB\u02EC\t\n\x02\x02\u02EC\u0331\x05x", "=\x10\u02ED\u02EE\f\x0E\x02\x02\u02EE\u02EF\t\b\x02\x02", "\u02EF\u0331\x05x=\x0F\u02F0\u02F1\f\r\x02\x02\u02F1\u02F2\t", "\x0B\x02\x02\u02F2\u0331\x05x=\x0E\u02F3\u02F4\f\f\x02\x02", "\u02F4\u02F5\x07G\x02\x02\u02F5\u0331\x05x=\r\u02F6\u02F7\f", "\x0B\x02\x02\u02F7\u02F8\x07\x05\x02\x02\u02F8\u0331\x05", "x=\f\u02F9\u02FA\f\n\x02\x02\u02FA\u02FB\x07H\x02\x02\u02FB", "\u0331\x05x=\x0B\u02FC\u02FD\f\t\x02\x02\u02FD\u02FE\t\f\x02", "\x02\u02FE\u0331\x05x=\n\u02FF\u0300\f\b\x02\x02\u0300\u0301", "\t\r\x02\x02\u0301\u0331\x05x=\t\u0302\u0303\f\x07\x02\x02", "\u0303\u0304\x07K\x02\x02\u0304\u0331\x05x=\b\u0305\u0306\f", "\x06\x02\x02\u0306\u0307\x07L\x02\x02\u0307\u0331\x05", "x=\x07\u0308\u0309\f\x05\x02\x02\u0309\u030A\x07M\x02\x02", "\u030A\u030B\x05x=\x02\u030B\u030C\x07<\x02\x02\u030C\u030D", "\x05x=\x06\u030D\u0331\x03\x02\x02\x02\u030E\u030F\f\x04", "\x02\x02\u030F\u0310\t\x0E\x02\x02\u0310\u0331\x05x=\x05", "\u0311\u0312\f\x1D\x02\x02\u0312\u0331\t\x07\x02\x02\u0313", "\u0314\f\x1B\x02\x02\u0314\u0316\x07\"\x02\x02\u0315\u0317", "\x05x=\x02\u0316\u0315\x03\x02\x02\x02\u0316\u0317\x03", "\x02\x02\x02\u0317\u0318\x03\x02\x02\x02\u0318\u0331\x07", "#\x02\x02\u0319\u031A\f\x1A\x02\x02\u031A\u031C\x07\"\x02", "\x02\u031B\u031D\x05x=\x02\u031C\u031B\x03\x02\x02\x02", "\u031C\u031D\x03\x02\x02\x02\u031D\u031E\x03\x02\x02\x02", "\u031E\u0320\x07<\x02\x02\u031F\u0321\x05x=\x02\u0320\u031F", "\x03\x02\x02\x02\u0320\u0321\x03\x02\x02\x02\u0321\u0322", "\x03\x02\x02\x02\u0322\u0331\x07#\x02\x02\u0323\u0324", "\f\x19\x02\x02\u0324\u0325\x07%\x02\x02\u0325\u0331\x05", "\xB2Z\x02\u0326\u0327\f\x18\x02\x02\u0327\u0328\x07\x10", "\x02\x02\u0328\u0329\x05~@\x02\u0329\u032A\x07\x12\x02", "\x02\u032A\u0331\x03\x02\x02\x02\u032B\u032C\f\x17\x02", "\x02\u032C\u032D\x07\x18\x02\x02\u032D\u032E\x05\x82B", "\x02\u032E\u032F\x07\x19\x02\x02\u032F\u0331\x03\x02\x02", "\x02\u0330\u02E7\x03\x02\x02\x02\u0330\u02EA\x03\x02\x02", "\x02\u0330\u02ED\x03\x02\x02\x02\u0330\u02F0\x03\x02\x02", "\x02\u0330\u02F3\x03\x02\x02\x02\u0330\u02F6\x03\x02\x02", "\x02\u0330\u02F9\x03\x02\x02\x02\u0330\u02FC\x03\x02\x02", "\x02\u0330\u02FF\x03\x02\x02\x02\u0330\u0302\x03\x02\x02", "\x02\u0330\u0305\x03\x02\x02\x02\u0330\u0308\x03\x02\x02", "\x02\u0330\u030E\x03\x02\x02\x02\u0330\u0311\x03\x02\x02", "\x02\u0330\u0313\x03\x02\x02\x02\u0330\u0319\x03\x02\x02", "\x02\u0330\u0323\x03\x02\x02\x02\u0330\u0326\x03\x02\x02", "\x02\u0330\u032B\x03\x02\x02\x02\u0331\u0334\x03\x02\x02", "\x02\u0332\u0330\x03\x02\x02\x02\u0332\u0333\x03\x02\x02", "\x02\u0333y\x03\x02\x02\x02\u0334\u0332\x03\x02\x02", "\x02\u0335\u0347\x07f\x02\x02\u0336\u0347\x05\xB0Y\x02", "\u0337\u0347\x05\xB4[\x02\u0338\u0347\x05\xB8]\x02\u0339", "\u033C\x05\xB2Z\x02\u033A\u033B\x07\"\x02\x02\u033B\u033D", "\x07#\x02\x02\u033C\u033A\x03\x02\x02\x02\u033C\u033D", "\x03\x02\x02\x02\u033D\u0347\x03\x02\x02\x02\u033E\u0347", "\x07z\x02\x02\u033F\u0347\x07u\x02\x02\u0340\u0347\x05", "\xACW\x02\u0341\u0344\x05\xAEX\x02\u0342\u0343\x07\"\x02", "\x02\u0343\u0345\x07#\x02\x02\u0344\u0342\x03\x02\x02", "\x02\u0344\u0345\x03\x02\x02\x02\u0345\u0347\x03\x02\x02", "\x02\u0346\u0335\x03\x02\x02\x02\u0346\u0336\x03\x02\x02", "\x02\u0346\u0337\x03\x02\x02\x02\u0346\u0338\x03\x02\x02", "\x02\u0346\u0339\x03\x02\x02\x02\u0346\u033E\x03\x02\x02", "\x02\u0346\u033F\x03\x02\x02\x02\u0346\u0340\x03\x02\x02", "\x02\u0346\u0341\x03\x02\x02\x02\u0347{\x03\x02\x02", "\x02\u0348\u034D\x05x=\x02\u0349\u034A\x07\x11\x02\x02", "\u034A\u034C\x05x=\x02\u034B\u0349\x03\x02\x02\x02\u034C", "\u034F\x03\x02\x02\x02\u034D\u034B\x03\x02\x02\x02\u034D", "\u034E\x03\x02\x02\x02\u034E}\x03\x02\x02\x02\u034F", "\u034D\x03\x02\x02\x02\u0350\u0355\x05\x80A\x02\u0351", "\u0352\x07\x11\x02\x02\u0352\u0354\x05\x80A\x02\u0353", "\u0351\x03\x02\x02\x02\u0354\u0357\x03\x02\x02\x02\u0355", "\u0353\x03\x02\x02\x02\u0355\u0356\x03\x02\x02\x02\u0356", "\u0359\x03\x02\x02\x02\u0357\u0355\x03\x02\x02\x02\u0358", "\u035A\x07\x11\x02\x02\u0359\u0358\x03\x02\x02\x02\u0359", "\u035A\x03\x02\x02\x02\u035A\x7F\x03\x02\x02\x02\u035B", "\u035C\x05\xB2Z\x02\u035C\u035D\x07<\x02\x02\u035D\u035E", "\x05x=\x02\u035E\x81\x03\x02\x02\x02\u035F\u0361\x07", "\x10\x02\x02\u0360\u0362\x05~@\x02\u0361\u0360\x03\x02", "\x02\x02\u0361\u0362\x03\x02\x02\x02\u0362\u0363\x03\x02", "\x02\x02\u0363\u0368\x07\x12\x02\x02\u0364\u0366\x05|", "?\x02\u0365\u0364\x03\x02\x02\x02\u0365\u0366\x03\x02", "\x02\x02\u0366\u0368\x03\x02\x02\x02\u0367\u035F\x03\x02", "\x02\x02\u0367\u0365\x03\x02\x02\x02\u0368\x83\x03\x02", "\x02\x02\u0369\u036A\x05x=\x02\u036A\u036B\x07\x18\x02", "\x02\u036B\u036C\x05\x82B\x02\u036C\u036D\x07\x19\x02", "\x02\u036D\x85\x03\x02\x02\x02\u036E\u0372\x07\x10\x02", "\x02\u036F\u0371\x05\x88E\x02\u0370\u036F\x03\x02\x02", "\x02\u0371\u0374\x03\x02\x02\x02\u0372\u0370\x03\x02\x02", "\x02\u0372\u0373\x03\x02\x02\x02\u0373\u0375\x03\x02\x02", "\x02\u0374\u0372\x03\x02\x02\x02\u0375\u0376\x07\x12\x02", "\x02\u0376\x87\x03\x02\x02\x02\u0377\u038A\x05\xB2Z", "\x02\u0378\u038A\x05\x86D\x02\u0379\u038A\x05\x8AF\x02", "\u037A\u038A\x05\x90I\x02\u037B\u038A\x05\x92J\x02\u037C", "\u038A\x05\x98M\x02\u037D\u038A\x05\x9AN\x02\u037E\u038A", "\x05\x9CO\x02\u037F\u038A\x05\xA0Q\x02\u0380\u038A\x05", "\xA4S\x02\u0381\u038A\x05\xA6T\x02\u0382\u038A\x07m\x02", "\x02\u0383\u038A\x07p\x02\x02\u0384\u038A\x07q\x02\x02", "\u0385\u038A\x05\xAAV\x02\u0386\u038A\x05\xB0Y\x02\u0387", "\u038A\x05\xB8]\x02\u0388\u038A\x05\xB4[\x02\u0389\u0377", "\x03\x02\x02\x02\u0389\u0378\x03\x02\x02\x02\u0389\u0379", "\x03\x02\x02\x02\u0389\u037A\x03\x02\x02\x02\u0389\u037B", "\x03\x02\x02\x02\u0389\u037C\x03\x02\x02\x02\u0389\u037D", "\x03\x02\x02\x02\u0389\u037E\x03\x02\x02\x02\u0389\u037F", "\x03\x02\x02\x02\u0389\u0380\x03\x02\x02\x02\u0389\u0381", "\x03\x02\x02\x02\u0389\u0382\x03\x02\x02\x02\u0389\u0383", "\x03\x02\x02\x02\u0389\u0384\x03\x02\x02\x02\u0389\u0385", "\x03\x02\x02\x02\u0389\u0386\x03\x02\x02\x02\u0389\u0387", "\x03\x02\x02\x02\u0389\u0388\x03\x02\x02\x02\u038A\x89", "\x03\x02\x02\x02\u038B\u038F\x05\x8EH\x02\u038C\u038F", "\x05\xA8U\x02\u038D\u038F\x05\x8CG\x02\u038E\u038B\x03", "\x02\x02\x02\u038E\u038C\x03\x02\x02\x02\u038E\u038D\x03", "\x02\x02\x02\u038F\x8B\x03\x02\x02\x02\u0390\u0391\x05", "\xB2Z\x02\u0391\u0392\x07%\x02\x02\u0392\u0393\x05\xB2", "Z\x02\u0393\x8D\x03\x02\x02\x02\u0394\u0399\x072\x02", "\x02\u0395\u0399\x07$\x02\x02\u0396\u0399\x078\x02\x02", "\u0397\u0399\x05\xB2Z\x02\u0398\u0394\x03\x02\x02\x02", "\u0398\u0395\x03\x02\x02\x02\u0398\u0396\x03\x02\x02\x02", "\u0398\u0397\x03\x02\x02\x02\u0399\u03A6\x03\x02\x02\x02", "\u039A\u039C\x07\x18\x02\x02\u039B\u039D\x05\x8AF\x02", "\u039C\u039B\x03\x02\x02\x02\u039C\u039D\x03\x02\x02\x02", "\u039D\u03A2\x03\x02\x02\x02\u039E\u039F\x07\x11\x02\x02", "\u039F\u03A1\x05\x8AF\x02\u03A0\u039E\x03\x02\x02\x02", "\u03A1\u03A4\x03\x02\x02\x02\u03A2\u03A0\x03\x02\x02\x02", "\u03A2\u03A3\x03\x02\x02\x02\u03A3\u03A5\x03\x02\x02\x02", "\u03A4\u03A2\x03\x02\x02\x02\u03A5\u03A7\x07\x19\x02\x02", "\u03A6\u039A\x03\x02\x02\x02\u03A6\u03A7\x03\x02\x02\x02", "\u03A7\x8F\x03\x02\x02\x02\u03A8\u03A9\x07X\x02\x02", "\u03A9\u03AC\x05\x94K\x02\u03AA\u03AB\x07Y\x02\x02\u03AB", "\u03AD\x05\x8AF\x02\u03AC\u03AA\x03\x02\x02\x02\u03AC", "\u03AD\x03\x02\x02\x02\u03AD\x91\x03\x02\x02\x02\u03AE", "\u03AF\x05\x94K\x02\u03AF\u03B0\x07Y\x02\x02\u03B0\u03B1", "\x05\x8AF\x02\u03B1\x93\x03\x02\x02\x02\u03B2\u03B9", "\x05\xB2Z\x02\u03B3\u03B9\x05\x8CG\x02\u03B4\u03B5\x07", "\x18\x02\x02\u03B5\u03B6\x05\x96L\x02\u03B6\u03B7\x07", "\x19\x02\x02\u03B7\u03B9\x03\x02\x02\x02\u03B8\u03B2\x03", "\x02\x02\x02\u03B8\u03B3\x03\x02\x02\x02\u03B8\u03B4\x03", "\x02\x02\x02\u03B9\x95\x03\x02\x02\x02\u03BA\u03BF\x05", "\xB2Z\x02\u03BB\u03BC\x07\x11\x02\x02\u03BC\u03BE\x05", "\xB2Z\x02\u03BD\u03BB\x03\x02\x02\x02\u03BE\u03C1\x03", "\x02\x02\x02\u03BF\u03BD\x03\x02\x02\x02\u03BF\u03C0\x03", "\x02\x02\x02\u03C0\x97\x03\x02\x02\x02\u03C1\u03BF\x03", "\x02\x02\x02\u03C2\u03C3\x07Z\x02\x02\u03C3\u03C4\x05", "\xB2Z\x02\u03C4\x99\x03\x02\x02\x02\u03C5\u03C6\x05", "\xB2Z\x02\u03C6\u03C7\x07<\x02\x02\u03C7\x9B\x03\x02", "\x02\x02\u03C8\u03C9\x07[\x02\x02\u03C9\u03CD\x05\x8A", "F\x02\u03CA\u03CC\x05\x9EP\x02\u03CB\u03CA\x03\x02\x02", "\x02\u03CC\u03CF\x03\x02\x02\x02\u03CD\u03CB\x03\x02\x02", "\x02\u03CD\u03CE\x03\x02\x02\x02\u03CE\x9D\x03\x02\x02", "\x02\u03CF\u03CD\x03\x02\x02\x02\u03D0\u03D1\x07\\\x02", "\x02\u03D1\u03D2\x05\xA8U\x02\u03D2\u03D3\x05\x86D\x02", "\u03D3\u03D7\x03\x02\x02\x02\u03D4\u03D5\x07]\x02\x02", "\u03D5\u03D7\x05\x86D\x02\u03D6\u03D0\x03\x02\x02\x02", "\u03D6\u03D4\x03\x02\x02\x02\u03D7\x9F\x03\x02\x02\x02", "\u03D8\u03D9\x07\x1E\x02\x02\u03D9\u03DA\x05\xB2Z\x02", "\u03DA\u03DC\x07\x18\x02\x02\u03DB\u03DD\x05\x96L\x02", "\u03DC\u03DB\x03\x02\x02\x02\u03DC\u03DD\x03\x02\x02\x02", "\u03DD\u03DE\x03\x02\x02\x02\u03DE\u03E0\x07\x19\x02\x02", "\u03DF\u03E1\x05\xA2R\x02\u03E0\u03DF\x03\x02\x02\x02", "\u03E0\u03E1\x03\x02\x02\x02\u03E1\u03E2\x03\x02\x02\x02", "\u03E2\u03E3\x05\x86D\x02\u03E3\xA1\x03\x02\x02\x02", "\u03E4\u03E5\x07^\x02\x02\u03E5\u03E6\x05\x96L\x02\u03E6", "\xA3\x03\x02\x02\x02\u03E7\u03EA\x07\x1B\x02\x02\u03E8", "\u03EB\x05\x86D\x02\u03E9\u03EB\x05\x8AF\x02\u03EA\u03E8", "\x03\x02\x02\x02\u03EA\u03E9\x03\x02\x02\x02\u03EB\u03EC", "\x03\x02\x02\x02\u03EC\u03EF\x05\x8AF\x02\u03ED\u03F0", "\x05\x86D\x02\u03EE\u03F0\x05\x8AF\x02\u03EF\u03ED\x03", "\x02\x02\x02\u03EF\u03EE\x03\x02\x02\x02\u03F0\u03F1\x03", "\x02\x02\x02\u03F1\u03F2\x05\x86D\x02\u03F2\xA5\x03", "\x02\x02\x02\u03F3\u03F4\x07+\x02\x02\u03F4\u03F5\x05", "\x8AF\x02\u03F5\u03F6\x05\x86D\x02\u03F6\xA7\x03\x02", "\x02\x02\u03F7\u03FC\x05\xB8]\x02\u03F8\u03FC\x07g\x02", "\x02\u03F9\u03FC\x07h\x02\x02\u03FA\u03FC\x05\xB4[\x02", "\u03FB\u03F7\x03\x02\x02\x02\u03FB\u03F8\x03\x02\x02\x02", "\u03FB\u03F9\x03\x02\x02\x02\u03FB\u03FA\x03\x02\x02\x02", "\u03FC\xA9\x03\x02\x02\x02\u03FD\u03FE\x070\x02\x02", "\u03FE\u03FF\x05\xB2Z\x02\u03FF\u0400\x05\x86D\x02\u0400", "\xAB\x03\x02\x02\x02\u0401\u0403\x07\x18\x02\x02\u0402", "\u0404\x05x=\x02\u0403\u0402\x03\x02\x02\x02\u0403\u0404", "\x03\x02\x02\x02\u0404\u040B\x03\x02\x02\x02\u0405\u0407", "\x07\x11\x02\x02\u0406\u0408\x05x=\x02\u0407\u0406\x03", "\x02\x02\x02\u0407\u0408\x03\x02\x02\x02\u0408\u040A\x03", "\x02\x02\x02\u0409\u0405\x03\x02\x02\x02\u040A\u040D\x03", "\x02\x02\x02\u040B\u0409\x03\x02\x02\x02\u040B\u040C\x03", "\x02\x02\x02\u040C\u040E\x03\x02\x02\x02\u040D\u040B\x03", "\x02\x02\x02\u040E\u041C\x07\x19\x02\x02\u040F\u0418\x07", "\"\x02\x02\u0410\u0415\x05x=\x02\u0411\u0412\x07\x11\x02", "\x02\u0412\u0414\x05x=\x02\u0413\u0411\x03\x02\x02\x02", "\u0414\u0417\x03\x02\x02\x02\u0415\u0413\x03\x02\x02\x02", "\u0415\u0416\x03\x02\x02\x02\u0416\u0419\x03\x02\x02\x02", "\u0417\u0415\x03\x02\x02\x02\u0418\u0410\x03\x02\x02\x02", "\u0418\u0419\x03\x02\x02\x02\u0419\u041A\x03\x02\x02\x02", "\u041A\u041C\x07#\x02\x02\u041B\u0401\x03\x02\x02\x02", "\u041B\u040F\x03\x02\x02\x02\u041C\xAD\x03\x02\x02\x02", "\u041D\u0420\x05v<\x02\u041E\u0420\x05D#\x02\u041F\u041D\x03", "\x02\x02\x02\u041F\u041E\x03\x02\x02\x02\u0420\xAF\x03", "\x02\x02\x02\u0421\u0423\t\x0F\x02\x02\u0422\u0424\x07", "i\x02\x02\u0423\u0422\x03\x02\x02\x02\u0423\u0424\x03", "\x02\x02\x02\u0424\xB1\x03\x02\x02\x02\u0425\u0426\t", "\x10\x02\x02\u0426\xB3\x03\x02\x02\x02\u0427\u0429\x07", "j\x02\x02\u0428\u0427\x03\x02\x02\x02\u0429\u042A\x03", "\x02\x02\x02\u042A\u0428\x03\x02\x02\x02\u042A\u042B\x03", "\x02\x02\x02\u042B\xB5\x03\x02\x02\x02\u042C\u0438\x07", "`\x02\x02\u042D\u042E\x07\x18\x02\x02\u042E\u0433\x05", "D#\x02\u042F\u0430\x07\x11\x02\x02\u0430\u0432\x05D#\x02", "\u0431\u042F\x03\x02\x02\x02\u0432\u0435\x03\x02\x02\x02", "\u0433\u0431\x03\x02\x02\x02\u0433\u0434\x03\x02\x02\x02", "\u0434\u0436\x03\x02\x02\x02\u0435\u0433\x03\x02\x02\x02", "\u0436\u0437\x07\x19\x02\x02\u0437\u0439\x03\x02\x02\x02", "\u0438\u042D\x03\x02\x02\x02\u0438\u0439\x03\x02\x02\x02", "\u0439\xB7\x03\x02\x02\x02\u043A\u043C\x07\x80\x02\x02", "\u043B\u043A\x03\x02\x02\x02\u043C\u043D\x03\x02\x02\x02", "\u043D\u043B\x03\x02\x02\x02\u043D\u043E\x03\x02\x02\x02", "\u043E\xB9\x03\x02\x02\x02\x7F\xC1\xC3\xD1\xD5\xDA", "\xDE\xE1\xE6\xEC\xF2\xF6\u0102\u010A\u010D\u0117\u011A\u0120", "\u0128\u012B\u0134\u013D\u013F\u0145\u0155\u0163\u0166\u016D\u0171\u0173", "\u017B\u017E\u0184\u0188\u018C\u0191\u019E\u01A0\u01A7\u01B1\u01B7\u01C2", "\u01C5\u01CB\u01CE\u01D6\u01D9\u01DF\u01E2\u01EA\u01ED\u01F3\u01F7\u0202", "\u0207\u020C\u0214\u0219\u0227\u0229\u022E\u0238\u024A\u0256\u025B\u0261", "\u0265\u0268\u0274\u027A\u027E\u0281\u0288\u029C\u02AE\u02B2\u02B7\u02BB", "\u02BF\u02C4\u02C9\u02CD\u02E5\u0316\u031C\u0320\u0330\u0332\u033C\u0344", "\u0346\u034D\u0355\u0359\u0361\u0365\u0367\u0372\u0389\u038E\u0398\u039C", "\u03A2\u03A6\u03AC\u03B8\u03BF\u03CD\u03D6\u03DC\u03E0\u03EA\u03EF\u03FB", "\u0403\u0407\u040B\u0415\u0418\u041B\u041F\u0423\u042A\u0433\u0438\u043D"].join("");
var atn = new _antlr["default"].atn.ATNDeserializer().deserialize(serializedATN);
var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
  return new _antlr["default"].dfa.DFA(ds, index);
});
var sharedContextCache = new _antlr["default"].PredictionContextCache();

var SolidityParser = /*#__PURE__*/function (_antlr4$Parser) {
  _inherits(SolidityParser, _antlr4$Parser);

  var _super = _createSuper(SolidityParser);

  function SolidityParser(input) {
    var _this;

    _classCallCheck(this, SolidityParser);

    _this = _super.call(this, input);
    _this._interp = new _antlr["default"].atn.ParserATNSimulator(_assertThisInitialized(_this), atn, decisionsToDFA, sharedContextCache);
    _this.ruleNames = SolidityParser.ruleNames;
    _this.literalNames = SolidityParser.literalNames;
    _this.symbolicNames = SolidityParser.symbolicNames;
    return _this;
  }

  _createClass(SolidityParser, [{
    key: "sempred",
    value: function sempred(localctx, ruleIndex, predIndex) {
      switch (ruleIndex) {
        case 32:
          return this.typeName_sempred(localctx, predIndex);

        case 59:
          return this.expression_sempred(localctx, predIndex);

        default:
          throw "No predicate with index:" + ruleIndex;
      }
    }
  }, {
    key: "typeName_sempred",
    value: function typeName_sempred(localctx, predIndex) {
      switch (predIndex) {
        case 0:
          return this.precpred(this._ctx, 3);

        default:
          throw "No predicate with index:" + predIndex;
      }
    }
  }, {
    key: "expression_sempred",
    value: function expression_sempred(localctx, predIndex) {
      switch (predIndex) {
        case 1:
          return this.precpred(this._ctx, 14);

        case 2:
          return this.precpred(this._ctx, 13);

        case 3:
          return this.precpred(this._ctx, 12);

        case 4:
          return this.precpred(this._ctx, 11);

        case 5:
          return this.precpred(this._ctx, 10);

        case 6:
          return this.precpred(this._ctx, 9);

        case 7:
          return this.precpred(this._ctx, 8);

        case 8:
          return this.precpred(this._ctx, 7);

        case 9:
          return this.precpred(this._ctx, 6);

        case 10:
          return this.precpred(this._ctx, 5);

        case 11:
          return this.precpred(this._ctx, 4);

        case 12:
          return this.precpred(this._ctx, 3);

        case 13:
          return this.precpred(this._ctx, 2);

        case 14:
          return this.precpred(this._ctx, 27);

        case 15:
          return this.precpred(this._ctx, 25);

        case 16:
          return this.precpred(this._ctx, 24);

        case 17:
          return this.precpred(this._ctx, 23);

        case 18:
          return this.precpred(this._ctx, 22);

        case 19:
          return this.precpred(this._ctx, 21);

        default:
          throw "No predicate with index:" + predIndex;
      }
    }
  }, {
    key: "sourceUnit",
    value: function sourceUnit() {
      var localctx = new SourceUnitContext(this, this._ctx, this.state);
      this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 193;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__0 | 1 << SolidityParser.T__10 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__16 | 1 << SolidityParser.T__17 | 1 << SolidityParser.T__18 | 1 << SolidityParser.T__19 | 1 << SolidityParser.T__25 | 1 << SolidityParser.T__27 | 1 << SolidityParser.T__30)) !== 0 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ConstructorKeyword - 93 | 1 << SolidityParser.FallbackKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 191;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);

          switch (la_) {
            case 1:
              this.state = 184;
              this.pragmaDirective();
              break;

            case 2:
              this.state = 185;
              this.importDirective();
              break;

            case 3:
              this.state = 186;
              this.contractDefinition();
              break;

            case 4:
              this.state = 187;
              this.enumDefinition();
              break;

            case 5:
              this.state = 188;
              this.structDefinition();
              break;

            case 6:
              this.state = 189;
              this.functionDefinition();
              break;

            case 7:
              this.state = 190;
              this.fileLevelConstant();
              break;
          }

          this.state = 195;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }

        this.state = 196;
        this.match(SolidityParser.EOF);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "pragmaDirective",
    value: function pragmaDirective() {
      var localctx = new PragmaDirectiveContext(this, this._ctx, this.state);
      this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 198;
        this.match(SolidityParser.T__0);
        this.state = 199;
        this.pragmaName();
        this.state = 200;
        this.pragmaValue();
        this.state = 201;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "pragmaName",
    value: function pragmaName() {
      var localctx = new PragmaNameContext(this, this._ctx, this.state);
      this.enterRule(localctx, 4, SolidityParser.RULE_pragmaName);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 203;
        this.identifier();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "pragmaValue",
    value: function pragmaValue() {
      var localctx = new PragmaValueContext(this, this._ctx, this.state);
      this.enterRule(localctx, 6, SolidityParser.RULE_pragmaValue);

      try {
        this.state = 207;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);

        switch (la_) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 205;
            this.version();
            break;

          case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 206;
            this.expression(0);
            break;
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "version",
    value: function version() {
      var localctx = new VersionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 8, SolidityParser.RULE_version);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 209;
        this.versionConstraint();
        this.state = 211;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0 || _la === SolidityParser.DecimalNumber || _la === SolidityParser.VersionLiteral) {
          this.state = 210;
          this.versionConstraint();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "versionOperator",
    value: function versionOperator() {
      var localctx = new VersionOperatorContext(this, this._ctx, this.state);
      this.enterRule(localctx, 10, SolidityParser.RULE_versionOperator);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 213;
        _la = this._input.LA(1);

        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "versionConstraint",
    value: function versionConstraint() {
      var localctx = new VersionConstraintContext(this, this._ctx, this.state);
      this.enterRule(localctx, 12, SolidityParser.RULE_versionConstraint);
      var _la = 0; // Token type

      try {
        this.state = 223;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);

        switch (la_) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 216;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0) {
              this.state = 215;
              this.versionOperator();
            }

            this.state = 218;
            this.match(SolidityParser.VersionLiteral);
            break;

          case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 220;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0) {
              this.state = 219;
              this.versionOperator();
            }

            this.state = 222;
            this.match(SolidityParser.DecimalNumber);
            break;
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "importDeclaration",
    value: function importDeclaration() {
      var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
      this.enterRule(localctx, 14, SolidityParser.RULE_importDeclaration);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 225;
        this.identifier();
        this.state = 228;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__9) {
          this.state = 226;
          this.match(SolidityParser.T__9);
          this.state = 227;
          this.identifier();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "importDirective",
    value: function importDirective() {
      var localctx = new ImportDirectiveContext(this, this._ctx, this.state);
      this.enterRule(localctx, 16, SolidityParser.RULE_importDirective);
      var _la = 0; // Token type

      try {
        this.state = 264;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 12, this._ctx);

        switch (la_) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 230;
            this.match(SolidityParser.T__10);
            this.state = 231;
            this.match(SolidityParser.StringLiteralFragment);
            this.state = 234;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === SolidityParser.T__9) {
              this.state = 232;
              this.match(SolidityParser.T__9);
              this.state = 233;
              this.identifier();
            }

            this.state = 236;
            this.match(SolidityParser.T__1);
            break;

          case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 237;
            this.match(SolidityParser.T__10);
            this.state = 240;

            this._errHandler.sync(this);

            switch (this._input.LA(1)) {
              case SolidityParser.T__11:
                this.state = 238;
                this.match(SolidityParser.T__11);
                break;

              case SolidityParser.T__12:
              case SolidityParser.T__39:
              case SolidityParser.T__92:
              case SolidityParser.LeaveKeyword:
              case SolidityParser.PayableKeyword:
              case SolidityParser.ReceiveKeyword:
              case SolidityParser.Identifier:
                this.state = 239;
                this.identifier();
                break;

              default:
                throw new _antlr["default"].error.NoViableAltException(this);
            }

            this.state = 244;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === SolidityParser.T__9) {
              this.state = 242;
              this.match(SolidityParser.T__9);
              this.state = 243;
              this.identifier();
            }

            this.state = 246;
            this.match(SolidityParser.T__12);
            this.state = 247;
            this.match(SolidityParser.StringLiteralFragment);
            this.state = 248;
            this.match(SolidityParser.T__1);
            break;

          case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 249;
            this.match(SolidityParser.T__10);
            this.state = 250;
            this.match(SolidityParser.T__13);
            this.state = 251;
            this.importDeclaration();
            this.state = 256;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while (_la === SolidityParser.T__14) {
              this.state = 252;
              this.match(SolidityParser.T__14);
              this.state = 253;
              this.importDeclaration();
              this.state = 258;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }

            this.state = 259;
            this.match(SolidityParser.T__15);
            this.state = 260;
            this.match(SolidityParser.T__12);
            this.state = 261;
            this.match(SolidityParser.StringLiteralFragment);
            this.state = 262;
            this.match(SolidityParser.T__1);
            break;
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "contractDefinition",
    value: function contractDefinition() {
      var localctx = new ContractDefinitionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 18, SolidityParser.RULE_contractDefinition);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 267;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__16) {
          this.state = 266;
          this.match(SolidityParser.T__16);
        }

        this.state = 269;
        _la = this._input.LA(1);

        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__17 | 1 << SolidityParser.T__18 | 1 << SolidityParser.T__19)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }

        this.state = 270;
        this.identifier();
        this.state = 280;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__20) {
          this.state = 271;
          this.match(SolidityParser.T__20);
          this.state = 272;
          this.inheritanceSpecifier();
          this.state = 277;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__14) {
            this.state = 273;
            this.match(SolidityParser.T__14);
            this.state = 274;
            this.inheritanceSpecifier();
            this.state = 279;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        }

        this.state = 282;
        this.match(SolidityParser.T__13);
        this.state = 286;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__12 | 1 << SolidityParser.T__23 | 1 << SolidityParser.T__25 | 1 << SolidityParser.T__26 | 1 << SolidityParser.T__27 | 1 << SolidityParser.T__29 | 1 << SolidityParser.T__30)) !== 0 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ConstructorKeyword - 93 | 1 << SolidityParser.FallbackKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 283;
          this.contractPart();
          this.state = 288;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }

        this.state = 289;
        this.match(SolidityParser.T__15);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "inheritanceSpecifier",
    value: function inheritanceSpecifier() {
      var localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);
      this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 291;
        this.userDefinedTypeName();
        this.state = 297;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__21) {
          this.state = 292;
          this.match(SolidityParser.T__21);
          this.state = 294;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
            this.state = 293;
            this.expressionList();
          }

          this.state = 296;
          this.match(SolidityParser.T__22);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "contractPart",
    value: function contractPart() {
      var localctx = new ContractPartContext(this, this._ctx, this.state);
      this.enterRule(localctx, 22, SolidityParser.RULE_contractPart);

      try {
        this.state = 306;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);

        switch (la_) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 299;
            this.stateVariableDeclaration();
            break;

          case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 300;
            this.usingForDeclaration();
            break;

          case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 301;
            this.structDefinition();
            break;

          case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 302;
            this.modifierDefinition();
            break;

          case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 303;
            this.functionDefinition();
            break;

          case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 304;
            this.eventDefinition();
            break;

          case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 305;
            this.enumDefinition();
            break;
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "stateVariableDeclaration",
    value: function stateVariableDeclaration() {
      var localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);
      this.enterRule(localctx, 24, SolidityParser.RULE_stateVariableDeclaration);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 308;
        this.typeName(0);
        this.state = 317;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while ((_la - 94 & ~0x1f) == 0 && (1 << _la - 94 & (1 << SolidityParser.T__93 - 94 | 1 << SolidityParser.ConstantKeyword - 94 | 1 << SolidityParser.ImmutableKeyword - 94 | 1 << SolidityParser.InternalKeyword - 94 | 1 << SolidityParser.PrivateKeyword - 94 | 1 << SolidityParser.PublicKeyword - 94)) !== 0) {
          this.state = 315;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.PublicKeyword:
              this.state = 309;
              this.match(SolidityParser.PublicKeyword);
              break;

            case SolidityParser.InternalKeyword:
              this.state = 310;
              this.match(SolidityParser.InternalKeyword);
              break;

            case SolidityParser.PrivateKeyword:
              this.state = 311;
              this.match(SolidityParser.PrivateKeyword);
              break;

            case SolidityParser.ConstantKeyword:
              this.state = 312;
              this.match(SolidityParser.ConstantKeyword);
              break;

            case SolidityParser.ImmutableKeyword:
              this.state = 313;
              this.match(SolidityParser.ImmutableKeyword);
              break;

            case SolidityParser.T__93:
              this.state = 314;
              this.overrideSpecifier();
              break;

            default:
              throw new _antlr["default"].error.NoViableAltException(this);
          }

          this.state = 319;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }

        this.state = 320;
        this.identifier();
        this.state = 323;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__8) {
          this.state = 321;
          this.match(SolidityParser.T__8);
          this.state = 322;
          this.expression(0);
        }

        this.state = 325;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "fileLevelConstant",
    value: function fileLevelConstant() {
      var localctx = new FileLevelConstantContext(this, this._ctx, this.state);
      this.enterRule(localctx, 26, SolidityParser.RULE_fileLevelConstant);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this.typeName(0);
        this.state = 328;
        this.match(SolidityParser.ConstantKeyword);
        this.state = 329;
        this.identifier();
        this.state = 330;
        this.match(SolidityParser.T__8);
        this.state = 331;
        this.expression(0);
        this.state = 332;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "usingForDeclaration",
    value: function usingForDeclaration() {
      var localctx = new UsingForDeclarationContext(this, this._ctx, this.state);
      this.enterRule(localctx, 28, SolidityParser.RULE_usingForDeclaration);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 334;
        this.match(SolidityParser.T__23);
        this.state = 335;
        this.identifier();
        this.state = 336;
        this.match(SolidityParser.T__24);
        this.state = 339;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__11:
            this.state = 337;
            this.match(SolidityParser.T__11);
            break;

          case SolidityParser.T__12:
          case SolidityParser.T__27:
          case SolidityParser.T__33:
          case SolidityParser.T__35:
          case SolidityParser.T__39:
          case SolidityParser.T__50:
          case SolidityParser.T__51:
          case SolidityParser.T__52:
          case SolidityParser.T__53:
          case SolidityParser.T__92:
          case SolidityParser.Int:
          case SolidityParser.Uint:
          case SolidityParser.Byte:
          case SolidityParser.Fixed:
          case SolidityParser.Ufixed:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
            this.state = 338;
            this.typeName(0);
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }

        this.state = 341;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "structDefinition",
    value: function structDefinition() {
      var localctx = new StructDefinitionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 30, SolidityParser.RULE_structDefinition);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(SolidityParser.T__25);
        this.state = 344;
        this.identifier();
        this.state = 345;
        this.match(SolidityParser.T__13);
        this.state = 356;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 346;
          this.variableDeclaration();
          this.state = 347;
          this.match(SolidityParser.T__1);
          this.state = 353;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 348;
            this.variableDeclaration();
            this.state = 349;
            this.match(SolidityParser.T__1);
            this.state = 355;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        }

        this.state = 358;
        this.match(SolidityParser.T__15);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "modifierDefinition",
    value: function modifierDefinition() {
      var localctx = new ModifierDefinitionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 32, SolidityParser.RULE_modifierDefinition);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        this.match(SolidityParser.T__26);
        this.state = 361;
        this.identifier();
        this.state = 363;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__21) {
          this.state = 362;
          this.parameterList();
        }

        this.state = 369;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === SolidityParser.T__93 || _la === SolidityParser.VirtualKeyword) {
          this.state = 367;

          this._errHandler.sync(this);

          switch (this._input.LA(1)) {
            case SolidityParser.VirtualKeyword:
              this.state = 365;
              this.match(SolidityParser.VirtualKeyword);
              break;

            case SolidityParser.T__93:
              this.state = 366;
              this.overrideSpecifier();
              break;

            default:
              throw new _antlr["default"].error.NoViableAltException(this);
          }

          this.state = 371;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }

        this.state = 372;
        this.block();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "modifierInvocation",
    value: function modifierInvocation() {
      var localctx = new ModifierInvocationContext(this, this._ctx, this.state);
      this.enterRule(localctx, 34, SolidityParser.RULE_modifierInvocation);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 374;
        this.identifier();
        this.state = 380;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__21) {
          this.state = 375;
          this.match(SolidityParser.T__21);
          this.state = 377;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
            this.state = 376;
            this.expressionList();
          }

          this.state = 379;
          this.match(SolidityParser.T__22);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "functionDefinition",
    value: function functionDefinition() {
      var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 36, SolidityParser.RULE_functionDefinition);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 382;
        this.functionDescriptor();
        this.state = 383;
        this.parameterList();
        this.state = 384;
        this.modifierList();
        this.state = 386;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__28) {
          this.state = 385;
          this.returnParameters();
        }

        this.state = 390;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__1:
            this.state = 388;
            this.match(SolidityParser.T__1);
            break;

          case SolidityParser.T__13:
            this.state = 389;
            this.block();
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "functionDescriptor",
    value: function functionDescriptor() {
      var localctx = new FunctionDescriptorContext(this, this._ctx, this.state);
      this.enterRule(localctx, 38, SolidityParser.RULE_functionDescriptor);
      var _la = 0; // Token type

      try {
        this.state = 399;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__27:
            this.enterOuterAlt(localctx, 1);
            this.state = 392;
            this.match(SolidityParser.T__27);
            this.state = 394;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
              this.state = 393;
              this.identifier();
            }

            break;

          case SolidityParser.ConstructorKeyword:
            this.enterOuterAlt(localctx, 2);
            this.state = 396;
            this.match(SolidityParser.ConstructorKeyword);
            break;

          case SolidityParser.FallbackKeyword:
            this.enterOuterAlt(localctx, 3);
            this.state = 397;
            this.match(SolidityParser.FallbackKeyword);
            break;

          case SolidityParser.ReceiveKeyword:
            this.enterOuterAlt(localctx, 4);
            this.state = 398;
            this.match(SolidityParser.ReceiveKeyword);
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "returnParameters",
    value: function returnParameters() {
      var localctx = new ReturnParametersContext(this, this._ctx, this.state);
      this.enterRule(localctx, 40, SolidityParser.RULE_returnParameters);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 401;
        this.match(SolidityParser.T__28);
        this.state = 402;
        this.parameterList();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "modifierList",
    value: function modifierList() {
      var localctx = new ModifierListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 42, SolidityParser.RULE_modifierList);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.T__93 - 93 | 1 << SolidityParser.ConstantKeyword - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.ExternalKeyword - 93 | 1 << SolidityParser.InternalKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.PrivateKeyword - 93 | 1 << SolidityParser.PublicKeyword - 93 | 1 << SolidityParser.VirtualKeyword - 93 | 1 << SolidityParser.PureKeyword - 93 | 1 << SolidityParser.ViewKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 412;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);

          switch (la_) {
            case 1:
              this.state = 404;
              this.match(SolidityParser.ExternalKeyword);
              break;

            case 2:
              this.state = 405;
              this.match(SolidityParser.PublicKeyword);
              break;

            case 3:
              this.state = 406;
              this.match(SolidityParser.InternalKeyword);
              break;

            case 4:
              this.state = 407;
              this.match(SolidityParser.PrivateKeyword);
              break;

            case 5:
              this.state = 408;
              this.match(SolidityParser.VirtualKeyword);
              break;

            case 6:
              this.state = 409;
              this.stateMutability();
              break;

            case 7:
              this.state = 410;
              this.modifierInvocation();
              break;

            case 8:
              this.state = 411;
              this.overrideSpecifier();
              break;
          }

          this.state = 416;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "eventDefinition",
    value: function eventDefinition() {
      var localctx = new EventDefinitionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 44, SolidityParser.RULE_eventDefinition);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        this.match(SolidityParser.T__29);
        this.state = 418;
        this.identifier();
        this.state = 419;
        this.eventParameterList();
        this.state = 421;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.AnonymousKeyword) {
          this.state = 420;
          this.match(SolidityParser.AnonymousKeyword);
        }

        this.state = 423;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "enumValue",
    value: function enumValue() {
      var localctx = new EnumValueContext(this, this._ctx, this.state);
      this.enterRule(localctx, 46, SolidityParser.RULE_enumValue);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 425;
        this.identifier();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "enumDefinition",
    value: function enumDefinition() {
      var localctx = new EnumDefinitionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 48, SolidityParser.RULE_enumDefinition);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        this.match(SolidityParser.T__30);
        this.state = 428;
        this.identifier();
        this.state = 429;
        this.match(SolidityParser.T__13);
        this.state = 431;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 430;
          this.enumValue();
        }

        this.state = 437;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === SolidityParser.T__14) {
          this.state = 433;
          this.match(SolidityParser.T__14);
          this.state = 434;
          this.enumValue();
          this.state = 439;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }

        this.state = 440;
        this.match(SolidityParser.T__15);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "parameterList",
    value: function parameterList() {
      var localctx = new ParameterListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 50, SolidityParser.RULE_parameterList);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 442;
        this.match(SolidityParser.T__21);
        this.state = 451;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 443;
          this.parameter();
          this.state = 448;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__14) {
            this.state = 444;
            this.match(SolidityParser.T__14);
            this.state = 445;
            this.parameter();
            this.state = 450;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        }

        this.state = 453;
        this.match(SolidityParser.T__22);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "parameter",
    value: function parameter() {
      var localctx = new ParameterContext(this, this._ctx, this.state);
      this.enterRule(localctx, 52, SolidityParser.RULE_parameter);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455;
        this.typeName(0);
        this.state = 457;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 42, this._ctx);

        if (la_ === 1) {
          this.state = 456;
          this.storageLocation();
        }

        this.state = 460;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 459;
          this.identifier();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "eventParameterList",
    value: function eventParameterList() {
      var localctx = new EventParameterListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 54, SolidityParser.RULE_eventParameterList);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 462;
        this.match(SolidityParser.T__21);
        this.state = 471;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 463;
          this.eventParameter();
          this.state = 468;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__14) {
            this.state = 464;
            this.match(SolidityParser.T__14);
            this.state = 465;
            this.eventParameter();
            this.state = 470;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        }

        this.state = 473;
        this.match(SolidityParser.T__22);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "eventParameter",
    value: function eventParameter() {
      var localctx = new EventParameterContext(this, this._ctx, this.state);
      this.enterRule(localctx, 56, SolidityParser.RULE_eventParameter);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 475;
        this.typeName(0);
        this.state = 477;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.IndexedKeyword) {
          this.state = 476;
          this.match(SolidityParser.IndexedKeyword);
        }

        this.state = 480;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 479;
          this.identifier();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "functionTypeParameterList",
    value: function functionTypeParameterList() {
      var localctx = new FunctionTypeParameterListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 58, SolidityParser.RULE_functionTypeParameterList);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 482;
        this.match(SolidityParser.T__21);
        this.state = 491;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 483;
          this.functionTypeParameter();
          this.state = 488;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__14) {
            this.state = 484;
            this.match(SolidityParser.T__14);
            this.state = 485;
            this.functionTypeParameter();
            this.state = 490;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }
        }

        this.state = 493;
        this.match(SolidityParser.T__22);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "functionTypeParameter",
    value: function functionTypeParameter() {
      var localctx = new FunctionTypeParameterContext(this, this._ctx, this.state);
      this.enterRule(localctx, 60, SolidityParser.RULE_functionTypeParameter);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this.typeName(0);
        this.state = 497;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if ((_la - 38 & ~0x1f) == 0 && (1 << _la - 38 & (1 << SolidityParser.T__37 - 38 | 1 << SolidityParser.T__38 - 38 | 1 << SolidityParser.T__39 - 38)) !== 0) {
          this.state = 496;
          this.storageLocation();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "variableDeclaration",
    value: function variableDeclaration() {
      var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
      this.enterRule(localctx, 62, SolidityParser.RULE_variableDeclaration);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 499;
        this.typeName(0);
        this.state = 501;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);

        if (la_ === 1) {
          this.state = 500;
          this.storageLocation();
        }

        this.state = 503;
        this.identifier();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "typeName",
    value: function typeName(_p) {
      if (_p === undefined) {
        _p = 0;
      }

      var _parentctx = this._ctx;
      var _parentState = this.state;
      var localctx = new TypeNameContext(this, this._ctx, _parentState);
      var _prevctx = localctx;
      var _startState = 64;
      this.enterRecursionRule(localctx, 64, SolidityParser.RULE_typeName, _p);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 52, this._ctx);

        switch (la_) {
          case 1:
            this.state = 506;
            this.elementaryTypeName();
            break;

          case 2:
            this.state = 507;
            this.userDefinedTypeName();
            break;

          case 3:
            this.state = 508;
            this.mapping();
            break;

          case 4:
            this.state = 509;
            this.functionTypeName();
            break;

          case 5:
            this.state = 510;
            this.match(SolidityParser.T__33);
            this.state = 511;
            this.match(SolidityParser.PayableKeyword);
            break;
        }

        this._ctx.stop = this._input.LT(-1);
        this.state = 522;

        this._errHandler.sync(this);

        var _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);

        while (_alt != 2 && _alt != _antlr["default"].atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners !== null) {
              this.triggerExitRuleEvent();
            }

            _prevctx = localctx;
            localctx = new TypeNameContext(this, _parentctx, _parentState);
            this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);
            this.state = 514;

            if (!this.precpred(this._ctx, 3)) {
              throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
            }

            this.state = 515;
            this.match(SolidityParser.T__31);
            this.state = 517;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
              this.state = 516;
              this.expression(0);
            }

            this.state = 519;
            this.match(SolidityParser.T__32);
          }

          this.state = 524;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);
        }
      } catch (error) {
        if (error instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = error;

          this._errHandler.reportError(this, error);

          this._errHandler.recover(this, error);
        } else {
          throw error;
        }
      } finally {
        this.unrollRecursionContexts(_parentctx);
      }

      return localctx;
    }
  }, {
    key: "userDefinedTypeName",
    value: function userDefinedTypeName() {
      var localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);
      this.enterRule(localctx, 66, SolidityParser.RULE_userDefinedTypeName);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 525;
        this.identifier();
        this.state = 530;

        this._errHandler.sync(this);

        var _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);

        while (_alt != 2 && _alt != _antlr["default"].atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 526;
            this.match(SolidityParser.T__34);
            this.state = 527;
            this.identifier();
          }

          this.state = 532;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "mappingKey",
    value: function mappingKey() {
      var localctx = new MappingKeyContext(this, this._ctx, this.state);
      this.enterRule(localctx, 68, SolidityParser.RULE_mappingKey);

      try {
        this.state = 535;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__33:
          case SolidityParser.T__50:
          case SolidityParser.T__51:
          case SolidityParser.T__52:
          case SolidityParser.T__53:
          case SolidityParser.Int:
          case SolidityParser.Uint:
          case SolidityParser.Byte:
          case SolidityParser.Fixed:
          case SolidityParser.Ufixed:
            this.enterOuterAlt(localctx, 1);
            this.state = 533;
            this.elementaryTypeName();
            break;

          case SolidityParser.T__12:
          case SolidityParser.T__39:
          case SolidityParser.T__92:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 534;
            this.userDefinedTypeName();
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "mapping",
    value: function mapping() {
      var localctx = new MappingContext(this, this._ctx, this.state);
      this.enterRule(localctx, 70, SolidityParser.RULE_mapping);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this.match(SolidityParser.T__35);
        this.state = 538;
        this.match(SolidityParser.T__21);
        this.state = 539;
        this.mappingKey();
        this.state = 540;
        this.match(SolidityParser.T__36);
        this.state = 541;
        this.typeName(0);
        this.state = 542;
        this.match(SolidityParser.T__22);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "functionTypeName",
    value: function functionTypeName() {
      var localctx = new FunctionTypeNameContext(this, this._ctx, this.state);
      this.enterRule(localctx, 72, SolidityParser.RULE_functionTypeName);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 544;
        this.match(SolidityParser.T__27);
        this.state = 545;
        this.functionTypeParameterList();
        this.state = 551;

        this._errHandler.sync(this);

        var _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);

        while (_alt != 2 && _alt != _antlr["default"].atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 549;

            this._errHandler.sync(this);

            switch (this._input.LA(1)) {
              case SolidityParser.InternalKeyword:
                this.state = 546;
                this.match(SolidityParser.InternalKeyword);
                break;

              case SolidityParser.ExternalKeyword:
                this.state = 547;
                this.match(SolidityParser.ExternalKeyword);
                break;

              case SolidityParser.ConstantKeyword:
              case SolidityParser.PayableKeyword:
              case SolidityParser.PureKeyword:
              case SolidityParser.ViewKeyword:
                this.state = 548;
                this.stateMutability();
                break;

              default:
                throw new _antlr["default"].error.NoViableAltException(this);
            }
          }

          this.state = 553;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
        }

        this.state = 556;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);

        if (la_ === 1) {
          this.state = 554;
          this.match(SolidityParser.T__28);
          this.state = 555;
          this.functionTypeParameterList();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "storageLocation",
    value: function storageLocation() {
      var localctx = new StorageLocationContext(this, this._ctx, this.state);
      this.enterRule(localctx, 74, SolidityParser.RULE_storageLocation);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 558;
        _la = this._input.LA(1);

        if (!((_la - 38 & ~0x1f) == 0 && (1 << _la - 38 & (1 << SolidityParser.T__37 - 38 | 1 << SolidityParser.T__38 - 38 | 1 << SolidityParser.T__39 - 38)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "stateMutability",
    value: function stateMutability() {
      var localctx = new StateMutabilityContext(this, this._ctx, this.state);
      this.enterRule(localctx, 76, SolidityParser.RULE_stateMutability);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        _la = this._input.LA(1);

        if (!((_la - 108 & ~0x1f) == 0 && (1 << _la - 108 & (1 << SolidityParser.ConstantKeyword - 108 | 1 << SolidityParser.PayableKeyword - 108 | 1 << SolidityParser.PureKeyword - 108 | 1 << SolidityParser.ViewKeyword - 108)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "block",
    value: function block() {
      var localctx = new BlockContext(this, this._ctx, this.state);
      this.enterRule(localctx, 78, SolidityParser.RULE_block);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this.match(SolidityParser.T__13);
        this.state = 566;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__21 | 1 << SolidityParser.T__24 | 1 << SolidityParser.T__27)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__35 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__40 - 32 | 1 << SolidityParser.T__42 - 32 | 1 << SolidityParser.T__44 - 32 | 1 << SolidityParser.T__45 - 32 | 1 << SolidityParser.T__46 - 32 | 1 << SolidityParser.T__47 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.BreakKeyword - 93 | 1 << SolidityParser.ContinueKeyword - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
          this.state = 563;
          this.statement();
          this.state = 568;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }

        this.state = 569;
        this.match(SolidityParser.T__15);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "statement",
    value: function statement() {
      var localctx = new StatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 80, SolidityParser.RULE_statement);

      try {
        this.state = 584;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__40:
            this.enterOuterAlt(localctx, 1);
            this.state = 571;
            this.ifStatement();
            break;

          case SolidityParser.T__42:
            this.enterOuterAlt(localctx, 2);
            this.state = 572;
            this.tryStatement();
            break;

          case SolidityParser.T__44:
            this.enterOuterAlt(localctx, 3);
            this.state = 573;
            this.whileStatement();
            break;

          case SolidityParser.T__24:
            this.enterOuterAlt(localctx, 4);
            this.state = 574;
            this.forStatement();
            break;

          case SolidityParser.T__13:
            this.enterOuterAlt(localctx, 5);
            this.state = 575;
            this.block();
            break;

          case SolidityParser.T__45:
            this.enterOuterAlt(localctx, 6);
            this.state = 576;
            this.inlineAssemblyStatement();
            break;

          case SolidityParser.T__46:
            this.enterOuterAlt(localctx, 7);
            this.state = 577;
            this.doWhileStatement();
            break;

          case SolidityParser.ContinueKeyword:
            this.enterOuterAlt(localctx, 8);
            this.state = 578;
            this.continueStatement();
            break;

          case SolidityParser.BreakKeyword:
            this.enterOuterAlt(localctx, 9);
            this.state = 579;
            this.breakStatement();
            break;

          case SolidityParser.T__47:
            this.enterOuterAlt(localctx, 10);
            this.state = 580;
            this.returnStatement();
            break;

          case SolidityParser.T__48:
            this.enterOuterAlt(localctx, 11);
            this.state = 581;
            this.throwStatement();
            break;

          case SolidityParser.T__49:
            this.enterOuterAlt(localctx, 12);
            this.state = 582;
            this.emitStatement();
            break;

          case SolidityParser.T__3:
          case SolidityParser.T__12:
          case SolidityParser.T__21:
          case SolidityParser.T__27:
          case SolidityParser.T__31:
          case SolidityParser.T__33:
          case SolidityParser.T__35:
          case SolidityParser.T__39:
          case SolidityParser.T__50:
          case SolidityParser.T__51:
          case SolidityParser.T__52:
          case SolidityParser.T__53:
          case SolidityParser.T__54:
          case SolidityParser.T__55:
          case SolidityParser.T__56:
          case SolidityParser.T__58:
          case SolidityParser.T__59:
          case SolidityParser.T__60:
          case SolidityParser.T__61:
          case SolidityParser.T__62:
          case SolidityParser.T__92:
          case SolidityParser.Int:
          case SolidityParser.Uint:
          case SolidityParser.Byte:
          case SolidityParser.Fixed:
          case SolidityParser.Ufixed:
          case SolidityParser.BooleanLiteral:
          case SolidityParser.DecimalNumber:
          case SolidityParser.HexNumber:
          case SolidityParser.HexLiteralFragment:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.TypeKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
          case SolidityParser.StringLiteralFragment:
            this.enterOuterAlt(localctx, 13);
            this.state = 583;
            this.simpleStatement();
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "expressionStatement",
    value: function expressionStatement() {
      var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 82, SolidityParser.RULE_expressionStatement);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        this.expression(0);
        this.state = 587;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "ifStatement",
    value: function ifStatement() {
      var localctx = new IfStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 84, SolidityParser.RULE_ifStatement);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this.match(SolidityParser.T__40);
        this.state = 590;
        this.match(SolidityParser.T__21);
        this.state = 591;
        this.expression(0);
        this.state = 592;
        this.match(SolidityParser.T__22);
        this.state = 593;
        this.statement();
        this.state = 596;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);

        if (la_ === 1) {
          this.state = 594;
          this.match(SolidityParser.T__41);
          this.state = 595;
          this.statement();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "tryStatement",
    value: function tryStatement() {
      var localctx = new TryStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 86, SolidityParser.RULE_tryStatement);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.match(SolidityParser.T__42);
        this.state = 599;
        this.expression(0);
        this.state = 601;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__28) {
          this.state = 600;
          this.returnParameters();
        }

        this.state = 603;
        this.block();
        this.state = 605;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        do {
          this.state = 604;
          this.catchClause();
          this.state = 607;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        } while (_la === SolidityParser.T__43);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "catchClause",
    value: function catchClause() {
      var localctx = new CatchClauseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 88, SolidityParser.RULE_catchClause);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this.match(SolidityParser.T__43);
        this.state = 614;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if ((_la - 13 & ~0x1f) == 0 && (1 << _la - 13 & (1 << SolidityParser.T__12 - 13 | 1 << SolidityParser.T__21 - 13 | 1 << SolidityParser.T__39 - 13)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 611;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 610;
            this.identifier();
          }

          this.state = 613;
          this.parameterList();
        }

        this.state = 616;
        this.block();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "whileStatement",
    value: function whileStatement() {
      var localctx = new WhileStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 90, SolidityParser.RULE_whileStatement);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.match(SolidityParser.T__44);
        this.state = 619;
        this.match(SolidityParser.T__21);
        this.state = 620;
        this.expression(0);
        this.state = 621;
        this.match(SolidityParser.T__22);
        this.state = 622;
        this.statement();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "simpleStatement",
    value: function simpleStatement() {
      var localctx = new SimpleStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 92, SolidityParser.RULE_simpleStatement);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 626;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 67, this._ctx);

        switch (la_) {
          case 1:
            this.state = 624;
            this.variableDeclarationStatement();
            break;

          case 2:
            this.state = 625;
            this.expressionStatement();
            break;
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "forStatement",
    value: function forStatement() {
      var localctx = new ForStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 94, SolidityParser.RULE_forStatement);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this.match(SolidityParser.T__24);
        this.state = 629;
        this.match(SolidityParser.T__21);
        this.state = 632;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__3:
          case SolidityParser.T__12:
          case SolidityParser.T__21:
          case SolidityParser.T__27:
          case SolidityParser.T__31:
          case SolidityParser.T__33:
          case SolidityParser.T__35:
          case SolidityParser.T__39:
          case SolidityParser.T__50:
          case SolidityParser.T__51:
          case SolidityParser.T__52:
          case SolidityParser.T__53:
          case SolidityParser.T__54:
          case SolidityParser.T__55:
          case SolidityParser.T__56:
          case SolidityParser.T__58:
          case SolidityParser.T__59:
          case SolidityParser.T__60:
          case SolidityParser.T__61:
          case SolidityParser.T__62:
          case SolidityParser.T__92:
          case SolidityParser.Int:
          case SolidityParser.Uint:
          case SolidityParser.Byte:
          case SolidityParser.Fixed:
          case SolidityParser.Ufixed:
          case SolidityParser.BooleanLiteral:
          case SolidityParser.DecimalNumber:
          case SolidityParser.HexNumber:
          case SolidityParser.HexLiteralFragment:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.TypeKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
          case SolidityParser.StringLiteralFragment:
            this.state = 630;
            this.simpleStatement();
            break;

          case SolidityParser.T__1:
            this.state = 631;
            this.match(SolidityParser.T__1);
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }

        this.state = 636;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__3:
          case SolidityParser.T__12:
          case SolidityParser.T__21:
          case SolidityParser.T__31:
          case SolidityParser.T__33:
          case SolidityParser.T__39:
          case SolidityParser.T__50:
          case SolidityParser.T__51:
          case SolidityParser.T__52:
          case SolidityParser.T__53:
          case SolidityParser.T__54:
          case SolidityParser.T__55:
          case SolidityParser.T__56:
          case SolidityParser.T__58:
          case SolidityParser.T__59:
          case SolidityParser.T__60:
          case SolidityParser.T__61:
          case SolidityParser.T__62:
          case SolidityParser.T__92:
          case SolidityParser.Int:
          case SolidityParser.Uint:
          case SolidityParser.Byte:
          case SolidityParser.Fixed:
          case SolidityParser.Ufixed:
          case SolidityParser.BooleanLiteral:
          case SolidityParser.DecimalNumber:
          case SolidityParser.HexNumber:
          case SolidityParser.HexLiteralFragment:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.TypeKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
          case SolidityParser.StringLiteralFragment:
            this.state = 634;
            this.expressionStatement();
            break;

          case SolidityParser.T__1:
            this.state = 635;
            this.match(SolidityParser.T__1);
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }

        this.state = 639;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
          this.state = 638;
          this.expression(0);
        }

        this.state = 641;
        this.match(SolidityParser.T__22);
        this.state = 642;
        this.statement();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "inlineAssemblyStatement",
    value: function inlineAssemblyStatement() {
      var localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 96, SolidityParser.RULE_inlineAssemblyStatement);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.match(SolidityParser.T__45);
        this.state = 646;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.StringLiteralFragment) {
          this.state = 645;
          this.match(SolidityParser.StringLiteralFragment);
        }

        this.state = 648;
        this.assemblyBlock();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "doWhileStatement",
    value: function doWhileStatement() {
      var localctx = new DoWhileStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 98, SolidityParser.RULE_doWhileStatement);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 650;
        this.match(SolidityParser.T__46);
        this.state = 651;
        this.statement();
        this.state = 652;
        this.match(SolidityParser.T__44);
        this.state = 653;
        this.match(SolidityParser.T__21);
        this.state = 654;
        this.expression(0);
        this.state = 655;
        this.match(SolidityParser.T__22);
        this.state = 656;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "continueStatement",
    value: function continueStatement() {
      var localctx = new ContinueStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 100, SolidityParser.RULE_continueStatement);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this.match(SolidityParser.ContinueKeyword);
        this.state = 659;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "breakStatement",
    value: function breakStatement() {
      var localctx = new BreakStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 102, SolidityParser.RULE_breakStatement);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this.match(SolidityParser.BreakKeyword);
        this.state = 662;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "returnStatement",
    value: function returnStatement() {
      var localctx = new ReturnStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 104, SolidityParser.RULE_returnStatement);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664;
        this.match(SolidityParser.T__47);
        this.state = 666;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
          this.state = 665;
          this.expression(0);
        }

        this.state = 668;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "throwStatement",
    value: function throwStatement() {
      var localctx = new ThrowStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 106, SolidityParser.RULE_throwStatement);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        this.match(SolidityParser.T__48);
        this.state = 671;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "emitStatement",
    value: function emitStatement() {
      var localctx = new EmitStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 108, SolidityParser.RULE_emitStatement);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673;
        this.match(SolidityParser.T__49);
        this.state = 674;
        this.functionCall();
        this.state = 675;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "variableDeclarationStatement",
    value: function variableDeclarationStatement() {
      var localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);
      this.enterRule(localctx, 110, SolidityParser.RULE_variableDeclarationStatement);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);

        switch (la_) {
          case 1:
            this.state = 677;
            this.match(SolidityParser.T__50);
            this.state = 678;
            this.identifierList();
            break;

          case 2:
            this.state = 679;
            this.variableDeclaration();
            break;

          case 3:
            this.state = 680;
            this.match(SolidityParser.T__21);
            this.state = 681;
            this.variableDeclarationList();
            this.state = 682;
            this.match(SolidityParser.T__22);
            break;
        }

        this.state = 688;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__8) {
          this.state = 686;
          this.match(SolidityParser.T__8);
          this.state = 687;
          this.expression(0);
        }

        this.state = 690;
        this.match(SolidityParser.T__1);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "variableDeclarationList",
    value: function variableDeclarationList() {
      var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 112, SolidityParser.RULE_variableDeclarationList);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 693;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 692;
          this.variableDeclaration();
        }

        this.state = 701;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === SolidityParser.T__14) {
          this.state = 695;
          this.match(SolidityParser.T__14);
          this.state = 697;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
            this.state = 696;
            this.variableDeclaration();
          }

          this.state = 703;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "identifierList",
    value: function identifierList() {
      var localctx = new IdentifierListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 114, SolidityParser.RULE_identifierList);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.match(SolidityParser.T__21);
        this.state = 711;

        this._errHandler.sync(this);

        var _alt = this._interp.adaptivePredict(this._input, 79, this._ctx);

        while (_alt != 2 && _alt != _antlr["default"].atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 706;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
              this.state = 705;
              this.identifier();
            }

            this.state = 708;
            this.match(SolidityParser.T__14);
          }

          this.state = 713;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 79, this._ctx);
        }

        this.state = 715;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 714;
          this.identifier();
        }

        this.state = 717;
        this.match(SolidityParser.T__22);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "elementaryTypeName",
    value: function elementaryTypeName() {
      var localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);
      this.enterRule(localctx, 116, SolidityParser.RULE_elementaryTypeName);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        _la = this._input.LA(1);

        if (!((_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34 | 1 << SolidityParser.T__52 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 95 & ~0x1f) == 0 && (1 << _la - 95 & (1 << SolidityParser.Int - 95 | 1 << SolidityParser.Uint - 95 | 1 << SolidityParser.Byte - 95 | 1 << SolidityParser.Fixed - 95 | 1 << SolidityParser.Ufixed - 95)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "expression",
    value: function expression(_p) {
      if (_p === undefined) {
        _p = 0;
      }

      var _parentctx = this._ctx;
      var _parentState = this.state;
      var localctx = new ExpressionContext(this, this._ctx, _parentState);
      var _prevctx = localctx;
      var _startState = 118;
      this.enterRecursionRule(localctx, 118, SolidityParser.RULE_expression, _p);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 739;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 81, this._ctx);

        switch (la_) {
          case 1:
            this.state = 722;
            this.match(SolidityParser.T__56);
            this.state = 723;
            this.typeName(0);
            break;

          case 2:
            this.state = 724;
            this.match(SolidityParser.T__21);
            this.state = 725;
            this.expression(0);
            this.state = 726;
            this.match(SolidityParser.T__22);
            break;

          case 3:
            this.state = 728;
            _la = this._input.LA(1);

            if (!(_la === SolidityParser.T__54 || _la === SolidityParser.T__55)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);

              this.consume();
            }

            this.state = 729;
            this.expression(19);
            break;

          case 4:
            this.state = 730;
            _la = this._input.LA(1);

            if (!(_la === SolidityParser.T__58 || _la === SolidityParser.T__59)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);

              this.consume();
            }

            this.state = 731;
            this.expression(18);
            break;

          case 5:
            this.state = 732;
            _la = this._input.LA(1);

            if (!(_la === SolidityParser.T__60 || _la === SolidityParser.T__61)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);

              this.consume();
            }

            this.state = 733;
            this.expression(17);
            break;

          case 6:
            this.state = 734;
            this.match(SolidityParser.T__62);
            this.state = 735;
            this.expression(16);
            break;

          case 7:
            this.state = 736;
            this.match(SolidityParser.T__3);
            this.state = 737;
            this.expression(15);
            break;

          case 8:
            this.state = 738;
            this.primaryExpression();
            break;
        }

        this._ctx.stop = this._input.LT(-1);
        this.state = 816;

        this._errHandler.sync(this);

        var _alt = this._interp.adaptivePredict(this._input, 86, this._ctx);

        while (_alt != 2 && _alt != _antlr["default"].atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners !== null) {
              this.triggerExitRuleEvent();
            }

            _prevctx = localctx;
            this.state = 814;

            this._errHandler.sync(this);

            var la_ = this._interp.adaptivePredict(this._input, 85, this._ctx);

            switch (la_) {
              case 1:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 741;

                if (!this.precpred(this._ctx, 14)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                }

                this.state = 742;
                this.match(SolidityParser.T__63);
                this.state = 743;
                this.expression(15);
                break;

              case 2:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 744;

                if (!this.precpred(this._ctx, 13)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                }

                this.state = 745;
                _la = this._input.LA(1);

                if (!(_la === SolidityParser.T__11 || _la === SolidityParser.T__64 || _la === SolidityParser.T__65)) {
                  this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);

                  this.consume();
                }

                this.state = 746;
                this.expression(14);
                break;

              case 3:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 747;

                if (!this.precpred(this._ctx, 12)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                }

                this.state = 748;
                _la = this._input.LA(1);

                if (!(_la === SolidityParser.T__58 || _la === SolidityParser.T__59)) {
                  this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);

                  this.consume();
                }

                this.state = 749;
                this.expression(13);
                break;

              case 4:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 750;

                if (!this.precpred(this._ctx, 11)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                }

                this.state = 751;
                _la = this._input.LA(1);

                if (!(_la === SolidityParser.T__66 || _la === SolidityParser.T__67)) {
                  this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);

                  this.consume();
                }

                this.state = 752;
                this.expression(12);
                break;

              case 5:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 753;

                if (!this.precpred(this._ctx, 10)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                }

                this.state = 754;
                this.match(SolidityParser.T__68);
                this.state = 755;
                this.expression(11);
                break;

              case 6:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 756;

                if (!this.precpred(this._ctx, 9)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                }

                this.state = 757;
                this.match(SolidityParser.T__2);
                this.state = 758;
                this.expression(10);
                break;

              case 7:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 759;

                if (!this.precpred(this._ctx, 8)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                }

                this.state = 760;
                this.match(SolidityParser.T__69);
                this.state = 761;
                this.expression(9);
                break;

              case 8:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 762;

                if (!this.precpred(this._ctx, 7)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                }

                this.state = 763;
                _la = this._input.LA(1);

                if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7)) !== 0)) {
                  this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);

                  this.consume();
                }

                this.state = 764;
                this.expression(8);
                break;

              case 9:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 765;

                if (!this.precpred(this._ctx, 6)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                }

                this.state = 766;
                _la = this._input.LA(1);

                if (!(_la === SolidityParser.T__70 || _la === SolidityParser.T__71)) {
                  this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);

                  this.consume();
                }

                this.state = 767;
                this.expression(7);
                break;

              case 10:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 768;

                if (!this.precpred(this._ctx, 5)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                }

                this.state = 769;
                this.match(SolidityParser.T__72);
                this.state = 770;
                this.expression(6);
                break;

              case 11:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 771;

                if (!this.precpred(this._ctx, 4)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                }

                this.state = 772;
                this.match(SolidityParser.T__73);
                this.state = 773;
                this.expression(5);
                break;

              case 12:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 774;

                if (!this.precpred(this._ctx, 3)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                }

                this.state = 775;
                this.match(SolidityParser.T__74);
                this.state = 776;
                this.expression(0);
                this.state = 777;
                this.match(SolidityParser.T__57);
                this.state = 778;
                this.expression(4);
                break;

              case 13:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 780;

                if (!this.precpred(this._ctx, 2)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }

                this.state = 781;
                _la = this._input.LA(1);

                if (!(_la === SolidityParser.T__8 || (_la - 76 & ~0x1f) == 0 && (1 << _la - 76 & (1 << SolidityParser.T__75 - 76 | 1 << SolidityParser.T__76 - 76 | 1 << SolidityParser.T__77 - 76 | 1 << SolidityParser.T__78 - 76 | 1 << SolidityParser.T__79 - 76 | 1 << SolidityParser.T__80 - 76 | 1 << SolidityParser.T__81 - 76 | 1 << SolidityParser.T__82 - 76 | 1 << SolidityParser.T__83 - 76 | 1 << SolidityParser.T__84 - 76)) !== 0)) {
                  this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);

                  this.consume();
                }

                this.state = 782;
                this.expression(3);
                break;

              case 14:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 783;

                if (!this.precpred(this._ctx, 27)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                }

                this.state = 784;
                _la = this._input.LA(1);

                if (!(_la === SolidityParser.T__54 || _la === SolidityParser.T__55)) {
                  this._errHandler.recoverInline(this);
                } else {
                  this._errHandler.reportMatch(this);

                  this.consume();
                }

                break;

              case 15:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 785;

                if (!this.precpred(this._ctx, 25)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                }

                this.state = 786;
                this.match(SolidityParser.T__31);
                this.state = 788;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                  this.state = 787;
                  this.expression(0);
                }

                this.state = 790;
                this.match(SolidityParser.T__32);
                break;

              case 16:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 791;

                if (!this.precpred(this._ctx, 24)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                }

                this.state = 792;
                this.match(SolidityParser.T__31);
                this.state = 794;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                  this.state = 793;
                  this.expression(0);
                }

                this.state = 796;
                this.match(SolidityParser.T__57);
                this.state = 798;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                  this.state = 797;
                  this.expression(0);
                }

                this.state = 800;
                this.match(SolidityParser.T__32);
                break;

              case 17:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 801;

                if (!this.precpred(this._ctx, 23)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                }

                this.state = 802;
                this.match(SolidityParser.T__34);
                this.state = 803;
                this.identifier();
                break;

              case 18:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 804;

                if (!this.precpred(this._ctx, 22)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                }

                this.state = 805;
                this.match(SolidityParser.T__13);
                this.state = 806;
                this.nameValueList();
                this.state = 807;
                this.match(SolidityParser.T__15);
                break;

              case 19:
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                this.state = 809;

                if (!this.precpred(this._ctx, 21)) {
                  throw new _antlr["default"].error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                }

                this.state = 810;
                this.match(SolidityParser.T__21);
                this.state = 811;
                this.functionCallArguments();
                this.state = 812;
                this.match(SolidityParser.T__22);
                break;
            }
          }

          this.state = 818;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 86, this._ctx);
        }
      } catch (error) {
        if (error instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = error;

          this._errHandler.reportError(this, error);

          this._errHandler.recover(this, error);
        } else {
          throw error;
        }
      } finally {
        this.unrollRecursionContexts(_parentctx);
      }

      return localctx;
    }
  }, {
    key: "primaryExpression",
    value: function primaryExpression() {
      var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 120, SolidityParser.RULE_primaryExpression);

      try {
        this.state = 836;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);

        switch (la_) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 819;
            this.match(SolidityParser.BooleanLiteral);
            break;

          case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 820;
            this.numberLiteral();
            break;

          case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 821;
            this.hexLiteral();
            break;

          case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 822;
            this.stringLiteral();
            break;

          case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 823;
            this.identifier();
            this.state = 826;

            this._errHandler.sync(this);

            var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);

            if (la_ === 1) {
              this.state = 824;
              this.match(SolidityParser.T__31);
              this.state = 825;
              this.match(SolidityParser.T__32);
            }

            break;

          case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 828;
            this.match(SolidityParser.TypeKeyword);
            break;

          case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 829;
            this.match(SolidityParser.PayableKeyword);
            break;

          case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 830;
            this.tupleExpression();
            break;

          case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 831;
            this.typeNameExpression();
            this.state = 834;

            this._errHandler.sync(this);

            var la_ = this._interp.adaptivePredict(this._input, 88, this._ctx);

            if (la_ === 1) {
              this.state = 832;
              this.match(SolidityParser.T__31);
              this.state = 833;
              this.match(SolidityParser.T__32);
            }

            break;
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "expressionList",
    value: function expressionList() {
      var localctx = new ExpressionListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 122, SolidityParser.RULE_expressionList);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 838;
        this.expression(0);
        this.state = 843;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === SolidityParser.T__14) {
          this.state = 839;
          this.match(SolidityParser.T__14);
          this.state = 840;
          this.expression(0);
          this.state = 845;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "nameValueList",
    value: function nameValueList() {
      var localctx = new NameValueListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 124, SolidityParser.RULE_nameValueList);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 846;
        this.nameValue();
        this.state = 851;

        this._errHandler.sync(this);

        var _alt = this._interp.adaptivePredict(this._input, 91, this._ctx);

        while (_alt != 2 && _alt != _antlr["default"].atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 847;
            this.match(SolidityParser.T__14);
            this.state = 848;
            this.nameValue();
          }

          this.state = 853;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 91, this._ctx);
        }

        this.state = 855;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__14) {
          this.state = 854;
          this.match(SolidityParser.T__14);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "nameValue",
    value: function nameValue() {
      var localctx = new NameValueContext(this, this._ctx, this.state);
      this.enterRule(localctx, 126, SolidityParser.RULE_nameValue);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 857;
        this.identifier();
        this.state = 858;
        this.match(SolidityParser.T__57);
        this.state = 859;
        this.expression(0);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "functionCallArguments",
    value: function functionCallArguments() {
      var localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 128, SolidityParser.RULE_functionCallArguments);
      var _la = 0; // Token type

      try {
        this.state = 869;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__13:
            this.enterOuterAlt(localctx, 1);
            this.state = 861;
            this.match(SolidityParser.T__13);
            this.state = 863;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
              this.state = 862;
              this.nameValueList();
            }

            this.state = 865;
            this.match(SolidityParser.T__15);
            break;

          case SolidityParser.T__3:
          case SolidityParser.T__12:
          case SolidityParser.T__21:
          case SolidityParser.T__22:
          case SolidityParser.T__31:
          case SolidityParser.T__33:
          case SolidityParser.T__39:
          case SolidityParser.T__50:
          case SolidityParser.T__51:
          case SolidityParser.T__52:
          case SolidityParser.T__53:
          case SolidityParser.T__54:
          case SolidityParser.T__55:
          case SolidityParser.T__56:
          case SolidityParser.T__58:
          case SolidityParser.T__59:
          case SolidityParser.T__60:
          case SolidityParser.T__61:
          case SolidityParser.T__62:
          case SolidityParser.T__92:
          case SolidityParser.Int:
          case SolidityParser.Uint:
          case SolidityParser.Byte:
          case SolidityParser.Fixed:
          case SolidityParser.Ufixed:
          case SolidityParser.BooleanLiteral:
          case SolidityParser.DecimalNumber:
          case SolidityParser.HexNumber:
          case SolidityParser.HexLiteralFragment:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.TypeKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
          case SolidityParser.StringLiteralFragment:
            this.enterOuterAlt(localctx, 2);
            this.state = 867;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
              this.state = 866;
              this.expressionList();
            }

            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "functionCall",
    value: function functionCall() {
      var localctx = new FunctionCallContext(this, this._ctx, this.state);
      this.enterRule(localctx, 130, SolidityParser.RULE_functionCall);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 871;
        this.expression(0);
        this.state = 872;
        this.match(SolidityParser.T__21);
        this.state = 873;
        this.functionCallArguments();
        this.state = 874;
        this.match(SolidityParser.T__22);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyBlock",
    value: function assemblyBlock() {
      var localctx = new AssemblyBlockContext(this, this._ctx, this.state);
      this.enterRule(localctx, 132, SolidityParser.RULE_assemblyBlock);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.match(SolidityParser.T__13);
        this.state = 880;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__12 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__21 | 1 << SolidityParser.T__24 | 1 << SolidityParser.T__27)) !== 0 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__40 - 34 | 1 << SolidityParser.T__45 - 34 | 1 << SolidityParser.T__47 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 86 & ~0x1f) == 0 && (1 << _la - 86 & (1 << SolidityParser.T__85 - 86 | 1 << SolidityParser.T__87 - 86 | 1 << SolidityParser.T__88 - 86 | 1 << SolidityParser.T__92 - 86 | 1 << SolidityParser.DecimalNumber - 86 | 1 << SolidityParser.HexNumber - 86 | 1 << SolidityParser.HexLiteralFragment - 86 | 1 << SolidityParser.BreakKeyword - 86 | 1 << SolidityParser.ContinueKeyword - 86 | 1 << SolidityParser.LeaveKeyword - 86 | 1 << SolidityParser.PayableKeyword - 86)) !== 0 || (_la - 124 & ~0x1f) == 0 && (1 << _la - 124 & (1 << SolidityParser.ReceiveKeyword - 124 | 1 << SolidityParser.Identifier - 124 | 1 << SolidityParser.StringLiteralFragment - 124)) !== 0) {
          this.state = 877;
          this.assemblyItem();
          this.state = 882;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }

        this.state = 883;
        this.match(SolidityParser.T__15);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyItem",
    value: function assemblyItem() {
      var localctx = new AssemblyItemContext(this, this._ctx, this.state);
      this.enterRule(localctx, 134, SolidityParser.RULE_assemblyItem);

      try {
        this.state = 903;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);

        switch (la_) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 885;
            this.identifier();
            break;

          case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 886;
            this.assemblyBlock();
            break;

          case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 887;
            this.assemblyExpression();
            break;

          case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 888;
            this.assemblyLocalDefinition();
            break;

          case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 889;
            this.assemblyAssignment();
            break;

          case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 890;
            this.assemblyStackAssignment();
            break;

          case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 891;
            this.labelDefinition();
            break;

          case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 892;
            this.assemblySwitch();
            break;

          case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 893;
            this.assemblyFunctionDefinition();
            break;

          case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 894;
            this.assemblyFor();
            break;

          case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 895;
            this.assemblyIf();
            break;

          case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 896;
            this.match(SolidityParser.BreakKeyword);
            break;

          case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 897;
            this.match(SolidityParser.ContinueKeyword);
            break;

          case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 898;
            this.match(SolidityParser.LeaveKeyword);
            break;

          case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 899;
            this.subAssembly();
            break;

          case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 900;
            this.numberLiteral();
            break;

          case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 901;
            this.stringLiteral();
            break;

          case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 902;
            this.hexLiteral();
            break;
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyExpression",
    value: function assemblyExpression() {
      var localctx = new AssemblyExpressionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 136, SolidityParser.RULE_assemblyExpression);

      try {
        this.state = 908;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);

        switch (la_) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 905;
            this.assemblyCall();
            break;

          case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 906;
            this.assemblyLiteral();
            break;

          case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 907;
            this.assemblyMember();
            break;
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyMember",
    value: function assemblyMember() {
      var localctx = new AssemblyMemberContext(this, this._ctx, this.state);
      this.enterRule(localctx, 138, SolidityParser.RULE_assemblyMember);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 910;
        this.identifier();
        this.state = 911;
        this.match(SolidityParser.T__34);
        this.state = 912;
        this.identifier();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyCall",
    value: function assemblyCall() {
      var localctx = new AssemblyCallContext(this, this._ctx, this.state);
      this.enterRule(localctx, 140, SolidityParser.RULE_assemblyCall);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__47:
            this.state = 914;
            this.match(SolidityParser.T__47);
            break;

          case SolidityParser.T__33:
            this.state = 915;
            this.match(SolidityParser.T__33);
            break;

          case SolidityParser.T__53:
            this.state = 916;
            this.match(SolidityParser.T__53);
            break;

          case SolidityParser.T__12:
          case SolidityParser.T__39:
          case SolidityParser.T__92:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
            this.state = 917;
            this.identifier();
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }

        this.state = 932;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 102, this._ctx);

        if (la_ === 1) {
          this.state = 920;
          this.match(SolidityParser.T__21);
          this.state = 922;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === SolidityParser.T__12 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__47 - 34 | 1 << SolidityParser.T__53 - 34)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
            this.state = 921;
            this.assemblyExpression();
          }

          this.state = 928;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__14) {
            this.state = 924;
            this.match(SolidityParser.T__14);
            this.state = 925;
            this.assemblyExpression();
            this.state = 930;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 931;
          this.match(SolidityParser.T__22);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyLocalDefinition",
    value: function assemblyLocalDefinition() {
      var localctx = new AssemblyLocalDefinitionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 142, SolidityParser.RULE_assemblyLocalDefinition);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 934;
        this.match(SolidityParser.T__85);
        this.state = 935;
        this.assemblyIdentifierOrList();
        this.state = 938;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__86) {
          this.state = 936;
          this.match(SolidityParser.T__86);
          this.state = 937;
          this.assemblyExpression();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyAssignment",
    value: function assemblyAssignment() {
      var localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 144, SolidityParser.RULE_assemblyAssignment);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 940;
        this.assemblyIdentifierOrList();
        this.state = 941;
        this.match(SolidityParser.T__86);
        this.state = 942;
        this.assemblyExpression();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyIdentifierOrList",
    value: function assemblyIdentifierOrList() {
      var localctx = new AssemblyIdentifierOrListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 146, SolidityParser.RULE_assemblyIdentifierOrList);

      try {
        this.state = 950;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 104, this._ctx);

        switch (la_) {
          case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 944;
            this.identifier();
            break;

          case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 945;
            this.assemblyMember();
            break;

          case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 946;
            this.match(SolidityParser.T__21);
            this.state = 947;
            this.assemblyIdentifierList();
            this.state = 948;
            this.match(SolidityParser.T__22);
            break;
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyIdentifierList",
    value: function assemblyIdentifierList() {
      var localctx = new AssemblyIdentifierListContext(this, this._ctx, this.state);
      this.enterRule(localctx, 148, SolidityParser.RULE_assemblyIdentifierList);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 952;
        this.identifier();
        this.state = 957;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === SolidityParser.T__14) {
          this.state = 953;
          this.match(SolidityParser.T__14);
          this.state = 954;
          this.identifier();
          this.state = 959;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyStackAssignment",
    value: function assemblyStackAssignment() {
      var localctx = new AssemblyStackAssignmentContext(this, this._ctx, this.state);
      this.enterRule(localctx, 150, SolidityParser.RULE_assemblyStackAssignment);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 960;
        this.match(SolidityParser.T__87);
        this.state = 961;
        this.identifier();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "labelDefinition",
    value: function labelDefinition() {
      var localctx = new LabelDefinitionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 152, SolidityParser.RULE_labelDefinition);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 963;
        this.identifier();
        this.state = 964;
        this.match(SolidityParser.T__57);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblySwitch",
    value: function assemblySwitch() {
      var localctx = new AssemblySwitchContext(this, this._ctx, this.state);
      this.enterRule(localctx, 154, SolidityParser.RULE_assemblySwitch);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 966;
        this.match(SolidityParser.T__88);
        this.state = 967;
        this.assemblyExpression();
        this.state = 971;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === SolidityParser.T__89 || _la === SolidityParser.T__90) {
          this.state = 968;
          this.assemblyCase();
          this.state = 973;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyCase",
    value: function assemblyCase() {
      var localctx = new AssemblyCaseContext(this, this._ctx, this.state);
      this.enterRule(localctx, 156, SolidityParser.RULE_assemblyCase);

      try {
        this.state = 980;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__89:
            this.enterOuterAlt(localctx, 1);
            this.state = 974;
            this.match(SolidityParser.T__89);
            this.state = 975;
            this.assemblyLiteral();
            this.state = 976;
            this.assemblyBlock();
            break;

          case SolidityParser.T__90:
            this.enterOuterAlt(localctx, 2);
            this.state = 978;
            this.match(SolidityParser.T__90);
            this.state = 979;
            this.assemblyBlock();
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyFunctionDefinition",
    value: function assemblyFunctionDefinition() {
      var localctx = new AssemblyFunctionDefinitionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 158, SolidityParser.RULE_assemblyFunctionDefinition);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 982;
        this.match(SolidityParser.T__27);
        this.state = 983;
        this.identifier();
        this.state = 984;
        this.match(SolidityParser.T__21);
        this.state = 986;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier) {
          this.state = 985;
          this.assemblyIdentifierList();
        }

        this.state = 988;
        this.match(SolidityParser.T__22);
        this.state = 990;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__91) {
          this.state = 989;
          this.assemblyFunctionReturns();
        }

        this.state = 992;
        this.assemblyBlock();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyFunctionReturns",
    value: function assemblyFunctionReturns() {
      var localctx = new AssemblyFunctionReturnsContext(this, this._ctx, this.state);
      this.enterRule(localctx, 160, SolidityParser.RULE_assemblyFunctionReturns);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 994;
        this.match(SolidityParser.T__91);
        this.state = 995;
        this.assemblyIdentifierList();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyFor",
    value: function assemblyFor() {
      var localctx = new AssemblyForContext(this, this._ctx, this.state);
      this.enterRule(localctx, 162, SolidityParser.RULE_assemblyFor);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.match(SolidityParser.T__24);
        this.state = 1000;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__13:
            this.state = 998;
            this.assemblyBlock();
            break;

          case SolidityParser.T__12:
          case SolidityParser.T__33:
          case SolidityParser.T__39:
          case SolidityParser.T__47:
          case SolidityParser.T__53:
          case SolidityParser.T__92:
          case SolidityParser.DecimalNumber:
          case SolidityParser.HexNumber:
          case SolidityParser.HexLiteralFragment:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
          case SolidityParser.StringLiteralFragment:
            this.state = 999;
            this.assemblyExpression();
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }

        this.state = 1002;
        this.assemblyExpression();
        this.state = 1005;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__13:
            this.state = 1003;
            this.assemblyBlock();
            break;

          case SolidityParser.T__12:
          case SolidityParser.T__33:
          case SolidityParser.T__39:
          case SolidityParser.T__47:
          case SolidityParser.T__53:
          case SolidityParser.T__92:
          case SolidityParser.DecimalNumber:
          case SolidityParser.HexNumber:
          case SolidityParser.HexLiteralFragment:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
          case SolidityParser.StringLiteralFragment:
            this.state = 1004;
            this.assemblyExpression();
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }

        this.state = 1007;
        this.assemblyBlock();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyIf",
    value: function assemblyIf() {
      var localctx = new AssemblyIfContext(this, this._ctx, this.state);
      this.enterRule(localctx, 164, SolidityParser.RULE_assemblyIf);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1009;
        this.match(SolidityParser.T__40);
        this.state = 1010;
        this.assemblyExpression();
        this.state = 1011;
        this.assemblyBlock();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "assemblyLiteral",
    value: function assemblyLiteral() {
      var localctx = new AssemblyLiteralContext(this, this._ctx, this.state);
      this.enterRule(localctx, 166, SolidityParser.RULE_assemblyLiteral);

      try {
        this.state = 1017;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.StringLiteralFragment:
            this.enterOuterAlt(localctx, 1);
            this.state = 1013;
            this.stringLiteral();
            break;

          case SolidityParser.DecimalNumber:
            this.enterOuterAlt(localctx, 2);
            this.state = 1014;
            this.match(SolidityParser.DecimalNumber);
            break;

          case SolidityParser.HexNumber:
            this.enterOuterAlt(localctx, 3);
            this.state = 1015;
            this.match(SolidityParser.HexNumber);
            break;

          case SolidityParser.HexLiteralFragment:
            this.enterOuterAlt(localctx, 4);
            this.state = 1016;
            this.hexLiteral();
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "subAssembly",
    value: function subAssembly() {
      var localctx = new SubAssemblyContext(this, this._ctx, this.state);
      this.enterRule(localctx, 168, SolidityParser.RULE_subAssembly);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1019;
        this.match(SolidityParser.T__45);
        this.state = 1020;
        this.identifier();
        this.state = 1021;
        this.assemblyBlock();
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "tupleExpression",
    value: function tupleExpression() {
      var localctx = new TupleExpressionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 170, SolidityParser.RULE_tupleExpression);
      var _la = 0; // Token type

      try {
        this.state = 1049;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__21:
            this.enterOuterAlt(localctx, 1);
            this.state = 1023;
            this.match(SolidityParser.T__21);
            this.state = 1025;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
              this.state = 1024;
              this.expression(0);
            }

            this.state = 1033;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while (_la === SolidityParser.T__14) {
              this.state = 1027;
              this.match(SolidityParser.T__14);
              this.state = 1029;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
                this.state = 1028;
                this.expression(0);
              }

              this.state = 1035;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }

            this.state = 1036;
            this.match(SolidityParser.T__22);
            break;

          case SolidityParser.T__31:
            this.enterOuterAlt(localctx, 2);
            this.state = 1037;
            this.match(SolidityParser.T__31);
            this.state = 1046;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__21)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32 | 1 << SolidityParser.T__60 - 32 | 1 << SolidityParser.T__61 - 32 | 1 << SolidityParser.T__62 - 32)) !== 0 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.Int - 93 | 1 << SolidityParser.Uint - 93 | 1 << SolidityParser.Byte - 93 | 1 << SolidityParser.Fixed - 93 | 1 << SolidityParser.Ufixed - 93 | 1 << SolidityParser.BooleanLiteral - 93 | 1 << SolidityParser.DecimalNumber - 93 | 1 << SolidityParser.HexNumber - 93 | 1 << SolidityParser.HexLiteralFragment - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.TypeKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteralFragment) {
              this.state = 1038;
              this.expression(0);
              this.state = 1043;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              while (_la === SolidityParser.T__14) {
                this.state = 1039;
                this.match(SolidityParser.T__14);
                this.state = 1040;
                this.expression(0);
                this.state = 1045;

                this._errHandler.sync(this);

                _la = this._input.LA(1);
              }
            }

            this.state = 1048;
            this.match(SolidityParser.T__32);
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "typeNameExpression",
    value: function typeNameExpression() {
      var localctx = new TypeNameExpressionContext(this, this._ctx, this.state);
      this.enterRule(localctx, 172, SolidityParser.RULE_typeNameExpression);

      try {
        this.state = 1053;

        this._errHandler.sync(this);

        switch (this._input.LA(1)) {
          case SolidityParser.T__33:
          case SolidityParser.T__50:
          case SolidityParser.T__51:
          case SolidityParser.T__52:
          case SolidityParser.T__53:
          case SolidityParser.Int:
          case SolidityParser.Uint:
          case SolidityParser.Byte:
          case SolidityParser.Fixed:
          case SolidityParser.Ufixed:
            this.enterOuterAlt(localctx, 1);
            this.state = 1051;
            this.elementaryTypeName();
            break;

          case SolidityParser.T__12:
          case SolidityParser.T__39:
          case SolidityParser.T__92:
          case SolidityParser.LeaveKeyword:
          case SolidityParser.PayableKeyword:
          case SolidityParser.ReceiveKeyword:
          case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1052;
            this.userDefinedTypeName();
            break;

          default:
            throw new _antlr["default"].error.NoViableAltException(this);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "numberLiteral",
    value: function numberLiteral() {
      var localctx = new NumberLiteralContext(this, this._ctx, this.state);
      this.enterRule(localctx, 174, SolidityParser.RULE_numberLiteral);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1055;
        _la = this._input.LA(1);

        if (!(_la === SolidityParser.DecimalNumber || _la === SolidityParser.HexNumber)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }

        this.state = 1057;

        this._errHandler.sync(this);

        var la_ = this._interp.adaptivePredict(this._input, 120, this._ctx);

        if (la_ === 1) {
          this.state = 1056;
          this.match(SolidityParser.NumberUnit);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "identifier",
    value: function identifier() {
      var localctx = new IdentifierContext(this, this._ctx, this.state);
      this.enterRule(localctx, 176, SolidityParser.RULE_identifier);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1059;
        _la = this._input.LA(1);

        if (!(_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 93 & ~0x1f) == 0 && (1 << _la - 93 & (1 << SolidityParser.T__92 - 93 | 1 << SolidityParser.LeaveKeyword - 93 | 1 << SolidityParser.PayableKeyword - 93 | 1 << SolidityParser.ReceiveKeyword - 93)) !== 0 || _la === SolidityParser.Identifier)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "hexLiteral",
    value: function hexLiteral() {
      var localctx = new HexLiteralContext(this, this._ctx, this.state);
      this.enterRule(localctx, 178, SolidityParser.RULE_hexLiteral);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1062;

        this._errHandler.sync(this);

        var _alt = 1;

        do {
          switch (_alt) {
            case 1:
              this.state = 1061;
              this.match(SolidityParser.HexLiteralFragment);
              break;

            default:
              throw new _antlr["default"].error.NoViableAltException(this);
          }

          this.state = 1064;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 121, this._ctx);
        } while (_alt != 2 && _alt != _antlr["default"].atn.ATN.INVALID_ALT_NUMBER);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "overrideSpecifier",
    value: function overrideSpecifier() {
      var localctx = new OverrideSpecifierContext(this, this._ctx, this.state);
      this.enterRule(localctx, 180, SolidityParser.RULE_overrideSpecifier);
      var _la = 0; // Token type

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1066;
        this.match(SolidityParser.T__93);
        this.state = 1078;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === SolidityParser.T__21) {
          this.state = 1067;
          this.match(SolidityParser.T__21);
          this.state = 1068;
          this.userDefinedTypeName();
          this.state = 1073;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while (_la === SolidityParser.T__14) {
            this.state = 1069;
            this.match(SolidityParser.T__14);
            this.state = 1070;
            this.userDefinedTypeName();
            this.state = 1075;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 1076;
          this.match(SolidityParser.T__22);
        }
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "stringLiteral",
    value: function stringLiteral() {
      var localctx = new StringLiteralContext(this, this._ctx, this.state);
      this.enterRule(localctx, 182, SolidityParser.RULE_stringLiteral);

      try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1081;

        this._errHandler.sync(this);

        var _alt = 1;

        do {
          switch (_alt) {
            case 1:
              this.state = 1080;
              this.match(SolidityParser.StringLiteralFragment);
              break;

            default:
              throw new _antlr["default"].error.NoViableAltException(this);
          }

          this.state = 1083;

          this._errHandler.sync(this);

          _alt = this._interp.adaptivePredict(this._input, 124, this._ctx);
        } while (_alt != 2 && _alt != _antlr["default"].atn.ATN.INVALID_ALT_NUMBER);
      } catch (re) {
        if (re instanceof _antlr["default"].error.RecognitionException) {
          localctx.exception = re;

          this._errHandler.reportError(this, re);

          this._errHandler.recover(this, re);
        } else {
          throw re;
        }
      } finally {
        this.exitRule();
      }

      return localctx;
    }
  }, {
    key: "atn",
    get: function get() {
      return atn;
    }
  }]);

  return SolidityParser;
}(_antlr["default"].Parser);

exports["default"] = SolidityParser;

_defineProperty(SolidityParser, "grammarFileName", "Solidity.g4");

_defineProperty(SolidityParser, "literalNames", [null, "'pragma'", "';'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", "'interface'", "'library'", "'is'", "'('", "')'", "'using'", "'for'", "'struct'", "'modifier'", "'function'", "'returns'", "'event'", "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'try'", "'catch'", "'while'", "'assembly'", "'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", "'->'", "'callback'", "'override'", null, null, null, null, null, null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", "'immutable'", "'continue'", "'leave'", "'external'", "'indexed'", "'internal'", "'payable'", "'private'", "'public'", "'virtual'", "'pure'", "'type'", "'view'", "'constructor'", "'fallback'", "'receive'"]);

_defineProperty(SolidityParser, "symbolicNames", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Int", "Uint", "Byte", "Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", "HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", "PrivateKeyword", "PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", "Identifier", "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", "LINE_COMMENT"]);

_defineProperty(SolidityParser, "ruleNames", ["sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", "versionOperator", "versionConstraint", "importDeclaration", "importDirective", "contractDefinition", "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", "fileLevelConstant", "usingForDeclaration", "structDefinition", "modifierDefinition", "modifierInvocation", "functionDefinition", "functionDescriptor", "returnParameters", "modifierList", "eventDefinition", "enumValue", "enumDefinition", "parameterList", "parameter", "eventParameterList", "eventParameter", "functionTypeParameterList", "functionTypeParameter", "variableDeclaration", "typeName", "userDefinedTypeName", "mappingKey", "mapping", "functionTypeName", "storageLocation", "stateMutability", "block", "statement", "expressionStatement", "ifStatement", "tryStatement", "catchClause", "whileStatement", "simpleStatement", "forStatement", "inlineAssemblyStatement", "doWhileStatement", "continueStatement", "breakStatement", "returnStatement", "throwStatement", "emitStatement", "variableDeclarationStatement", "variableDeclarationList", "identifierList", "elementaryTypeName", "expression", "primaryExpression", "expressionList", "nameValueList", "nameValue", "functionCallArguments", "functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", "assemblyMember", "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition", "assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", "tupleExpression", "typeNameExpression", "numberLiteral", "identifier", "hexLiteral", "overrideSpecifier", "stringLiteral"]);

SolidityParser.EOF = _antlr["default"].Token.EOF;
SolidityParser.T__0 = 1;
SolidityParser.T__1 = 2;
SolidityParser.T__2 = 3;
SolidityParser.T__3 = 4;
SolidityParser.T__4 = 5;
SolidityParser.T__5 = 6;
SolidityParser.T__6 = 7;
SolidityParser.T__7 = 8;
SolidityParser.T__8 = 9;
SolidityParser.T__9 = 10;
SolidityParser.T__10 = 11;
SolidityParser.T__11 = 12;
SolidityParser.T__12 = 13;
SolidityParser.T__13 = 14;
SolidityParser.T__14 = 15;
SolidityParser.T__15 = 16;
SolidityParser.T__16 = 17;
SolidityParser.T__17 = 18;
SolidityParser.T__18 = 19;
SolidityParser.T__19 = 20;
SolidityParser.T__20 = 21;
SolidityParser.T__21 = 22;
SolidityParser.T__22 = 23;
SolidityParser.T__23 = 24;
SolidityParser.T__24 = 25;
SolidityParser.T__25 = 26;
SolidityParser.T__26 = 27;
SolidityParser.T__27 = 28;
SolidityParser.T__28 = 29;
SolidityParser.T__29 = 30;
SolidityParser.T__30 = 31;
SolidityParser.T__31 = 32;
SolidityParser.T__32 = 33;
SolidityParser.T__33 = 34;
SolidityParser.T__34 = 35;
SolidityParser.T__35 = 36;
SolidityParser.T__36 = 37;
SolidityParser.T__37 = 38;
SolidityParser.T__38 = 39;
SolidityParser.T__39 = 40;
SolidityParser.T__40 = 41;
SolidityParser.T__41 = 42;
SolidityParser.T__42 = 43;
SolidityParser.T__43 = 44;
SolidityParser.T__44 = 45;
SolidityParser.T__45 = 46;
SolidityParser.T__46 = 47;
SolidityParser.T__47 = 48;
SolidityParser.T__48 = 49;
SolidityParser.T__49 = 50;
SolidityParser.T__50 = 51;
SolidityParser.T__51 = 52;
SolidityParser.T__52 = 53;
SolidityParser.T__53 = 54;
SolidityParser.T__54 = 55;
SolidityParser.T__55 = 56;
SolidityParser.T__56 = 57;
SolidityParser.T__57 = 58;
SolidityParser.T__58 = 59;
SolidityParser.T__59 = 60;
SolidityParser.T__60 = 61;
SolidityParser.T__61 = 62;
SolidityParser.T__62 = 63;
SolidityParser.T__63 = 64;
SolidityParser.T__64 = 65;
SolidityParser.T__65 = 66;
SolidityParser.T__66 = 67;
SolidityParser.T__67 = 68;
SolidityParser.T__68 = 69;
SolidityParser.T__69 = 70;
SolidityParser.T__70 = 71;
SolidityParser.T__71 = 72;
SolidityParser.T__72 = 73;
SolidityParser.T__73 = 74;
SolidityParser.T__74 = 75;
SolidityParser.T__75 = 76;
SolidityParser.T__76 = 77;
SolidityParser.T__77 = 78;
SolidityParser.T__78 = 79;
SolidityParser.T__79 = 80;
SolidityParser.T__80 = 81;
SolidityParser.T__81 = 82;
SolidityParser.T__82 = 83;
SolidityParser.T__83 = 84;
SolidityParser.T__84 = 85;
SolidityParser.T__85 = 86;
SolidityParser.T__86 = 87;
SolidityParser.T__87 = 88;
SolidityParser.T__88 = 89;
SolidityParser.T__89 = 90;
SolidityParser.T__90 = 91;
SolidityParser.T__91 = 92;
SolidityParser.T__92 = 93;
SolidityParser.T__93 = 94;
SolidityParser.Int = 95;
SolidityParser.Uint = 96;
SolidityParser.Byte = 97;
SolidityParser.Fixed = 98;
SolidityParser.Ufixed = 99;
SolidityParser.BooleanLiteral = 100;
SolidityParser.DecimalNumber = 101;
SolidityParser.HexNumber = 102;
SolidityParser.NumberUnit = 103;
SolidityParser.HexLiteralFragment = 104;
SolidityParser.ReservedKeyword = 105;
SolidityParser.AnonymousKeyword = 106;
SolidityParser.BreakKeyword = 107;
SolidityParser.ConstantKeyword = 108;
SolidityParser.ImmutableKeyword = 109;
SolidityParser.ContinueKeyword = 110;
SolidityParser.LeaveKeyword = 111;
SolidityParser.ExternalKeyword = 112;
SolidityParser.IndexedKeyword = 113;
SolidityParser.InternalKeyword = 114;
SolidityParser.PayableKeyword = 115;
SolidityParser.PrivateKeyword = 116;
SolidityParser.PublicKeyword = 117;
SolidityParser.VirtualKeyword = 118;
SolidityParser.PureKeyword = 119;
SolidityParser.TypeKeyword = 120;
SolidityParser.ViewKeyword = 121;
SolidityParser.ConstructorKeyword = 122;
SolidityParser.FallbackKeyword = 123;
SolidityParser.ReceiveKeyword = 124;
SolidityParser.Identifier = 125;
SolidityParser.StringLiteralFragment = 126;
SolidityParser.VersionLiteral = 127;
SolidityParser.WS = 128;
SolidityParser.COMMENT = 129;
SolidityParser.LINE_COMMENT = 130;
SolidityParser.RULE_sourceUnit = 0;
SolidityParser.RULE_pragmaDirective = 1;
SolidityParser.RULE_pragmaName = 2;
SolidityParser.RULE_pragmaValue = 3;
SolidityParser.RULE_version = 4;
SolidityParser.RULE_versionOperator = 5;
SolidityParser.RULE_versionConstraint = 6;
SolidityParser.RULE_importDeclaration = 7;
SolidityParser.RULE_importDirective = 8;
SolidityParser.RULE_contractDefinition = 9;
SolidityParser.RULE_inheritanceSpecifier = 10;
SolidityParser.RULE_contractPart = 11;
SolidityParser.RULE_stateVariableDeclaration = 12;
SolidityParser.RULE_fileLevelConstant = 13;
SolidityParser.RULE_usingForDeclaration = 14;
SolidityParser.RULE_structDefinition = 15;
SolidityParser.RULE_modifierDefinition = 16;
SolidityParser.RULE_modifierInvocation = 17;
SolidityParser.RULE_functionDefinition = 18;
SolidityParser.RULE_functionDescriptor = 19;
SolidityParser.RULE_returnParameters = 20;
SolidityParser.RULE_modifierList = 21;
SolidityParser.RULE_eventDefinition = 22;
SolidityParser.RULE_enumValue = 23;
SolidityParser.RULE_enumDefinition = 24;
SolidityParser.RULE_parameterList = 25;
SolidityParser.RULE_parameter = 26;
SolidityParser.RULE_eventParameterList = 27;
SolidityParser.RULE_eventParameter = 28;
SolidityParser.RULE_functionTypeParameterList = 29;
SolidityParser.RULE_functionTypeParameter = 30;
SolidityParser.RULE_variableDeclaration = 31;
SolidityParser.RULE_typeName = 32;
SolidityParser.RULE_userDefinedTypeName = 33;
SolidityParser.RULE_mappingKey = 34;
SolidityParser.RULE_mapping = 35;
SolidityParser.RULE_functionTypeName = 36;
SolidityParser.RULE_storageLocation = 37;
SolidityParser.RULE_stateMutability = 38;
SolidityParser.RULE_block = 39;
SolidityParser.RULE_statement = 40;
SolidityParser.RULE_expressionStatement = 41;
SolidityParser.RULE_ifStatement = 42;
SolidityParser.RULE_tryStatement = 43;
SolidityParser.RULE_catchClause = 44;
SolidityParser.RULE_whileStatement = 45;
SolidityParser.RULE_simpleStatement = 46;
SolidityParser.RULE_forStatement = 47;
SolidityParser.RULE_inlineAssemblyStatement = 48;
SolidityParser.RULE_doWhileStatement = 49;
SolidityParser.RULE_continueStatement = 50;
SolidityParser.RULE_breakStatement = 51;
SolidityParser.RULE_returnStatement = 52;
SolidityParser.RULE_throwStatement = 53;
SolidityParser.RULE_emitStatement = 54;
SolidityParser.RULE_variableDeclarationStatement = 55;
SolidityParser.RULE_variableDeclarationList = 56;
SolidityParser.RULE_identifierList = 57;
SolidityParser.RULE_elementaryTypeName = 58;
SolidityParser.RULE_expression = 59;
SolidityParser.RULE_primaryExpression = 60;
SolidityParser.RULE_expressionList = 61;
SolidityParser.RULE_nameValueList = 62;
SolidityParser.RULE_nameValue = 63;
SolidityParser.RULE_functionCallArguments = 64;
SolidityParser.RULE_functionCall = 65;
SolidityParser.RULE_assemblyBlock = 66;
SolidityParser.RULE_assemblyItem = 67;
SolidityParser.RULE_assemblyExpression = 68;
SolidityParser.RULE_assemblyMember = 69;
SolidityParser.RULE_assemblyCall = 70;
SolidityParser.RULE_assemblyLocalDefinition = 71;
SolidityParser.RULE_assemblyAssignment = 72;
SolidityParser.RULE_assemblyIdentifierOrList = 73;
SolidityParser.RULE_assemblyIdentifierList = 74;
SolidityParser.RULE_assemblyStackAssignment = 75;
SolidityParser.RULE_labelDefinition = 76;
SolidityParser.RULE_assemblySwitch = 77;
SolidityParser.RULE_assemblyCase = 78;
SolidityParser.RULE_assemblyFunctionDefinition = 79;
SolidityParser.RULE_assemblyFunctionReturns = 80;
SolidityParser.RULE_assemblyFor = 81;
SolidityParser.RULE_assemblyIf = 82;
SolidityParser.RULE_assemblyLiteral = 83;
SolidityParser.RULE_subAssembly = 84;
SolidityParser.RULE_tupleExpression = 85;
SolidityParser.RULE_typeNameExpression = 86;
SolidityParser.RULE_numberLiteral = 87;
SolidityParser.RULE_identifier = 88;
SolidityParser.RULE_hexLiteral = 89;
SolidityParser.RULE_overrideSpecifier = 90;
SolidityParser.RULE_stringLiteral = 91;

var SourceUnitContext = /*#__PURE__*/function (_antlr4$ParserRuleCon) {
  _inherits(SourceUnitContext, _antlr4$ParserRuleCon);

  var _super2 = _createSuper(SourceUnitContext);

  function SourceUnitContext(parser, parent, invokingState) {
    var _this2;

    _classCallCheck(this, SourceUnitContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this2 = _super2.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this2), "pragmaDirective", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(PragmaDirectiveContext);
      } else {
        return this.getTypedRuleContext(PragmaDirectiveContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "importDirective", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ImportDirectiveContext);
      } else {
        return this.getTypedRuleContext(ImportDirectiveContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "contractDefinition", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ContractDefinitionContext);
      } else {
        return this.getTypedRuleContext(ContractDefinitionContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "enumDefinition", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(EnumDefinitionContext);
      } else {
        return this.getTypedRuleContext(EnumDefinitionContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "structDefinition", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(StructDefinitionContext);
      } else {
        return this.getTypedRuleContext(StructDefinitionContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "functionDefinition", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(FunctionDefinitionContext);
      } else {
        return this.getTypedRuleContext(FunctionDefinitionContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this2), "fileLevelConstant", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(FileLevelConstantContext);
      } else {
        return this.getTypedRuleContext(FileLevelConstantContext, i);
      }
    });

    _this2.parser = parser;
    _this2.ruleIndex = SolidityParser.RULE_sourceUnit;
    return _this2;
  }

  _createClass(SourceUnitContext, [{
    key: "EOF",
    value: function EOF() {
      return this.getToken(SolidityParser.EOF, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterSourceUnit(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitSourceUnit(this);
      }
    }
  }]);

  return SourceUnitContext;
}(_antlr["default"].ParserRuleContext);

var PragmaDirectiveContext = /*#__PURE__*/function (_antlr4$ParserRuleCon2) {
  _inherits(PragmaDirectiveContext, _antlr4$ParserRuleCon2);

  var _super3 = _createSuper(PragmaDirectiveContext);

  function PragmaDirectiveContext(parser, parent, invokingState) {
    var _this3;

    _classCallCheck(this, PragmaDirectiveContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this3 = _super3.call(this, parent, invokingState);
    _this3.parser = parser;
    _this3.ruleIndex = SolidityParser.RULE_pragmaDirective;
    return _this3;
  }

  _createClass(PragmaDirectiveContext, [{
    key: "pragmaName",
    value: function pragmaName() {
      return this.getTypedRuleContext(PragmaNameContext, 0);
    }
  }, {
    key: "pragmaValue",
    value: function pragmaValue() {
      return this.getTypedRuleContext(PragmaValueContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterPragmaDirective(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitPragmaDirective(this);
      }
    }
  }]);

  return PragmaDirectiveContext;
}(_antlr["default"].ParserRuleContext);

var PragmaNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon3) {
  _inherits(PragmaNameContext, _antlr4$ParserRuleCon3);

  var _super4 = _createSuper(PragmaNameContext);

  function PragmaNameContext(parser, parent, invokingState) {
    var _this4;

    _classCallCheck(this, PragmaNameContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this4 = _super4.call(this, parent, invokingState);
    _this4.parser = parser;
    _this4.ruleIndex = SolidityParser.RULE_pragmaName;
    return _this4;
  }

  _createClass(PragmaNameContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterPragmaName(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitPragmaName(this);
      }
    }
  }]);

  return PragmaNameContext;
}(_antlr["default"].ParserRuleContext);

var PragmaValueContext = /*#__PURE__*/function (_antlr4$ParserRuleCon4) {
  _inherits(PragmaValueContext, _antlr4$ParserRuleCon4);

  var _super5 = _createSuper(PragmaValueContext);

  function PragmaValueContext(parser, parent, invokingState) {
    var _this5;

    _classCallCheck(this, PragmaValueContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this5 = _super5.call(this, parent, invokingState);
    _this5.parser = parser;
    _this5.ruleIndex = SolidityParser.RULE_pragmaValue;
    return _this5;
  }

  _createClass(PragmaValueContext, [{
    key: "version",
    value: function version() {
      return this.getTypedRuleContext(VersionContext, 0);
    }
  }, {
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterPragmaValue(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitPragmaValue(this);
      }
    }
  }]);

  return PragmaValueContext;
}(_antlr["default"].ParserRuleContext);

var VersionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon5) {
  _inherits(VersionContext, _antlr4$ParserRuleCon5);

  var _super6 = _createSuper(VersionContext);

  function VersionContext(parser, parent, invokingState) {
    var _this6;

    _classCallCheck(this, VersionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this6 = _super6.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this6), "versionConstraint", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(VersionConstraintContext);
      } else {
        return this.getTypedRuleContext(VersionConstraintContext, i);
      }
    });

    _this6.parser = parser;
    _this6.ruleIndex = SolidityParser.RULE_version;
    return _this6;
  }

  _createClass(VersionContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterVersion(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitVersion(this);
      }
    }
  }]);

  return VersionContext;
}(_antlr["default"].ParserRuleContext);

var VersionOperatorContext = /*#__PURE__*/function (_antlr4$ParserRuleCon6) {
  _inherits(VersionOperatorContext, _antlr4$ParserRuleCon6);

  var _super7 = _createSuper(VersionOperatorContext);

  function VersionOperatorContext(parser, parent, invokingState) {
    var _this7;

    _classCallCheck(this, VersionOperatorContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this7 = _super7.call(this, parent, invokingState);
    _this7.parser = parser;
    _this7.ruleIndex = SolidityParser.RULE_versionOperator;
    return _this7;
  }

  _createClass(VersionOperatorContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterVersionOperator(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitVersionOperator(this);
      }
    }
  }]);

  return VersionOperatorContext;
}(_antlr["default"].ParserRuleContext);

var VersionConstraintContext = /*#__PURE__*/function (_antlr4$ParserRuleCon7) {
  _inherits(VersionConstraintContext, _antlr4$ParserRuleCon7);

  var _super8 = _createSuper(VersionConstraintContext);

  function VersionConstraintContext(parser, parent, invokingState) {
    var _this8;

    _classCallCheck(this, VersionConstraintContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this8 = _super8.call(this, parent, invokingState);
    _this8.parser = parser;
    _this8.ruleIndex = SolidityParser.RULE_versionConstraint;
    return _this8;
  }

  _createClass(VersionConstraintContext, [{
    key: "VersionLiteral",
    value: function VersionLiteral() {
      return this.getToken(SolidityParser.VersionLiteral, 0);
    }
  }, {
    key: "versionOperator",
    value: function versionOperator() {
      return this.getTypedRuleContext(VersionOperatorContext, 0);
    }
  }, {
    key: "DecimalNumber",
    value: function DecimalNumber() {
      return this.getToken(SolidityParser.DecimalNumber, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterVersionConstraint(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitVersionConstraint(this);
      }
    }
  }]);

  return VersionConstraintContext;
}(_antlr["default"].ParserRuleContext);

var ImportDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon8) {
  _inherits(ImportDeclarationContext, _antlr4$ParserRuleCon8);

  var _super9 = _createSuper(ImportDeclarationContext);

  function ImportDeclarationContext(parser, parent, invokingState) {
    var _this9;

    _classCallCheck(this, ImportDeclarationContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this9 = _super9.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this9), "identifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
      } else {
        return this.getTypedRuleContext(IdentifierContext, i);
      }
    });

    _this9.parser = parser;
    _this9.ruleIndex = SolidityParser.RULE_importDeclaration;
    return _this9;
  }

  _createClass(ImportDeclarationContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterImportDeclaration(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitImportDeclaration(this);
      }
    }
  }]);

  return ImportDeclarationContext;
}(_antlr["default"].ParserRuleContext);

var ImportDirectiveContext = /*#__PURE__*/function (_antlr4$ParserRuleCon9) {
  _inherits(ImportDirectiveContext, _antlr4$ParserRuleCon9);

  var _super10 = _createSuper(ImportDirectiveContext);

  function ImportDirectiveContext(parser, parent, invokingState) {
    var _this10;

    _classCallCheck(this, ImportDirectiveContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this10 = _super10.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this10), "identifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
      } else {
        return this.getTypedRuleContext(IdentifierContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this10), "importDeclaration", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ImportDeclarationContext);
      } else {
        return this.getTypedRuleContext(ImportDeclarationContext, i);
      }
    });

    _this10.parser = parser;
    _this10.ruleIndex = SolidityParser.RULE_importDirective;
    return _this10;
  }

  _createClass(ImportDirectiveContext, [{
    key: "StringLiteralFragment",
    value: function StringLiteralFragment() {
      return this.getToken(SolidityParser.StringLiteralFragment, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterImportDirective(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitImportDirective(this);
      }
    }
  }]);

  return ImportDirectiveContext;
}(_antlr["default"].ParserRuleContext);

var ContractDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon10) {
  _inherits(ContractDefinitionContext, _antlr4$ParserRuleCon10);

  var _super11 = _createSuper(ContractDefinitionContext);

  function ContractDefinitionContext(parser, parent, invokingState) {
    var _this11;

    _classCallCheck(this, ContractDefinitionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this11 = _super11.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this11), "inheritanceSpecifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(InheritanceSpecifierContext);
      } else {
        return this.getTypedRuleContext(InheritanceSpecifierContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this11), "contractPart", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ContractPartContext);
      } else {
        return this.getTypedRuleContext(ContractPartContext, i);
      }
    });

    _this11.parser = parser;
    _this11.ruleIndex = SolidityParser.RULE_contractDefinition;
    return _this11;
  }

  _createClass(ContractDefinitionContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterContractDefinition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitContractDefinition(this);
      }
    }
  }]);

  return ContractDefinitionContext;
}(_antlr["default"].ParserRuleContext);

var InheritanceSpecifierContext = /*#__PURE__*/function (_antlr4$ParserRuleCon11) {
  _inherits(InheritanceSpecifierContext, _antlr4$ParserRuleCon11);

  var _super12 = _createSuper(InheritanceSpecifierContext);

  function InheritanceSpecifierContext(parser, parent, invokingState) {
    var _this12;

    _classCallCheck(this, InheritanceSpecifierContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this12 = _super12.call(this, parent, invokingState);
    _this12.parser = parser;
    _this12.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;
    return _this12;
  }

  _createClass(InheritanceSpecifierContext, [{
    key: "userDefinedTypeName",
    value: function userDefinedTypeName() {
      return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
    }
  }, {
    key: "expressionList",
    value: function expressionList() {
      return this.getTypedRuleContext(ExpressionListContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterInheritanceSpecifier(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitInheritanceSpecifier(this);
      }
    }
  }]);

  return InheritanceSpecifierContext;
}(_antlr["default"].ParserRuleContext);

var ContractPartContext = /*#__PURE__*/function (_antlr4$ParserRuleCon12) {
  _inherits(ContractPartContext, _antlr4$ParserRuleCon12);

  var _super13 = _createSuper(ContractPartContext);

  function ContractPartContext(parser, parent, invokingState) {
    var _this13;

    _classCallCheck(this, ContractPartContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this13 = _super13.call(this, parent, invokingState);
    _this13.parser = parser;
    _this13.ruleIndex = SolidityParser.RULE_contractPart;
    return _this13;
  }

  _createClass(ContractPartContext, [{
    key: "stateVariableDeclaration",
    value: function stateVariableDeclaration() {
      return this.getTypedRuleContext(StateVariableDeclarationContext, 0);
    }
  }, {
    key: "usingForDeclaration",
    value: function usingForDeclaration() {
      return this.getTypedRuleContext(UsingForDeclarationContext, 0);
    }
  }, {
    key: "structDefinition",
    value: function structDefinition() {
      return this.getTypedRuleContext(StructDefinitionContext, 0);
    }
  }, {
    key: "modifierDefinition",
    value: function modifierDefinition() {
      return this.getTypedRuleContext(ModifierDefinitionContext, 0);
    }
  }, {
    key: "functionDefinition",
    value: function functionDefinition() {
      return this.getTypedRuleContext(FunctionDefinitionContext, 0);
    }
  }, {
    key: "eventDefinition",
    value: function eventDefinition() {
      return this.getTypedRuleContext(EventDefinitionContext, 0);
    }
  }, {
    key: "enumDefinition",
    value: function enumDefinition() {
      return this.getTypedRuleContext(EnumDefinitionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterContractPart(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitContractPart(this);
      }
    }
  }]);

  return ContractPartContext;
}(_antlr["default"].ParserRuleContext);

var StateVariableDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon13) {
  _inherits(StateVariableDeclarationContext, _antlr4$ParserRuleCon13);

  var _super14 = _createSuper(StateVariableDeclarationContext);

  function StateVariableDeclarationContext(parser, parent, invokingState) {
    var _this14;

    _classCallCheck(this, StateVariableDeclarationContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this14 = _super14.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this14), "PublicKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.PublicKeyword);
      } else {
        return this.getToken(SolidityParser.PublicKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this14), "InternalKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.InternalKeyword);
      } else {
        return this.getToken(SolidityParser.InternalKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this14), "PrivateKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.PrivateKeyword);
      } else {
        return this.getToken(SolidityParser.PrivateKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this14), "ConstantKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.ConstantKeyword);
      } else {
        return this.getToken(SolidityParser.ConstantKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this14), "ImmutableKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.ImmutableKeyword);
      } else {
        return this.getToken(SolidityParser.ImmutableKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this14), "overrideSpecifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
      } else {
        return this.getTypedRuleContext(OverrideSpecifierContext, i);
      }
    });

    _this14.parser = parser;
    _this14.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;
    return _this14;
  }

  _createClass(StateVariableDeclarationContext, [{
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterStateVariableDeclaration(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitStateVariableDeclaration(this);
      }
    }
  }]);

  return StateVariableDeclarationContext;
}(_antlr["default"].ParserRuleContext);

var FileLevelConstantContext = /*#__PURE__*/function (_antlr4$ParserRuleCon14) {
  _inherits(FileLevelConstantContext, _antlr4$ParserRuleCon14);

  var _super15 = _createSuper(FileLevelConstantContext);

  function FileLevelConstantContext(parser, parent, invokingState) {
    var _this15;

    _classCallCheck(this, FileLevelConstantContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this15 = _super15.call(this, parent, invokingState);
    _this15.parser = parser;
    _this15.ruleIndex = SolidityParser.RULE_fileLevelConstant;
    return _this15;
  }

  _createClass(FileLevelConstantContext, [{
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "ConstantKeyword",
    value: function ConstantKeyword() {
      return this.getToken(SolidityParser.ConstantKeyword, 0);
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterFileLevelConstant(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitFileLevelConstant(this);
      }
    }
  }]);

  return FileLevelConstantContext;
}(_antlr["default"].ParserRuleContext);

var UsingForDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon15) {
  _inherits(UsingForDeclarationContext, _antlr4$ParserRuleCon15);

  var _super16 = _createSuper(UsingForDeclarationContext);

  function UsingForDeclarationContext(parser, parent, invokingState) {
    var _this16;

    _classCallCheck(this, UsingForDeclarationContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this16 = _super16.call(this, parent, invokingState);
    _this16.parser = parser;
    _this16.ruleIndex = SolidityParser.RULE_usingForDeclaration;
    return _this16;
  }

  _createClass(UsingForDeclarationContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterUsingForDeclaration(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitUsingForDeclaration(this);
      }
    }
  }]);

  return UsingForDeclarationContext;
}(_antlr["default"].ParserRuleContext);

var StructDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon16) {
  _inherits(StructDefinitionContext, _antlr4$ParserRuleCon16);

  var _super17 = _createSuper(StructDefinitionContext);

  function StructDefinitionContext(parser, parent, invokingState) {
    var _this17;

    _classCallCheck(this, StructDefinitionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this17 = _super17.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this17), "variableDeclaration", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
      } else {
        return this.getTypedRuleContext(VariableDeclarationContext, i);
      }
    });

    _this17.parser = parser;
    _this17.ruleIndex = SolidityParser.RULE_structDefinition;
    return _this17;
  }

  _createClass(StructDefinitionContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterStructDefinition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitStructDefinition(this);
      }
    }
  }]);

  return StructDefinitionContext;
}(_antlr["default"].ParserRuleContext);

var ModifierDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon17) {
  _inherits(ModifierDefinitionContext, _antlr4$ParserRuleCon17);

  var _super18 = _createSuper(ModifierDefinitionContext);

  function ModifierDefinitionContext(parser, parent, invokingState) {
    var _this18;

    _classCallCheck(this, ModifierDefinitionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this18 = _super18.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this18), "VirtualKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.VirtualKeyword);
      } else {
        return this.getToken(SolidityParser.VirtualKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this18), "overrideSpecifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
      } else {
        return this.getTypedRuleContext(OverrideSpecifierContext, i);
      }
    });

    _this18.parser = parser;
    _this18.ruleIndex = SolidityParser.RULE_modifierDefinition;
    return _this18;
  }

  _createClass(ModifierDefinitionContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "block",
    value: function block() {
      return this.getTypedRuleContext(BlockContext, 0);
    }
  }, {
    key: "parameterList",
    value: function parameterList() {
      return this.getTypedRuleContext(ParameterListContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterModifierDefinition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitModifierDefinition(this);
      }
    }
  }]);

  return ModifierDefinitionContext;
}(_antlr["default"].ParserRuleContext);

var ModifierInvocationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon18) {
  _inherits(ModifierInvocationContext, _antlr4$ParserRuleCon18);

  var _super19 = _createSuper(ModifierInvocationContext);

  function ModifierInvocationContext(parser, parent, invokingState) {
    var _this19;

    _classCallCheck(this, ModifierInvocationContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this19 = _super19.call(this, parent, invokingState);
    _this19.parser = parser;
    _this19.ruleIndex = SolidityParser.RULE_modifierInvocation;
    return _this19;
  }

  _createClass(ModifierInvocationContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "expressionList",
    value: function expressionList() {
      return this.getTypedRuleContext(ExpressionListContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterModifierInvocation(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitModifierInvocation(this);
      }
    }
  }]);

  return ModifierInvocationContext;
}(_antlr["default"].ParserRuleContext);

var FunctionDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon19) {
  _inherits(FunctionDefinitionContext, _antlr4$ParserRuleCon19);

  var _super20 = _createSuper(FunctionDefinitionContext);

  function FunctionDefinitionContext(parser, parent, invokingState) {
    var _this20;

    _classCallCheck(this, FunctionDefinitionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this20 = _super20.call(this, parent, invokingState);
    _this20.parser = parser;
    _this20.ruleIndex = SolidityParser.RULE_functionDefinition;
    return _this20;
  }

  _createClass(FunctionDefinitionContext, [{
    key: "functionDescriptor",
    value: function functionDescriptor() {
      return this.getTypedRuleContext(FunctionDescriptorContext, 0);
    }
  }, {
    key: "parameterList",
    value: function parameterList() {
      return this.getTypedRuleContext(ParameterListContext, 0);
    }
  }, {
    key: "modifierList",
    value: function modifierList() {
      return this.getTypedRuleContext(ModifierListContext, 0);
    }
  }, {
    key: "block",
    value: function block() {
      return this.getTypedRuleContext(BlockContext, 0);
    }
  }, {
    key: "returnParameters",
    value: function returnParameters() {
      return this.getTypedRuleContext(ReturnParametersContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterFunctionDefinition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitFunctionDefinition(this);
      }
    }
  }]);

  return FunctionDefinitionContext;
}(_antlr["default"].ParserRuleContext);

var FunctionDescriptorContext = /*#__PURE__*/function (_antlr4$ParserRuleCon20) {
  _inherits(FunctionDescriptorContext, _antlr4$ParserRuleCon20);

  var _super21 = _createSuper(FunctionDescriptorContext);

  function FunctionDescriptorContext(parser, parent, invokingState) {
    var _this21;

    _classCallCheck(this, FunctionDescriptorContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this21 = _super21.call(this, parent, invokingState);
    _this21.parser = parser;
    _this21.ruleIndex = SolidityParser.RULE_functionDescriptor;
    return _this21;
  }

  _createClass(FunctionDescriptorContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "ConstructorKeyword",
    value: function ConstructorKeyword() {
      return this.getToken(SolidityParser.ConstructorKeyword, 0);
    }
  }, {
    key: "FallbackKeyword",
    value: function FallbackKeyword() {
      return this.getToken(SolidityParser.FallbackKeyword, 0);
    }
  }, {
    key: "ReceiveKeyword",
    value: function ReceiveKeyword() {
      return this.getToken(SolidityParser.ReceiveKeyword, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterFunctionDescriptor(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitFunctionDescriptor(this);
      }
    }
  }]);

  return FunctionDescriptorContext;
}(_antlr["default"].ParserRuleContext);

var ReturnParametersContext = /*#__PURE__*/function (_antlr4$ParserRuleCon21) {
  _inherits(ReturnParametersContext, _antlr4$ParserRuleCon21);

  var _super22 = _createSuper(ReturnParametersContext);

  function ReturnParametersContext(parser, parent, invokingState) {
    var _this22;

    _classCallCheck(this, ReturnParametersContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this22 = _super22.call(this, parent, invokingState);
    _this22.parser = parser;
    _this22.ruleIndex = SolidityParser.RULE_returnParameters;
    return _this22;
  }

  _createClass(ReturnParametersContext, [{
    key: "parameterList",
    value: function parameterList() {
      return this.getTypedRuleContext(ParameterListContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterReturnParameters(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitReturnParameters(this);
      }
    }
  }]);

  return ReturnParametersContext;
}(_antlr["default"].ParserRuleContext);

var ModifierListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon22) {
  _inherits(ModifierListContext, _antlr4$ParserRuleCon22);

  var _super23 = _createSuper(ModifierListContext);

  function ModifierListContext(parser, parent, invokingState) {
    var _this23;

    _classCallCheck(this, ModifierListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this23 = _super23.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this23), "ExternalKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.ExternalKeyword);
      } else {
        return this.getToken(SolidityParser.ExternalKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this23), "PublicKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.PublicKeyword);
      } else {
        return this.getToken(SolidityParser.PublicKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this23), "InternalKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.InternalKeyword);
      } else {
        return this.getToken(SolidityParser.InternalKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this23), "PrivateKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.PrivateKeyword);
      } else {
        return this.getToken(SolidityParser.PrivateKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this23), "VirtualKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.VirtualKeyword);
      } else {
        return this.getToken(SolidityParser.VirtualKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this23), "stateMutability", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
      } else {
        return this.getTypedRuleContext(StateMutabilityContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this23), "modifierInvocation", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ModifierInvocationContext);
      } else {
        return this.getTypedRuleContext(ModifierInvocationContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this23), "overrideSpecifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OverrideSpecifierContext);
      } else {
        return this.getTypedRuleContext(OverrideSpecifierContext, i);
      }
    });

    _this23.parser = parser;
    _this23.ruleIndex = SolidityParser.RULE_modifierList;
    return _this23;
  }

  _createClass(ModifierListContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterModifierList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitModifierList(this);
      }
    }
  }]);

  return ModifierListContext;
}(_antlr["default"].ParserRuleContext);

var EventDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon23) {
  _inherits(EventDefinitionContext, _antlr4$ParserRuleCon23);

  var _super24 = _createSuper(EventDefinitionContext);

  function EventDefinitionContext(parser, parent, invokingState) {
    var _this24;

    _classCallCheck(this, EventDefinitionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this24 = _super24.call(this, parent, invokingState);
    _this24.parser = parser;
    _this24.ruleIndex = SolidityParser.RULE_eventDefinition;
    return _this24;
  }

  _createClass(EventDefinitionContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "eventParameterList",
    value: function eventParameterList() {
      return this.getTypedRuleContext(EventParameterListContext, 0);
    }
  }, {
    key: "AnonymousKeyword",
    value: function AnonymousKeyword() {
      return this.getToken(SolidityParser.AnonymousKeyword, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterEventDefinition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitEventDefinition(this);
      }
    }
  }]);

  return EventDefinitionContext;
}(_antlr["default"].ParserRuleContext);

var EnumValueContext = /*#__PURE__*/function (_antlr4$ParserRuleCon24) {
  _inherits(EnumValueContext, _antlr4$ParserRuleCon24);

  var _super25 = _createSuper(EnumValueContext);

  function EnumValueContext(parser, parent, invokingState) {
    var _this25;

    _classCallCheck(this, EnumValueContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this25 = _super25.call(this, parent, invokingState);
    _this25.parser = parser;
    _this25.ruleIndex = SolidityParser.RULE_enumValue;
    return _this25;
  }

  _createClass(EnumValueContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterEnumValue(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitEnumValue(this);
      }
    }
  }]);

  return EnumValueContext;
}(_antlr["default"].ParserRuleContext);

var EnumDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon25) {
  _inherits(EnumDefinitionContext, _antlr4$ParserRuleCon25);

  var _super26 = _createSuper(EnumDefinitionContext);

  function EnumDefinitionContext(parser, parent, invokingState) {
    var _this26;

    _classCallCheck(this, EnumDefinitionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this26 = _super26.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this26), "enumValue", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(EnumValueContext);
      } else {
        return this.getTypedRuleContext(EnumValueContext, i);
      }
    });

    _this26.parser = parser;
    _this26.ruleIndex = SolidityParser.RULE_enumDefinition;
    return _this26;
  }

  _createClass(EnumDefinitionContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterEnumDefinition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitEnumDefinition(this);
      }
    }
  }]);

  return EnumDefinitionContext;
}(_antlr["default"].ParserRuleContext);

var ParameterListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon26) {
  _inherits(ParameterListContext, _antlr4$ParserRuleCon26);

  var _super27 = _createSuper(ParameterListContext);

  function ParameterListContext(parser, parent, invokingState) {
    var _this27;

    _classCallCheck(this, ParameterListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this27 = _super27.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this27), "parameter", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ParameterContext);
      } else {
        return this.getTypedRuleContext(ParameterContext, i);
      }
    });

    _this27.parser = parser;
    _this27.ruleIndex = SolidityParser.RULE_parameterList;
    return _this27;
  }

  _createClass(ParameterListContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterParameterList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitParameterList(this);
      }
    }
  }]);

  return ParameterListContext;
}(_antlr["default"].ParserRuleContext);

var ParameterContext = /*#__PURE__*/function (_antlr4$ParserRuleCon27) {
  _inherits(ParameterContext, _antlr4$ParserRuleCon27);

  var _super28 = _createSuper(ParameterContext);

  function ParameterContext(parser, parent, invokingState) {
    var _this28;

    _classCallCheck(this, ParameterContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this28 = _super28.call(this, parent, invokingState);
    _this28.parser = parser;
    _this28.ruleIndex = SolidityParser.RULE_parameter;
    return _this28;
  }

  _createClass(ParameterContext, [{
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "storageLocation",
    value: function storageLocation() {
      return this.getTypedRuleContext(StorageLocationContext, 0);
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterParameter(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitParameter(this);
      }
    }
  }]);

  return ParameterContext;
}(_antlr["default"].ParserRuleContext);

var EventParameterListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon28) {
  _inherits(EventParameterListContext, _antlr4$ParserRuleCon28);

  var _super29 = _createSuper(EventParameterListContext);

  function EventParameterListContext(parser, parent, invokingState) {
    var _this29;

    _classCallCheck(this, EventParameterListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this29 = _super29.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this29), "eventParameter", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(EventParameterContext);
      } else {
        return this.getTypedRuleContext(EventParameterContext, i);
      }
    });

    _this29.parser = parser;
    _this29.ruleIndex = SolidityParser.RULE_eventParameterList;
    return _this29;
  }

  _createClass(EventParameterListContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterEventParameterList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitEventParameterList(this);
      }
    }
  }]);

  return EventParameterListContext;
}(_antlr["default"].ParserRuleContext);

var EventParameterContext = /*#__PURE__*/function (_antlr4$ParserRuleCon29) {
  _inherits(EventParameterContext, _antlr4$ParserRuleCon29);

  var _super30 = _createSuper(EventParameterContext);

  function EventParameterContext(parser, parent, invokingState) {
    var _this30;

    _classCallCheck(this, EventParameterContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this30 = _super30.call(this, parent, invokingState);
    _this30.parser = parser;
    _this30.ruleIndex = SolidityParser.RULE_eventParameter;
    return _this30;
  }

  _createClass(EventParameterContext, [{
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "IndexedKeyword",
    value: function IndexedKeyword() {
      return this.getToken(SolidityParser.IndexedKeyword, 0);
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterEventParameter(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitEventParameter(this);
      }
    }
  }]);

  return EventParameterContext;
}(_antlr["default"].ParserRuleContext);

var FunctionTypeParameterListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon30) {
  _inherits(FunctionTypeParameterListContext, _antlr4$ParserRuleCon30);

  var _super31 = _createSuper(FunctionTypeParameterListContext);

  function FunctionTypeParameterListContext(parser, parent, invokingState) {
    var _this31;

    _classCallCheck(this, FunctionTypeParameterListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this31 = _super31.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this31), "functionTypeParameter", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(FunctionTypeParameterContext);
      } else {
        return this.getTypedRuleContext(FunctionTypeParameterContext, i);
      }
    });

    _this31.parser = parser;
    _this31.ruleIndex = SolidityParser.RULE_functionTypeParameterList;
    return _this31;
  }

  _createClass(FunctionTypeParameterListContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterFunctionTypeParameterList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitFunctionTypeParameterList(this);
      }
    }
  }]);

  return FunctionTypeParameterListContext;
}(_antlr["default"].ParserRuleContext);

var FunctionTypeParameterContext = /*#__PURE__*/function (_antlr4$ParserRuleCon31) {
  _inherits(FunctionTypeParameterContext, _antlr4$ParserRuleCon31);

  var _super32 = _createSuper(FunctionTypeParameterContext);

  function FunctionTypeParameterContext(parser, parent, invokingState) {
    var _this32;

    _classCallCheck(this, FunctionTypeParameterContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this32 = _super32.call(this, parent, invokingState);
    _this32.parser = parser;
    _this32.ruleIndex = SolidityParser.RULE_functionTypeParameter;
    return _this32;
  }

  _createClass(FunctionTypeParameterContext, [{
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "storageLocation",
    value: function storageLocation() {
      return this.getTypedRuleContext(StorageLocationContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterFunctionTypeParameter(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitFunctionTypeParameter(this);
      }
    }
  }]);

  return FunctionTypeParameterContext;
}(_antlr["default"].ParserRuleContext);

var VariableDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon32) {
  _inherits(VariableDeclarationContext, _antlr4$ParserRuleCon32);

  var _super33 = _createSuper(VariableDeclarationContext);

  function VariableDeclarationContext(parser, parent, invokingState) {
    var _this33;

    _classCallCheck(this, VariableDeclarationContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this33 = _super33.call(this, parent, invokingState);
    _this33.parser = parser;
    _this33.ruleIndex = SolidityParser.RULE_variableDeclaration;
    return _this33;
  }

  _createClass(VariableDeclarationContext, [{
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "storageLocation",
    value: function storageLocation() {
      return this.getTypedRuleContext(StorageLocationContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterVariableDeclaration(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitVariableDeclaration(this);
      }
    }
  }]);

  return VariableDeclarationContext;
}(_antlr["default"].ParserRuleContext);

var TypeNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon33) {
  _inherits(TypeNameContext, _antlr4$ParserRuleCon33);

  var _super34 = _createSuper(TypeNameContext);

  function TypeNameContext(parser, parent, invokingState) {
    var _this34;

    _classCallCheck(this, TypeNameContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this34 = _super34.call(this, parent, invokingState);
    _this34.parser = parser;
    _this34.ruleIndex = SolidityParser.RULE_typeName;
    return _this34;
  }

  _createClass(TypeNameContext, [{
    key: "elementaryTypeName",
    value: function elementaryTypeName() {
      return this.getTypedRuleContext(ElementaryTypeNameContext, 0);
    }
  }, {
    key: "userDefinedTypeName",
    value: function userDefinedTypeName() {
      return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
    }
  }, {
    key: "mapping",
    value: function mapping() {
      return this.getTypedRuleContext(MappingContext, 0);
    }
  }, {
    key: "functionTypeName",
    value: function functionTypeName() {
      return this.getTypedRuleContext(FunctionTypeNameContext, 0);
    }
  }, {
    key: "PayableKeyword",
    value: function PayableKeyword() {
      return this.getToken(SolidityParser.PayableKeyword, 0);
    }
  }, {
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterTypeName(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitTypeName(this);
      }
    }
  }]);

  return TypeNameContext;
}(_antlr["default"].ParserRuleContext);

var UserDefinedTypeNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon34) {
  _inherits(UserDefinedTypeNameContext, _antlr4$ParserRuleCon34);

  var _super35 = _createSuper(UserDefinedTypeNameContext);

  function UserDefinedTypeNameContext(parser, parent, invokingState) {
    var _this35;

    _classCallCheck(this, UserDefinedTypeNameContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this35 = _super35.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this35), "identifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
      } else {
        return this.getTypedRuleContext(IdentifierContext, i);
      }
    });

    _this35.parser = parser;
    _this35.ruleIndex = SolidityParser.RULE_userDefinedTypeName;
    return _this35;
  }

  _createClass(UserDefinedTypeNameContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterUserDefinedTypeName(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitUserDefinedTypeName(this);
      }
    }
  }]);

  return UserDefinedTypeNameContext;
}(_antlr["default"].ParserRuleContext);

var MappingKeyContext = /*#__PURE__*/function (_antlr4$ParserRuleCon35) {
  _inherits(MappingKeyContext, _antlr4$ParserRuleCon35);

  var _super36 = _createSuper(MappingKeyContext);

  function MappingKeyContext(parser, parent, invokingState) {
    var _this36;

    _classCallCheck(this, MappingKeyContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this36 = _super36.call(this, parent, invokingState);
    _this36.parser = parser;
    _this36.ruleIndex = SolidityParser.RULE_mappingKey;
    return _this36;
  }

  _createClass(MappingKeyContext, [{
    key: "elementaryTypeName",
    value: function elementaryTypeName() {
      return this.getTypedRuleContext(ElementaryTypeNameContext, 0);
    }
  }, {
    key: "userDefinedTypeName",
    value: function userDefinedTypeName() {
      return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterMappingKey(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitMappingKey(this);
      }
    }
  }]);

  return MappingKeyContext;
}(_antlr["default"].ParserRuleContext);

var MappingContext = /*#__PURE__*/function (_antlr4$ParserRuleCon36) {
  _inherits(MappingContext, _antlr4$ParserRuleCon36);

  var _super37 = _createSuper(MappingContext);

  function MappingContext(parser, parent, invokingState) {
    var _this37;

    _classCallCheck(this, MappingContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this37 = _super37.call(this, parent, invokingState);
    _this37.parser = parser;
    _this37.ruleIndex = SolidityParser.RULE_mapping;
    return _this37;
  }

  _createClass(MappingContext, [{
    key: "mappingKey",
    value: function mappingKey() {
      return this.getTypedRuleContext(MappingKeyContext, 0);
    }
  }, {
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterMapping(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitMapping(this);
      }
    }
  }]);

  return MappingContext;
}(_antlr["default"].ParserRuleContext);

var FunctionTypeNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon37) {
  _inherits(FunctionTypeNameContext, _antlr4$ParserRuleCon37);

  var _super38 = _createSuper(FunctionTypeNameContext);

  function FunctionTypeNameContext(parser, parent, invokingState) {
    var _this38;

    _classCallCheck(this, FunctionTypeNameContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this38 = _super38.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this38), "functionTypeParameterList", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(FunctionTypeParameterListContext);
      } else {
        return this.getTypedRuleContext(FunctionTypeParameterListContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this38), "InternalKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.InternalKeyword);
      } else {
        return this.getToken(SolidityParser.InternalKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this38), "ExternalKeyword", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.ExternalKeyword);
      } else {
        return this.getToken(SolidityParser.ExternalKeyword, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this38), "stateMutability", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
      } else {
        return this.getTypedRuleContext(StateMutabilityContext, i);
      }
    });

    _this38.parser = parser;
    _this38.ruleIndex = SolidityParser.RULE_functionTypeName;
    return _this38;
  }

  _createClass(FunctionTypeNameContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterFunctionTypeName(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitFunctionTypeName(this);
      }
    }
  }]);

  return FunctionTypeNameContext;
}(_antlr["default"].ParserRuleContext);

var StorageLocationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon38) {
  _inherits(StorageLocationContext, _antlr4$ParserRuleCon38);

  var _super39 = _createSuper(StorageLocationContext);

  function StorageLocationContext(parser, parent, invokingState) {
    var _this39;

    _classCallCheck(this, StorageLocationContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this39 = _super39.call(this, parent, invokingState);
    _this39.parser = parser;
    _this39.ruleIndex = SolidityParser.RULE_storageLocation;
    return _this39;
  }

  _createClass(StorageLocationContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterStorageLocation(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitStorageLocation(this);
      }
    }
  }]);

  return StorageLocationContext;
}(_antlr["default"].ParserRuleContext);

var StateMutabilityContext = /*#__PURE__*/function (_antlr4$ParserRuleCon39) {
  _inherits(StateMutabilityContext, _antlr4$ParserRuleCon39);

  var _super40 = _createSuper(StateMutabilityContext);

  function StateMutabilityContext(parser, parent, invokingState) {
    var _this40;

    _classCallCheck(this, StateMutabilityContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this40 = _super40.call(this, parent, invokingState);
    _this40.parser = parser;
    _this40.ruleIndex = SolidityParser.RULE_stateMutability;
    return _this40;
  }

  _createClass(StateMutabilityContext, [{
    key: "PureKeyword",
    value: function PureKeyword() {
      return this.getToken(SolidityParser.PureKeyword, 0);
    }
  }, {
    key: "ConstantKeyword",
    value: function ConstantKeyword() {
      return this.getToken(SolidityParser.ConstantKeyword, 0);
    }
  }, {
    key: "ViewKeyword",
    value: function ViewKeyword() {
      return this.getToken(SolidityParser.ViewKeyword, 0);
    }
  }, {
    key: "PayableKeyword",
    value: function PayableKeyword() {
      return this.getToken(SolidityParser.PayableKeyword, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterStateMutability(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitStateMutability(this);
      }
    }
  }]);

  return StateMutabilityContext;
}(_antlr["default"].ParserRuleContext);

var BlockContext = /*#__PURE__*/function (_antlr4$ParserRuleCon40) {
  _inherits(BlockContext, _antlr4$ParserRuleCon40);

  var _super41 = _createSuper(BlockContext);

  function BlockContext(parser, parent, invokingState) {
    var _this41;

    _classCallCheck(this, BlockContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this41 = _super41.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this41), "statement", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(StatementContext);
      } else {
        return this.getTypedRuleContext(StatementContext, i);
      }
    });

    _this41.parser = parser;
    _this41.ruleIndex = SolidityParser.RULE_block;
    return _this41;
  }

  _createClass(BlockContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterBlock(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitBlock(this);
      }
    }
  }]);

  return BlockContext;
}(_antlr["default"].ParserRuleContext);

var StatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon41) {
  _inherits(StatementContext, _antlr4$ParserRuleCon41);

  var _super42 = _createSuper(StatementContext);

  function StatementContext(parser, parent, invokingState) {
    var _this42;

    _classCallCheck(this, StatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this42 = _super42.call(this, parent, invokingState);
    _this42.parser = parser;
    _this42.ruleIndex = SolidityParser.RULE_statement;
    return _this42;
  }

  _createClass(StatementContext, [{
    key: "ifStatement",
    value: function ifStatement() {
      return this.getTypedRuleContext(IfStatementContext, 0);
    }
  }, {
    key: "tryStatement",
    value: function tryStatement() {
      return this.getTypedRuleContext(TryStatementContext, 0);
    }
  }, {
    key: "whileStatement",
    value: function whileStatement() {
      return this.getTypedRuleContext(WhileStatementContext, 0);
    }
  }, {
    key: "forStatement",
    value: function forStatement() {
      return this.getTypedRuleContext(ForStatementContext, 0);
    }
  }, {
    key: "block",
    value: function block() {
      return this.getTypedRuleContext(BlockContext, 0);
    }
  }, {
    key: "inlineAssemblyStatement",
    value: function inlineAssemblyStatement() {
      return this.getTypedRuleContext(InlineAssemblyStatementContext, 0);
    }
  }, {
    key: "doWhileStatement",
    value: function doWhileStatement() {
      return this.getTypedRuleContext(DoWhileStatementContext, 0);
    }
  }, {
    key: "continueStatement",
    value: function continueStatement() {
      return this.getTypedRuleContext(ContinueStatementContext, 0);
    }
  }, {
    key: "breakStatement",
    value: function breakStatement() {
      return this.getTypedRuleContext(BreakStatementContext, 0);
    }
  }, {
    key: "returnStatement",
    value: function returnStatement() {
      return this.getTypedRuleContext(ReturnStatementContext, 0);
    }
  }, {
    key: "throwStatement",
    value: function throwStatement() {
      return this.getTypedRuleContext(ThrowStatementContext, 0);
    }
  }, {
    key: "emitStatement",
    value: function emitStatement() {
      return this.getTypedRuleContext(EmitStatementContext, 0);
    }
  }, {
    key: "simpleStatement",
    value: function simpleStatement() {
      return this.getTypedRuleContext(SimpleStatementContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitStatement(this);
      }
    }
  }]);

  return StatementContext;
}(_antlr["default"].ParserRuleContext);

var ExpressionStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon42) {
  _inherits(ExpressionStatementContext, _antlr4$ParserRuleCon42);

  var _super43 = _createSuper(ExpressionStatementContext);

  function ExpressionStatementContext(parser, parent, invokingState) {
    var _this43;

    _classCallCheck(this, ExpressionStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this43 = _super43.call(this, parent, invokingState);
    _this43.parser = parser;
    _this43.ruleIndex = SolidityParser.RULE_expressionStatement;
    return _this43;
  }

  _createClass(ExpressionStatementContext, [{
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterExpressionStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitExpressionStatement(this);
      }
    }
  }]);

  return ExpressionStatementContext;
}(_antlr["default"].ParserRuleContext);

var IfStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon43) {
  _inherits(IfStatementContext, _antlr4$ParserRuleCon43);

  var _super44 = _createSuper(IfStatementContext);

  function IfStatementContext(parser, parent, invokingState) {
    var _this44;

    _classCallCheck(this, IfStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this44 = _super44.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this44), "statement", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(StatementContext);
      } else {
        return this.getTypedRuleContext(StatementContext, i);
      }
    });

    _this44.parser = parser;
    _this44.ruleIndex = SolidityParser.RULE_ifStatement;
    return _this44;
  }

  _createClass(IfStatementContext, [{
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterIfStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitIfStatement(this);
      }
    }
  }]);

  return IfStatementContext;
}(_antlr["default"].ParserRuleContext);

var TryStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon44) {
  _inherits(TryStatementContext, _antlr4$ParserRuleCon44);

  var _super45 = _createSuper(TryStatementContext);

  function TryStatementContext(parser, parent, invokingState) {
    var _this45;

    _classCallCheck(this, TryStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this45 = _super45.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this45), "catchClause", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(CatchClauseContext);
      } else {
        return this.getTypedRuleContext(CatchClauseContext, i);
      }
    });

    _this45.parser = parser;
    _this45.ruleIndex = SolidityParser.RULE_tryStatement;
    return _this45;
  }

  _createClass(TryStatementContext, [{
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "block",
    value: function block() {
      return this.getTypedRuleContext(BlockContext, 0);
    }
  }, {
    key: "returnParameters",
    value: function returnParameters() {
      return this.getTypedRuleContext(ReturnParametersContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterTryStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitTryStatement(this);
      }
    }
  }]);

  return TryStatementContext;
}(_antlr["default"].ParserRuleContext);

var CatchClauseContext = /*#__PURE__*/function (_antlr4$ParserRuleCon45) {
  _inherits(CatchClauseContext, _antlr4$ParserRuleCon45);

  var _super46 = _createSuper(CatchClauseContext);

  function CatchClauseContext(parser, parent, invokingState) {
    var _this46;

    _classCallCheck(this, CatchClauseContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this46 = _super46.call(this, parent, invokingState);
    _this46.parser = parser;
    _this46.ruleIndex = SolidityParser.RULE_catchClause;
    return _this46;
  }

  _createClass(CatchClauseContext, [{
    key: "block",
    value: function block() {
      return this.getTypedRuleContext(BlockContext, 0);
    }
  }, {
    key: "parameterList",
    value: function parameterList() {
      return this.getTypedRuleContext(ParameterListContext, 0);
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterCatchClause(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitCatchClause(this);
      }
    }
  }]);

  return CatchClauseContext;
}(_antlr["default"].ParserRuleContext);

var WhileStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon46) {
  _inherits(WhileStatementContext, _antlr4$ParserRuleCon46);

  var _super47 = _createSuper(WhileStatementContext);

  function WhileStatementContext(parser, parent, invokingState) {
    var _this47;

    _classCallCheck(this, WhileStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this47 = _super47.call(this, parent, invokingState);
    _this47.parser = parser;
    _this47.ruleIndex = SolidityParser.RULE_whileStatement;
    return _this47;
  }

  _createClass(WhileStatementContext, [{
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "statement",
    value: function statement() {
      return this.getTypedRuleContext(StatementContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterWhileStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitWhileStatement(this);
      }
    }
  }]);

  return WhileStatementContext;
}(_antlr["default"].ParserRuleContext);

var SimpleStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon47) {
  _inherits(SimpleStatementContext, _antlr4$ParserRuleCon47);

  var _super48 = _createSuper(SimpleStatementContext);

  function SimpleStatementContext(parser, parent, invokingState) {
    var _this48;

    _classCallCheck(this, SimpleStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this48 = _super48.call(this, parent, invokingState);
    _this48.parser = parser;
    _this48.ruleIndex = SolidityParser.RULE_simpleStatement;
    return _this48;
  }

  _createClass(SimpleStatementContext, [{
    key: "variableDeclarationStatement",
    value: function variableDeclarationStatement() {
      return this.getTypedRuleContext(VariableDeclarationStatementContext, 0);
    }
  }, {
    key: "expressionStatement",
    value: function expressionStatement() {
      return this.getTypedRuleContext(ExpressionStatementContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterSimpleStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitSimpleStatement(this);
      }
    }
  }]);

  return SimpleStatementContext;
}(_antlr["default"].ParserRuleContext);

var ForStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon48) {
  _inherits(ForStatementContext, _antlr4$ParserRuleCon48);

  var _super49 = _createSuper(ForStatementContext);

  function ForStatementContext(parser, parent, invokingState) {
    var _this49;

    _classCallCheck(this, ForStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this49 = _super49.call(this, parent, invokingState);
    _this49.parser = parser;
    _this49.ruleIndex = SolidityParser.RULE_forStatement;
    return _this49;
  }

  _createClass(ForStatementContext, [{
    key: "statement",
    value: function statement() {
      return this.getTypedRuleContext(StatementContext, 0);
    }
  }, {
    key: "simpleStatement",
    value: function simpleStatement() {
      return this.getTypedRuleContext(SimpleStatementContext, 0);
    }
  }, {
    key: "expressionStatement",
    value: function expressionStatement() {
      return this.getTypedRuleContext(ExpressionStatementContext, 0);
    }
  }, {
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterForStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitForStatement(this);
      }
    }
  }]);

  return ForStatementContext;
}(_antlr["default"].ParserRuleContext);

var InlineAssemblyStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon49) {
  _inherits(InlineAssemblyStatementContext, _antlr4$ParserRuleCon49);

  var _super50 = _createSuper(InlineAssemblyStatementContext);

  function InlineAssemblyStatementContext(parser, parent, invokingState) {
    var _this50;

    _classCallCheck(this, InlineAssemblyStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this50 = _super50.call(this, parent, invokingState);
    _this50.parser = parser;
    _this50.ruleIndex = SolidityParser.RULE_inlineAssemblyStatement;
    return _this50;
  }

  _createClass(InlineAssemblyStatementContext, [{
    key: "assemblyBlock",
    value: function assemblyBlock() {
      return this.getTypedRuleContext(AssemblyBlockContext, 0);
    }
  }, {
    key: "StringLiteralFragment",
    value: function StringLiteralFragment() {
      return this.getToken(SolidityParser.StringLiteralFragment, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterInlineAssemblyStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitInlineAssemblyStatement(this);
      }
    }
  }]);

  return InlineAssemblyStatementContext;
}(_antlr["default"].ParserRuleContext);

var DoWhileStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon50) {
  _inherits(DoWhileStatementContext, _antlr4$ParserRuleCon50);

  var _super51 = _createSuper(DoWhileStatementContext);

  function DoWhileStatementContext(parser, parent, invokingState) {
    var _this51;

    _classCallCheck(this, DoWhileStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this51 = _super51.call(this, parent, invokingState);
    _this51.parser = parser;
    _this51.ruleIndex = SolidityParser.RULE_doWhileStatement;
    return _this51;
  }

  _createClass(DoWhileStatementContext, [{
    key: "statement",
    value: function statement() {
      return this.getTypedRuleContext(StatementContext, 0);
    }
  }, {
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterDoWhileStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitDoWhileStatement(this);
      }
    }
  }]);

  return DoWhileStatementContext;
}(_antlr["default"].ParserRuleContext);

var ContinueStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon51) {
  _inherits(ContinueStatementContext, _antlr4$ParserRuleCon51);

  var _super52 = _createSuper(ContinueStatementContext);

  function ContinueStatementContext(parser, parent, invokingState) {
    var _this52;

    _classCallCheck(this, ContinueStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this52 = _super52.call(this, parent, invokingState);
    _this52.parser = parser;
    _this52.ruleIndex = SolidityParser.RULE_continueStatement;
    return _this52;
  }

  _createClass(ContinueStatementContext, [{
    key: "ContinueKeyword",
    value: function ContinueKeyword() {
      return this.getToken(SolidityParser.ContinueKeyword, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterContinueStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitContinueStatement(this);
      }
    }
  }]);

  return ContinueStatementContext;
}(_antlr["default"].ParserRuleContext);

var BreakStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon52) {
  _inherits(BreakStatementContext, _antlr4$ParserRuleCon52);

  var _super53 = _createSuper(BreakStatementContext);

  function BreakStatementContext(parser, parent, invokingState) {
    var _this53;

    _classCallCheck(this, BreakStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this53 = _super53.call(this, parent, invokingState);
    _this53.parser = parser;
    _this53.ruleIndex = SolidityParser.RULE_breakStatement;
    return _this53;
  }

  _createClass(BreakStatementContext, [{
    key: "BreakKeyword",
    value: function BreakKeyword() {
      return this.getToken(SolidityParser.BreakKeyword, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterBreakStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitBreakStatement(this);
      }
    }
  }]);

  return BreakStatementContext;
}(_antlr["default"].ParserRuleContext);

var ReturnStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon53) {
  _inherits(ReturnStatementContext, _antlr4$ParserRuleCon53);

  var _super54 = _createSuper(ReturnStatementContext);

  function ReturnStatementContext(parser, parent, invokingState) {
    var _this54;

    _classCallCheck(this, ReturnStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this54 = _super54.call(this, parent, invokingState);
    _this54.parser = parser;
    _this54.ruleIndex = SolidityParser.RULE_returnStatement;
    return _this54;
  }

  _createClass(ReturnStatementContext, [{
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterReturnStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitReturnStatement(this);
      }
    }
  }]);

  return ReturnStatementContext;
}(_antlr["default"].ParserRuleContext);

var ThrowStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon54) {
  _inherits(ThrowStatementContext, _antlr4$ParserRuleCon54);

  var _super55 = _createSuper(ThrowStatementContext);

  function ThrowStatementContext(parser, parent, invokingState) {
    var _this55;

    _classCallCheck(this, ThrowStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this55 = _super55.call(this, parent, invokingState);
    _this55.parser = parser;
    _this55.ruleIndex = SolidityParser.RULE_throwStatement;
    return _this55;
  }

  _createClass(ThrowStatementContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterThrowStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitThrowStatement(this);
      }
    }
  }]);

  return ThrowStatementContext;
}(_antlr["default"].ParserRuleContext);

var EmitStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon55) {
  _inherits(EmitStatementContext, _antlr4$ParserRuleCon55);

  var _super56 = _createSuper(EmitStatementContext);

  function EmitStatementContext(parser, parent, invokingState) {
    var _this56;

    _classCallCheck(this, EmitStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this56 = _super56.call(this, parent, invokingState);
    _this56.parser = parser;
    _this56.ruleIndex = SolidityParser.RULE_emitStatement;
    return _this56;
  }

  _createClass(EmitStatementContext, [{
    key: "functionCall",
    value: function functionCall() {
      return this.getTypedRuleContext(FunctionCallContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterEmitStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitEmitStatement(this);
      }
    }
  }]);

  return EmitStatementContext;
}(_antlr["default"].ParserRuleContext);

var VariableDeclarationStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon56) {
  _inherits(VariableDeclarationStatementContext, _antlr4$ParserRuleCon56);

  var _super57 = _createSuper(VariableDeclarationStatementContext);

  function VariableDeclarationStatementContext(parser, parent, invokingState) {
    var _this57;

    _classCallCheck(this, VariableDeclarationStatementContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this57 = _super57.call(this, parent, invokingState);
    _this57.parser = parser;
    _this57.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;
    return _this57;
  }

  _createClass(VariableDeclarationStatementContext, [{
    key: "identifierList",
    value: function identifierList() {
      return this.getTypedRuleContext(IdentifierListContext, 0);
    }
  }, {
    key: "variableDeclaration",
    value: function variableDeclaration() {
      return this.getTypedRuleContext(VariableDeclarationContext, 0);
    }
  }, {
    key: "variableDeclarationList",
    value: function variableDeclarationList() {
      return this.getTypedRuleContext(VariableDeclarationListContext, 0);
    }
  }, {
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterVariableDeclarationStatement(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitVariableDeclarationStatement(this);
      }
    }
  }]);

  return VariableDeclarationStatementContext;
}(_antlr["default"].ParserRuleContext);

var VariableDeclarationListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon57) {
  _inherits(VariableDeclarationListContext, _antlr4$ParserRuleCon57);

  var _super58 = _createSuper(VariableDeclarationListContext);

  function VariableDeclarationListContext(parser, parent, invokingState) {
    var _this58;

    _classCallCheck(this, VariableDeclarationListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this58 = _super58.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this58), "variableDeclaration", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
      } else {
        return this.getTypedRuleContext(VariableDeclarationContext, i);
      }
    });

    _this58.parser = parser;
    _this58.ruleIndex = SolidityParser.RULE_variableDeclarationList;
    return _this58;
  }

  _createClass(VariableDeclarationListContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterVariableDeclarationList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitVariableDeclarationList(this);
      }
    }
  }]);

  return VariableDeclarationListContext;
}(_antlr["default"].ParserRuleContext);

var IdentifierListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon58) {
  _inherits(IdentifierListContext, _antlr4$ParserRuleCon58);

  var _super59 = _createSuper(IdentifierListContext);

  function IdentifierListContext(parser, parent, invokingState) {
    var _this59;

    _classCallCheck(this, IdentifierListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this59 = _super59.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this59), "identifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
      } else {
        return this.getTypedRuleContext(IdentifierContext, i);
      }
    });

    _this59.parser = parser;
    _this59.ruleIndex = SolidityParser.RULE_identifierList;
    return _this59;
  }

  _createClass(IdentifierListContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterIdentifierList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitIdentifierList(this);
      }
    }
  }]);

  return IdentifierListContext;
}(_antlr["default"].ParserRuleContext);

var ElementaryTypeNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon59) {
  _inherits(ElementaryTypeNameContext, _antlr4$ParserRuleCon59);

  var _super60 = _createSuper(ElementaryTypeNameContext);

  function ElementaryTypeNameContext(parser, parent, invokingState) {
    var _this60;

    _classCallCheck(this, ElementaryTypeNameContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this60 = _super60.call(this, parent, invokingState);
    _this60.parser = parser;
    _this60.ruleIndex = SolidityParser.RULE_elementaryTypeName;
    return _this60;
  }

  _createClass(ElementaryTypeNameContext, [{
    key: "Int",
    value: function Int() {
      return this.getToken(SolidityParser.Int, 0);
    }
  }, {
    key: "Uint",
    value: function Uint() {
      return this.getToken(SolidityParser.Uint, 0);
    }
  }, {
    key: "Byte",
    value: function Byte() {
      return this.getToken(SolidityParser.Byte, 0);
    }
  }, {
    key: "Fixed",
    value: function Fixed() {
      return this.getToken(SolidityParser.Fixed, 0);
    }
  }, {
    key: "Ufixed",
    value: function Ufixed() {
      return this.getToken(SolidityParser.Ufixed, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterElementaryTypeName(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitElementaryTypeName(this);
      }
    }
  }]);

  return ElementaryTypeNameContext;
}(_antlr["default"].ParserRuleContext);

var ExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon60) {
  _inherits(ExpressionContext, _antlr4$ParserRuleCon60);

  var _super61 = _createSuper(ExpressionContext);

  function ExpressionContext(parser, parent, invokingState) {
    var _this61;

    _classCallCheck(this, ExpressionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this61 = _super61.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this61), "expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });

    _this61.parser = parser;
    _this61.ruleIndex = SolidityParser.RULE_expression;
    return _this61;
  }

  _createClass(ExpressionContext, [{
    key: "typeName",
    value: function typeName() {
      return this.getTypedRuleContext(TypeNameContext, 0);
    }
  }, {
    key: "primaryExpression",
    value: function primaryExpression() {
      return this.getTypedRuleContext(PrimaryExpressionContext, 0);
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "nameValueList",
    value: function nameValueList() {
      return this.getTypedRuleContext(NameValueListContext, 0);
    }
  }, {
    key: "functionCallArguments",
    value: function functionCallArguments() {
      return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterExpression(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitExpression(this);
      }
    }
  }]);

  return ExpressionContext;
}(_antlr["default"].ParserRuleContext);

var PrimaryExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon61) {
  _inherits(PrimaryExpressionContext, _antlr4$ParserRuleCon61);

  var _super62 = _createSuper(PrimaryExpressionContext);

  function PrimaryExpressionContext(parser, parent, invokingState) {
    var _this62;

    _classCallCheck(this, PrimaryExpressionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this62 = _super62.call(this, parent, invokingState);
    _this62.parser = parser;
    _this62.ruleIndex = SolidityParser.RULE_primaryExpression;
    return _this62;
  }

  _createClass(PrimaryExpressionContext, [{
    key: "BooleanLiteral",
    value: function BooleanLiteral() {
      return this.getToken(SolidityParser.BooleanLiteral, 0);
    }
  }, {
    key: "numberLiteral",
    value: function numberLiteral() {
      return this.getTypedRuleContext(NumberLiteralContext, 0);
    }
  }, {
    key: "hexLiteral",
    value: function hexLiteral() {
      return this.getTypedRuleContext(HexLiteralContext, 0);
    }
  }, {
    key: "stringLiteral",
    value: function stringLiteral() {
      return this.getTypedRuleContext(StringLiteralContext, 0);
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "TypeKeyword",
    value: function TypeKeyword() {
      return this.getToken(SolidityParser.TypeKeyword, 0);
    }
  }, {
    key: "PayableKeyword",
    value: function PayableKeyword() {
      return this.getToken(SolidityParser.PayableKeyword, 0);
    }
  }, {
    key: "tupleExpression",
    value: function tupleExpression() {
      return this.getTypedRuleContext(TupleExpressionContext, 0);
    }
  }, {
    key: "typeNameExpression",
    value: function typeNameExpression() {
      return this.getTypedRuleContext(TypeNameExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterPrimaryExpression(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitPrimaryExpression(this);
      }
    }
  }]);

  return PrimaryExpressionContext;
}(_antlr["default"].ParserRuleContext);

var ExpressionListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon62) {
  _inherits(ExpressionListContext, _antlr4$ParserRuleCon62);

  var _super63 = _createSuper(ExpressionListContext);

  function ExpressionListContext(parser, parent, invokingState) {
    var _this63;

    _classCallCheck(this, ExpressionListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this63 = _super63.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this63), "expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });

    _this63.parser = parser;
    _this63.ruleIndex = SolidityParser.RULE_expressionList;
    return _this63;
  }

  _createClass(ExpressionListContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterExpressionList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitExpressionList(this);
      }
    }
  }]);

  return ExpressionListContext;
}(_antlr["default"].ParserRuleContext);

var NameValueListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon63) {
  _inherits(NameValueListContext, _antlr4$ParserRuleCon63);

  var _super64 = _createSuper(NameValueListContext);

  function NameValueListContext(parser, parent, invokingState) {
    var _this64;

    _classCallCheck(this, NameValueListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this64 = _super64.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this64), "nameValue", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(NameValueContext);
      } else {
        return this.getTypedRuleContext(NameValueContext, i);
      }
    });

    _this64.parser = parser;
    _this64.ruleIndex = SolidityParser.RULE_nameValueList;
    return _this64;
  }

  _createClass(NameValueListContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterNameValueList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitNameValueList(this);
      }
    }
  }]);

  return NameValueListContext;
}(_antlr["default"].ParserRuleContext);

var NameValueContext = /*#__PURE__*/function (_antlr4$ParserRuleCon64) {
  _inherits(NameValueContext, _antlr4$ParserRuleCon64);

  var _super65 = _createSuper(NameValueContext);

  function NameValueContext(parser, parent, invokingState) {
    var _this65;

    _classCallCheck(this, NameValueContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this65 = _super65.call(this, parent, invokingState);
    _this65.parser = parser;
    _this65.ruleIndex = SolidityParser.RULE_nameValue;
    return _this65;
  }

  _createClass(NameValueContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterNameValue(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitNameValue(this);
      }
    }
  }]);

  return NameValueContext;
}(_antlr["default"].ParserRuleContext);

var FunctionCallArgumentsContext = /*#__PURE__*/function (_antlr4$ParserRuleCon65) {
  _inherits(FunctionCallArgumentsContext, _antlr4$ParserRuleCon65);

  var _super66 = _createSuper(FunctionCallArgumentsContext);

  function FunctionCallArgumentsContext(parser, parent, invokingState) {
    var _this66;

    _classCallCheck(this, FunctionCallArgumentsContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this66 = _super66.call(this, parent, invokingState);
    _this66.parser = parser;
    _this66.ruleIndex = SolidityParser.RULE_functionCallArguments;
    return _this66;
  }

  _createClass(FunctionCallArgumentsContext, [{
    key: "nameValueList",
    value: function nameValueList() {
      return this.getTypedRuleContext(NameValueListContext, 0);
    }
  }, {
    key: "expressionList",
    value: function expressionList() {
      return this.getTypedRuleContext(ExpressionListContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterFunctionCallArguments(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitFunctionCallArguments(this);
      }
    }
  }]);

  return FunctionCallArgumentsContext;
}(_antlr["default"].ParserRuleContext);

var FunctionCallContext = /*#__PURE__*/function (_antlr4$ParserRuleCon66) {
  _inherits(FunctionCallContext, _antlr4$ParserRuleCon66);

  var _super67 = _createSuper(FunctionCallContext);

  function FunctionCallContext(parser, parent, invokingState) {
    var _this67;

    _classCallCheck(this, FunctionCallContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this67 = _super67.call(this, parent, invokingState);
    _this67.parser = parser;
    _this67.ruleIndex = SolidityParser.RULE_functionCall;
    return _this67;
  }

  _createClass(FunctionCallContext, [{
    key: "expression",
    value: function expression() {
      return this.getTypedRuleContext(ExpressionContext, 0);
    }
  }, {
    key: "functionCallArguments",
    value: function functionCallArguments() {
      return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterFunctionCall(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitFunctionCall(this);
      }
    }
  }]);

  return FunctionCallContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyBlockContext = /*#__PURE__*/function (_antlr4$ParserRuleCon67) {
  _inherits(AssemblyBlockContext, _antlr4$ParserRuleCon67);

  var _super68 = _createSuper(AssemblyBlockContext);

  function AssemblyBlockContext(parser, parent, invokingState) {
    var _this68;

    _classCallCheck(this, AssemblyBlockContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this68 = _super68.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this68), "assemblyItem", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(AssemblyItemContext);
      } else {
        return this.getTypedRuleContext(AssemblyItemContext, i);
      }
    });

    _this68.parser = parser;
    _this68.ruleIndex = SolidityParser.RULE_assemblyBlock;
    return _this68;
  }

  _createClass(AssemblyBlockContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyBlock(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyBlock(this);
      }
    }
  }]);

  return AssemblyBlockContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyItemContext = /*#__PURE__*/function (_antlr4$ParserRuleCon68) {
  _inherits(AssemblyItemContext, _antlr4$ParserRuleCon68);

  var _super69 = _createSuper(AssemblyItemContext);

  function AssemblyItemContext(parser, parent, invokingState) {
    var _this69;

    _classCallCheck(this, AssemblyItemContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this69 = _super69.call(this, parent, invokingState);
    _this69.parser = parser;
    _this69.ruleIndex = SolidityParser.RULE_assemblyItem;
    return _this69;
  }

  _createClass(AssemblyItemContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "assemblyBlock",
    value: function assemblyBlock() {
      return this.getTypedRuleContext(AssemblyBlockContext, 0);
    }
  }, {
    key: "assemblyExpression",
    value: function assemblyExpression() {
      return this.getTypedRuleContext(AssemblyExpressionContext, 0);
    }
  }, {
    key: "assemblyLocalDefinition",
    value: function assemblyLocalDefinition() {
      return this.getTypedRuleContext(AssemblyLocalDefinitionContext, 0);
    }
  }, {
    key: "assemblyAssignment",
    value: function assemblyAssignment() {
      return this.getTypedRuleContext(AssemblyAssignmentContext, 0);
    }
  }, {
    key: "assemblyStackAssignment",
    value: function assemblyStackAssignment() {
      return this.getTypedRuleContext(AssemblyStackAssignmentContext, 0);
    }
  }, {
    key: "labelDefinition",
    value: function labelDefinition() {
      return this.getTypedRuleContext(LabelDefinitionContext, 0);
    }
  }, {
    key: "assemblySwitch",
    value: function assemblySwitch() {
      return this.getTypedRuleContext(AssemblySwitchContext, 0);
    }
  }, {
    key: "assemblyFunctionDefinition",
    value: function assemblyFunctionDefinition() {
      return this.getTypedRuleContext(AssemblyFunctionDefinitionContext, 0);
    }
  }, {
    key: "assemblyFor",
    value: function assemblyFor() {
      return this.getTypedRuleContext(AssemblyForContext, 0);
    }
  }, {
    key: "assemblyIf",
    value: function assemblyIf() {
      return this.getTypedRuleContext(AssemblyIfContext, 0);
    }
  }, {
    key: "BreakKeyword",
    value: function BreakKeyword() {
      return this.getToken(SolidityParser.BreakKeyword, 0);
    }
  }, {
    key: "ContinueKeyword",
    value: function ContinueKeyword() {
      return this.getToken(SolidityParser.ContinueKeyword, 0);
    }
  }, {
    key: "LeaveKeyword",
    value: function LeaveKeyword() {
      return this.getToken(SolidityParser.LeaveKeyword, 0);
    }
  }, {
    key: "subAssembly",
    value: function subAssembly() {
      return this.getTypedRuleContext(SubAssemblyContext, 0);
    }
  }, {
    key: "numberLiteral",
    value: function numberLiteral() {
      return this.getTypedRuleContext(NumberLiteralContext, 0);
    }
  }, {
    key: "stringLiteral",
    value: function stringLiteral() {
      return this.getTypedRuleContext(StringLiteralContext, 0);
    }
  }, {
    key: "hexLiteral",
    value: function hexLiteral() {
      return this.getTypedRuleContext(HexLiteralContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyItem(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyItem(this);
      }
    }
  }]);

  return AssemblyItemContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon69) {
  _inherits(AssemblyExpressionContext, _antlr4$ParserRuleCon69);

  var _super70 = _createSuper(AssemblyExpressionContext);

  function AssemblyExpressionContext(parser, parent, invokingState) {
    var _this70;

    _classCallCheck(this, AssemblyExpressionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this70 = _super70.call(this, parent, invokingState);
    _this70.parser = parser;
    _this70.ruleIndex = SolidityParser.RULE_assemblyExpression;
    return _this70;
  }

  _createClass(AssemblyExpressionContext, [{
    key: "assemblyCall",
    value: function assemblyCall() {
      return this.getTypedRuleContext(AssemblyCallContext, 0);
    }
  }, {
    key: "assemblyLiteral",
    value: function assemblyLiteral() {
      return this.getTypedRuleContext(AssemblyLiteralContext, 0);
    }
  }, {
    key: "assemblyMember",
    value: function assemblyMember() {
      return this.getTypedRuleContext(AssemblyMemberContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyExpression(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyExpression(this);
      }
    }
  }]);

  return AssemblyExpressionContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyMemberContext = /*#__PURE__*/function (_antlr4$ParserRuleCon70) {
  _inherits(AssemblyMemberContext, _antlr4$ParserRuleCon70);

  var _super71 = _createSuper(AssemblyMemberContext);

  function AssemblyMemberContext(parser, parent, invokingState) {
    var _this71;

    _classCallCheck(this, AssemblyMemberContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this71 = _super71.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this71), "identifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
      } else {
        return this.getTypedRuleContext(IdentifierContext, i);
      }
    });

    _this71.parser = parser;
    _this71.ruleIndex = SolidityParser.RULE_assemblyMember;
    return _this71;
  }

  _createClass(AssemblyMemberContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyMember(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyMember(this);
      }
    }
  }]);

  return AssemblyMemberContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyCallContext = /*#__PURE__*/function (_antlr4$ParserRuleCon71) {
  _inherits(AssemblyCallContext, _antlr4$ParserRuleCon71);

  var _super72 = _createSuper(AssemblyCallContext);

  function AssemblyCallContext(parser, parent, invokingState) {
    var _this72;

    _classCallCheck(this, AssemblyCallContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this72 = _super72.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this72), "assemblyExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(AssemblyExpressionContext);
      } else {
        return this.getTypedRuleContext(AssemblyExpressionContext, i);
      }
    });

    _this72.parser = parser;
    _this72.ruleIndex = SolidityParser.RULE_assemblyCall;
    return _this72;
  }

  _createClass(AssemblyCallContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyCall(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyCall(this);
      }
    }
  }]);

  return AssemblyCallContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyLocalDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon72) {
  _inherits(AssemblyLocalDefinitionContext, _antlr4$ParserRuleCon72);

  var _super73 = _createSuper(AssemblyLocalDefinitionContext);

  function AssemblyLocalDefinitionContext(parser, parent, invokingState) {
    var _this73;

    _classCallCheck(this, AssemblyLocalDefinitionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this73 = _super73.call(this, parent, invokingState);
    _this73.parser = parser;
    _this73.ruleIndex = SolidityParser.RULE_assemblyLocalDefinition;
    return _this73;
  }

  _createClass(AssemblyLocalDefinitionContext, [{
    key: "assemblyIdentifierOrList",
    value: function assemblyIdentifierOrList() {
      return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);
    }
  }, {
    key: "assemblyExpression",
    value: function assemblyExpression() {
      return this.getTypedRuleContext(AssemblyExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyLocalDefinition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyLocalDefinition(this);
      }
    }
  }]);

  return AssemblyLocalDefinitionContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyAssignmentContext = /*#__PURE__*/function (_antlr4$ParserRuleCon73) {
  _inherits(AssemblyAssignmentContext, _antlr4$ParserRuleCon73);

  var _super74 = _createSuper(AssemblyAssignmentContext);

  function AssemblyAssignmentContext(parser, parent, invokingState) {
    var _this74;

    _classCallCheck(this, AssemblyAssignmentContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this74 = _super74.call(this, parent, invokingState);
    _this74.parser = parser;
    _this74.ruleIndex = SolidityParser.RULE_assemblyAssignment;
    return _this74;
  }

  _createClass(AssemblyAssignmentContext, [{
    key: "assemblyIdentifierOrList",
    value: function assemblyIdentifierOrList() {
      return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);
    }
  }, {
    key: "assemblyExpression",
    value: function assemblyExpression() {
      return this.getTypedRuleContext(AssemblyExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyAssignment(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyAssignment(this);
      }
    }
  }]);

  return AssemblyAssignmentContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyIdentifierOrListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon74) {
  _inherits(AssemblyIdentifierOrListContext, _antlr4$ParserRuleCon74);

  var _super75 = _createSuper(AssemblyIdentifierOrListContext);

  function AssemblyIdentifierOrListContext(parser, parent, invokingState) {
    var _this75;

    _classCallCheck(this, AssemblyIdentifierOrListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this75 = _super75.call(this, parent, invokingState);
    _this75.parser = parser;
    _this75.ruleIndex = SolidityParser.RULE_assemblyIdentifierOrList;
    return _this75;
  }

  _createClass(AssemblyIdentifierOrListContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "assemblyMember",
    value: function assemblyMember() {
      return this.getTypedRuleContext(AssemblyMemberContext, 0);
    }
  }, {
    key: "assemblyIdentifierList",
    value: function assemblyIdentifierList() {
      return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyIdentifierOrList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyIdentifierOrList(this);
      }
    }
  }]);

  return AssemblyIdentifierOrListContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyIdentifierListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon75) {
  _inherits(AssemblyIdentifierListContext, _antlr4$ParserRuleCon75);

  var _super76 = _createSuper(AssemblyIdentifierListContext);

  function AssemblyIdentifierListContext(parser, parent, invokingState) {
    var _this76;

    _classCallCheck(this, AssemblyIdentifierListContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this76 = _super76.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this76), "identifier", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(IdentifierContext);
      } else {
        return this.getTypedRuleContext(IdentifierContext, i);
      }
    });

    _this76.parser = parser;
    _this76.ruleIndex = SolidityParser.RULE_assemblyIdentifierList;
    return _this76;
  }

  _createClass(AssemblyIdentifierListContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyIdentifierList(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyIdentifierList(this);
      }
    }
  }]);

  return AssemblyIdentifierListContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyStackAssignmentContext = /*#__PURE__*/function (_antlr4$ParserRuleCon76) {
  _inherits(AssemblyStackAssignmentContext, _antlr4$ParserRuleCon76);

  var _super77 = _createSuper(AssemblyStackAssignmentContext);

  function AssemblyStackAssignmentContext(parser, parent, invokingState) {
    var _this77;

    _classCallCheck(this, AssemblyStackAssignmentContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this77 = _super77.call(this, parent, invokingState);
    _this77.parser = parser;
    _this77.ruleIndex = SolidityParser.RULE_assemblyStackAssignment;
    return _this77;
  }

  _createClass(AssemblyStackAssignmentContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyStackAssignment(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyStackAssignment(this);
      }
    }
  }]);

  return AssemblyStackAssignmentContext;
}(_antlr["default"].ParserRuleContext);

var LabelDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon77) {
  _inherits(LabelDefinitionContext, _antlr4$ParserRuleCon77);

  var _super78 = _createSuper(LabelDefinitionContext);

  function LabelDefinitionContext(parser, parent, invokingState) {
    var _this78;

    _classCallCheck(this, LabelDefinitionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this78 = _super78.call(this, parent, invokingState);
    _this78.parser = parser;
    _this78.ruleIndex = SolidityParser.RULE_labelDefinition;
    return _this78;
  }

  _createClass(LabelDefinitionContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterLabelDefinition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitLabelDefinition(this);
      }
    }
  }]);

  return LabelDefinitionContext;
}(_antlr["default"].ParserRuleContext);

var AssemblySwitchContext = /*#__PURE__*/function (_antlr4$ParserRuleCon78) {
  _inherits(AssemblySwitchContext, _antlr4$ParserRuleCon78);

  var _super79 = _createSuper(AssemblySwitchContext);

  function AssemblySwitchContext(parser, parent, invokingState) {
    var _this79;

    _classCallCheck(this, AssemblySwitchContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this79 = _super79.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this79), "assemblyCase", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(AssemblyCaseContext);
      } else {
        return this.getTypedRuleContext(AssemblyCaseContext, i);
      }
    });

    _this79.parser = parser;
    _this79.ruleIndex = SolidityParser.RULE_assemblySwitch;
    return _this79;
  }

  _createClass(AssemblySwitchContext, [{
    key: "assemblyExpression",
    value: function assemblyExpression() {
      return this.getTypedRuleContext(AssemblyExpressionContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblySwitch(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblySwitch(this);
      }
    }
  }]);

  return AssemblySwitchContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyCaseContext = /*#__PURE__*/function (_antlr4$ParserRuleCon79) {
  _inherits(AssemblyCaseContext, _antlr4$ParserRuleCon79);

  var _super80 = _createSuper(AssemblyCaseContext);

  function AssemblyCaseContext(parser, parent, invokingState) {
    var _this80;

    _classCallCheck(this, AssemblyCaseContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this80 = _super80.call(this, parent, invokingState);
    _this80.parser = parser;
    _this80.ruleIndex = SolidityParser.RULE_assemblyCase;
    return _this80;
  }

  _createClass(AssemblyCaseContext, [{
    key: "assemblyLiteral",
    value: function assemblyLiteral() {
      return this.getTypedRuleContext(AssemblyLiteralContext, 0);
    }
  }, {
    key: "assemblyBlock",
    value: function assemblyBlock() {
      return this.getTypedRuleContext(AssemblyBlockContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyCase(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyCase(this);
      }
    }
  }]);

  return AssemblyCaseContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyFunctionDefinitionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon80) {
  _inherits(AssemblyFunctionDefinitionContext, _antlr4$ParserRuleCon80);

  var _super81 = _createSuper(AssemblyFunctionDefinitionContext);

  function AssemblyFunctionDefinitionContext(parser, parent, invokingState) {
    var _this81;

    _classCallCheck(this, AssemblyFunctionDefinitionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this81 = _super81.call(this, parent, invokingState);
    _this81.parser = parser;
    _this81.ruleIndex = SolidityParser.RULE_assemblyFunctionDefinition;
    return _this81;
  }

  _createClass(AssemblyFunctionDefinitionContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "assemblyBlock",
    value: function assemblyBlock() {
      return this.getTypedRuleContext(AssemblyBlockContext, 0);
    }
  }, {
    key: "assemblyIdentifierList",
    value: function assemblyIdentifierList() {
      return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);
    }
  }, {
    key: "assemblyFunctionReturns",
    value: function assemblyFunctionReturns() {
      return this.getTypedRuleContext(AssemblyFunctionReturnsContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyFunctionDefinition(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyFunctionDefinition(this);
      }
    }
  }]);

  return AssemblyFunctionDefinitionContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyFunctionReturnsContext = /*#__PURE__*/function (_antlr4$ParserRuleCon81) {
  _inherits(AssemblyFunctionReturnsContext, _antlr4$ParserRuleCon81);

  var _super82 = _createSuper(AssemblyFunctionReturnsContext);

  function AssemblyFunctionReturnsContext(parser, parent, invokingState) {
    var _this82;

    _classCallCheck(this, AssemblyFunctionReturnsContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this82 = _super82.call(this, parent, invokingState);
    _this82.parser = parser;
    _this82.ruleIndex = SolidityParser.RULE_assemblyFunctionReturns;
    return _this82;
  }

  _createClass(AssemblyFunctionReturnsContext, [{
    key: "assemblyIdentifierList",
    value: function assemblyIdentifierList() {
      return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyFunctionReturns(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyFunctionReturns(this);
      }
    }
  }]);

  return AssemblyFunctionReturnsContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyForContext = /*#__PURE__*/function (_antlr4$ParserRuleCon82) {
  _inherits(AssemblyForContext, _antlr4$ParserRuleCon82);

  var _super83 = _createSuper(AssemblyForContext);

  function AssemblyForContext(parser, parent, invokingState) {
    var _this83;

    _classCallCheck(this, AssemblyForContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this83 = _super83.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this83), "assemblyExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(AssemblyExpressionContext);
      } else {
        return this.getTypedRuleContext(AssemblyExpressionContext, i);
      }
    });

    _defineProperty(_assertThisInitialized(_this83), "assemblyBlock", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(AssemblyBlockContext);
      } else {
        return this.getTypedRuleContext(AssemblyBlockContext, i);
      }
    });

    _this83.parser = parser;
    _this83.ruleIndex = SolidityParser.RULE_assemblyFor;
    return _this83;
  }

  _createClass(AssemblyForContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyFor(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyFor(this);
      }
    }
  }]);

  return AssemblyForContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyIfContext = /*#__PURE__*/function (_antlr4$ParserRuleCon83) {
  _inherits(AssemblyIfContext, _antlr4$ParserRuleCon83);

  var _super84 = _createSuper(AssemblyIfContext);

  function AssemblyIfContext(parser, parent, invokingState) {
    var _this84;

    _classCallCheck(this, AssemblyIfContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this84 = _super84.call(this, parent, invokingState);
    _this84.parser = parser;
    _this84.ruleIndex = SolidityParser.RULE_assemblyIf;
    return _this84;
  }

  _createClass(AssemblyIfContext, [{
    key: "assemblyExpression",
    value: function assemblyExpression() {
      return this.getTypedRuleContext(AssemblyExpressionContext, 0);
    }
  }, {
    key: "assemblyBlock",
    value: function assemblyBlock() {
      return this.getTypedRuleContext(AssemblyBlockContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyIf(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyIf(this);
      }
    }
  }]);

  return AssemblyIfContext;
}(_antlr["default"].ParserRuleContext);

var AssemblyLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon84) {
  _inherits(AssemblyLiteralContext, _antlr4$ParserRuleCon84);

  var _super85 = _createSuper(AssemblyLiteralContext);

  function AssemblyLiteralContext(parser, parent, invokingState) {
    var _this85;

    _classCallCheck(this, AssemblyLiteralContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this85 = _super85.call(this, parent, invokingState);
    _this85.parser = parser;
    _this85.ruleIndex = SolidityParser.RULE_assemblyLiteral;
    return _this85;
  }

  _createClass(AssemblyLiteralContext, [{
    key: "stringLiteral",
    value: function stringLiteral() {
      return this.getTypedRuleContext(StringLiteralContext, 0);
    }
  }, {
    key: "DecimalNumber",
    value: function DecimalNumber() {
      return this.getToken(SolidityParser.DecimalNumber, 0);
    }
  }, {
    key: "HexNumber",
    value: function HexNumber() {
      return this.getToken(SolidityParser.HexNumber, 0);
    }
  }, {
    key: "hexLiteral",
    value: function hexLiteral() {
      return this.getTypedRuleContext(HexLiteralContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterAssemblyLiteral(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitAssemblyLiteral(this);
      }
    }
  }]);

  return AssemblyLiteralContext;
}(_antlr["default"].ParserRuleContext);

var SubAssemblyContext = /*#__PURE__*/function (_antlr4$ParserRuleCon85) {
  _inherits(SubAssemblyContext, _antlr4$ParserRuleCon85);

  var _super86 = _createSuper(SubAssemblyContext);

  function SubAssemblyContext(parser, parent, invokingState) {
    var _this86;

    _classCallCheck(this, SubAssemblyContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this86 = _super86.call(this, parent, invokingState);
    _this86.parser = parser;
    _this86.ruleIndex = SolidityParser.RULE_subAssembly;
    return _this86;
  }

  _createClass(SubAssemblyContext, [{
    key: "identifier",
    value: function identifier() {
      return this.getTypedRuleContext(IdentifierContext, 0);
    }
  }, {
    key: "assemblyBlock",
    value: function assemblyBlock() {
      return this.getTypedRuleContext(AssemblyBlockContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterSubAssembly(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitSubAssembly(this);
      }
    }
  }]);

  return SubAssemblyContext;
}(_antlr["default"].ParserRuleContext);

var TupleExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon86) {
  _inherits(TupleExpressionContext, _antlr4$ParserRuleCon86);

  var _super87 = _createSuper(TupleExpressionContext);

  function TupleExpressionContext(parser, parent, invokingState) {
    var _this87;

    _classCallCheck(this, TupleExpressionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this87 = _super87.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this87), "expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(ExpressionContext);
      } else {
        return this.getTypedRuleContext(ExpressionContext, i);
      }
    });

    _this87.parser = parser;
    _this87.ruleIndex = SolidityParser.RULE_tupleExpression;
    return _this87;
  }

  _createClass(TupleExpressionContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterTupleExpression(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitTupleExpression(this);
      }
    }
  }]);

  return TupleExpressionContext;
}(_antlr["default"].ParserRuleContext);

var TypeNameExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon87) {
  _inherits(TypeNameExpressionContext, _antlr4$ParserRuleCon87);

  var _super88 = _createSuper(TypeNameExpressionContext);

  function TypeNameExpressionContext(parser, parent, invokingState) {
    var _this88;

    _classCallCheck(this, TypeNameExpressionContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this88 = _super88.call(this, parent, invokingState);
    _this88.parser = parser;
    _this88.ruleIndex = SolidityParser.RULE_typeNameExpression;
    return _this88;
  }

  _createClass(TypeNameExpressionContext, [{
    key: "elementaryTypeName",
    value: function elementaryTypeName() {
      return this.getTypedRuleContext(ElementaryTypeNameContext, 0);
    }
  }, {
    key: "userDefinedTypeName",
    value: function userDefinedTypeName() {
      return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterTypeNameExpression(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitTypeNameExpression(this);
      }
    }
  }]);

  return TypeNameExpressionContext;
}(_antlr["default"].ParserRuleContext);

var NumberLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon88) {
  _inherits(NumberLiteralContext, _antlr4$ParserRuleCon88);

  var _super89 = _createSuper(NumberLiteralContext);

  function NumberLiteralContext(parser, parent, invokingState) {
    var _this89;

    _classCallCheck(this, NumberLiteralContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this89 = _super89.call(this, parent, invokingState);
    _this89.parser = parser;
    _this89.ruleIndex = SolidityParser.RULE_numberLiteral;
    return _this89;
  }

  _createClass(NumberLiteralContext, [{
    key: "DecimalNumber",
    value: function DecimalNumber() {
      return this.getToken(SolidityParser.DecimalNumber, 0);
    }
  }, {
    key: "HexNumber",
    value: function HexNumber() {
      return this.getToken(SolidityParser.HexNumber, 0);
    }
  }, {
    key: "NumberUnit",
    value: function NumberUnit() {
      return this.getToken(SolidityParser.NumberUnit, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterNumberLiteral(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitNumberLiteral(this);
      }
    }
  }]);

  return NumberLiteralContext;
}(_antlr["default"].ParserRuleContext);

var IdentifierContext = /*#__PURE__*/function (_antlr4$ParserRuleCon89) {
  _inherits(IdentifierContext, _antlr4$ParserRuleCon89);

  var _super90 = _createSuper(IdentifierContext);

  function IdentifierContext(parser, parent, invokingState) {
    var _this90;

    _classCallCheck(this, IdentifierContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this90 = _super90.call(this, parent, invokingState);
    _this90.parser = parser;
    _this90.ruleIndex = SolidityParser.RULE_identifier;
    return _this90;
  }

  _createClass(IdentifierContext, [{
    key: "ReceiveKeyword",
    value: function ReceiveKeyword() {
      return this.getToken(SolidityParser.ReceiveKeyword, 0);
    }
  }, {
    key: "PayableKeyword",
    value: function PayableKeyword() {
      return this.getToken(SolidityParser.PayableKeyword, 0);
    }
  }, {
    key: "LeaveKeyword",
    value: function LeaveKeyword() {
      return this.getToken(SolidityParser.LeaveKeyword, 0);
    }
  }, {
    key: "Identifier",
    value: function Identifier() {
      return this.getToken(SolidityParser.Identifier, 0);
    }
  }, {
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterIdentifier(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitIdentifier(this);
      }
    }
  }]);

  return IdentifierContext;
}(_antlr["default"].ParserRuleContext);

var HexLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon90) {
  _inherits(HexLiteralContext, _antlr4$ParserRuleCon90);

  var _super91 = _createSuper(HexLiteralContext);

  function HexLiteralContext(parser, parent, invokingState) {
    var _this91;

    _classCallCheck(this, HexLiteralContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this91 = _super91.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this91), "HexLiteralFragment", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.HexLiteralFragment);
      } else {
        return this.getToken(SolidityParser.HexLiteralFragment, i);
      }
    });

    _this91.parser = parser;
    _this91.ruleIndex = SolidityParser.RULE_hexLiteral;
    return _this91;
  }

  _createClass(HexLiteralContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterHexLiteral(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitHexLiteral(this);
      }
    }
  }]);

  return HexLiteralContext;
}(_antlr["default"].ParserRuleContext);

var OverrideSpecifierContext = /*#__PURE__*/function (_antlr4$ParserRuleCon91) {
  _inherits(OverrideSpecifierContext, _antlr4$ParserRuleCon91);

  var _super92 = _createSuper(OverrideSpecifierContext);

  function OverrideSpecifierContext(parser, parent, invokingState) {
    var _this92;

    _classCallCheck(this, OverrideSpecifierContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this92 = _super92.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this92), "userDefinedTypeName", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(UserDefinedTypeNameContext);
      } else {
        return this.getTypedRuleContext(UserDefinedTypeNameContext, i);
      }
    });

    _this92.parser = parser;
    _this92.ruleIndex = SolidityParser.RULE_overrideSpecifier;
    return _this92;
  }

  _createClass(OverrideSpecifierContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterOverrideSpecifier(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitOverrideSpecifier(this);
      }
    }
  }]);

  return OverrideSpecifierContext;
}(_antlr["default"].ParserRuleContext);

var StringLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon92) {
  _inherits(StringLiteralContext, _antlr4$ParserRuleCon92);

  var _super93 = _createSuper(StringLiteralContext);

  function StringLiteralContext(parser, parent, invokingState) {
    var _this93;

    _classCallCheck(this, StringLiteralContext);

    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    _this93 = _super93.call(this, parent, invokingState);

    _defineProperty(_assertThisInitialized(_this93), "StringLiteralFragment", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(SolidityParser.StringLiteralFragment);
      } else {
        return this.getToken(SolidityParser.StringLiteralFragment, i);
      }
    });

    _this93.parser = parser;
    _this93.ruleIndex = SolidityParser.RULE_stringLiteral;
    return _this93;
  }

  _createClass(StringLiteralContext, [{
    key: "enterRule",
    value: function enterRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.enterStringLiteral(this);
      }
    }
  }, {
    key: "exitRule",
    value: function exitRule(listener) {
      if (listener instanceof _SolidityListener["default"]) {
        listener.exitStringLiteral(this);
      }
    }
  }]);

  return StringLiteralContext;
}(_antlr["default"].ParserRuleContext);

SolidityParser.SourceUnitContext = SourceUnitContext;
SolidityParser.PragmaDirectiveContext = PragmaDirectiveContext;
SolidityParser.PragmaNameContext = PragmaNameContext;
SolidityParser.PragmaValueContext = PragmaValueContext;
SolidityParser.VersionContext = VersionContext;
SolidityParser.VersionOperatorContext = VersionOperatorContext;
SolidityParser.VersionConstraintContext = VersionConstraintContext;
SolidityParser.ImportDeclarationContext = ImportDeclarationContext;
SolidityParser.ImportDirectiveContext = ImportDirectiveContext;
SolidityParser.ContractDefinitionContext = ContractDefinitionContext;
SolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext;
SolidityParser.ContractPartContext = ContractPartContext;
SolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext;
SolidityParser.FileLevelConstantContext = FileLevelConstantContext;
SolidityParser.UsingForDeclarationContext = UsingForDeclarationContext;
SolidityParser.StructDefinitionContext = StructDefinitionContext;
SolidityParser.ModifierDefinitionContext = ModifierDefinitionContext;
SolidityParser.ModifierInvocationContext = ModifierInvocationContext;
SolidityParser.FunctionDefinitionContext = FunctionDefinitionContext;
SolidityParser.FunctionDescriptorContext = FunctionDescriptorContext;
SolidityParser.ReturnParametersContext = ReturnParametersContext;
SolidityParser.ModifierListContext = ModifierListContext;
SolidityParser.EventDefinitionContext = EventDefinitionContext;
SolidityParser.EnumValueContext = EnumValueContext;
SolidityParser.EnumDefinitionContext = EnumDefinitionContext;
SolidityParser.ParameterListContext = ParameterListContext;
SolidityParser.ParameterContext = ParameterContext;
SolidityParser.EventParameterListContext = EventParameterListContext;
SolidityParser.EventParameterContext = EventParameterContext;
SolidityParser.FunctionTypeParameterListContext = FunctionTypeParameterListContext;
SolidityParser.FunctionTypeParameterContext = FunctionTypeParameterContext;
SolidityParser.VariableDeclarationContext = VariableDeclarationContext;
SolidityParser.TypeNameContext = TypeNameContext;
SolidityParser.UserDefinedTypeNameContext = UserDefinedTypeNameContext;
SolidityParser.MappingKeyContext = MappingKeyContext;
SolidityParser.MappingContext = MappingContext;
SolidityParser.FunctionTypeNameContext = FunctionTypeNameContext;
SolidityParser.StorageLocationContext = StorageLocationContext;
SolidityParser.StateMutabilityContext = StateMutabilityContext;
SolidityParser.BlockContext = BlockContext;
SolidityParser.StatementContext = StatementContext;
SolidityParser.ExpressionStatementContext = ExpressionStatementContext;
SolidityParser.IfStatementContext = IfStatementContext;
SolidityParser.TryStatementContext = TryStatementContext;
SolidityParser.CatchClauseContext = CatchClauseContext;
SolidityParser.WhileStatementContext = WhileStatementContext;
SolidityParser.SimpleStatementContext = SimpleStatementContext;
SolidityParser.ForStatementContext = ForStatementContext;
SolidityParser.InlineAssemblyStatementContext = InlineAssemblyStatementContext;
SolidityParser.DoWhileStatementContext = DoWhileStatementContext;
SolidityParser.ContinueStatementContext = ContinueStatementContext;
SolidityParser.BreakStatementContext = BreakStatementContext;
SolidityParser.ReturnStatementContext = ReturnStatementContext;
SolidityParser.ThrowStatementContext = ThrowStatementContext;
SolidityParser.EmitStatementContext = EmitStatementContext;
SolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext;
SolidityParser.VariableDeclarationListContext = VariableDeclarationListContext;
SolidityParser.IdentifierListContext = IdentifierListContext;
SolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext;
SolidityParser.ExpressionContext = ExpressionContext;
SolidityParser.PrimaryExpressionContext = PrimaryExpressionContext;
SolidityParser.ExpressionListContext = ExpressionListContext;
SolidityParser.NameValueListContext = NameValueListContext;
SolidityParser.NameValueContext = NameValueContext;
SolidityParser.FunctionCallArgumentsContext = FunctionCallArgumentsContext;
SolidityParser.FunctionCallContext = FunctionCallContext;
SolidityParser.AssemblyBlockContext = AssemblyBlockContext;
SolidityParser.AssemblyItemContext = AssemblyItemContext;
SolidityParser.AssemblyExpressionContext = AssemblyExpressionContext;
SolidityParser.AssemblyMemberContext = AssemblyMemberContext;
SolidityParser.AssemblyCallContext = AssemblyCallContext;
SolidityParser.AssemblyLocalDefinitionContext = AssemblyLocalDefinitionContext;
SolidityParser.AssemblyAssignmentContext = AssemblyAssignmentContext;
SolidityParser.AssemblyIdentifierOrListContext = AssemblyIdentifierOrListContext;
SolidityParser.AssemblyIdentifierListContext = AssemblyIdentifierListContext;
SolidityParser.AssemblyStackAssignmentContext = AssemblyStackAssignmentContext;
SolidityParser.LabelDefinitionContext = LabelDefinitionContext;
SolidityParser.AssemblySwitchContext = AssemblySwitchContext;
SolidityParser.AssemblyCaseContext = AssemblyCaseContext;
SolidityParser.AssemblyFunctionDefinitionContext = AssemblyFunctionDefinitionContext;
SolidityParser.AssemblyFunctionReturnsContext = AssemblyFunctionReturnsContext;
SolidityParser.AssemblyForContext = AssemblyForContext;
SolidityParser.AssemblyIfContext = AssemblyIfContext;
SolidityParser.AssemblyLiteralContext = AssemblyLiteralContext;
SolidityParser.SubAssemblyContext = SubAssemblyContext;
SolidityParser.TupleExpressionContext = TupleExpressionContext;
SolidityParser.TypeNameExpressionContext = TypeNameExpressionContext;
SolidityParser.NumberLiteralContext = NumberLiteralContext;
SolidityParser.IdentifierContext = IdentifierContext;
SolidityParser.HexLiteralContext = HexLiteralContext;
SolidityParser.OverrideSpecifierContext = OverrideSpecifierContext;
SolidityParser.StringLiteralContext = StringLiteralContext;