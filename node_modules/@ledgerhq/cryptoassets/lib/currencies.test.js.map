{"version":3,"sources":["../src/currencies.test.js"],"names":["test","expect","toMatchObject","id","name","toBe","toThrow","all","prod","not","filter","a","isTestnetFor","length","toBeGreaterThan","c","terminated","units","toEqual","tickers","fiat","ticker","toBeTruthy","toBeFalsy","unit","code","magnitude","token","ledgerSignature","tokenType","parentCurrency","compoundFor","t","map","join","sort","b","tokens","toMatchSnapshot","every","disableCountervalue"],"mappings":"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","sourcesContent":["import {\n  listFiatCurrencies,\n  getFiatCurrencyByTicker,\n  hasFiatCurrencyTicker,\n} from \"./fiats\";\nimport { listTokens, findTokenById } from \"./tokens\";\nimport {\n  listCryptoCurrencies,\n  hasCryptoCurrencyId,\n  getCryptoCurrencyById,\n} from \"./currencies\";\n\ntest(\"can get currency by coin type\", () => {\n  expect(getCryptoCurrencyById(\"bitcoin\")).toMatchObject({\n    id: \"bitcoin\",\n    name: \"Bitcoin\",\n  });\n  expect(getCryptoCurrencyById(\"litecoin\")).toMatchObject({\n    id: \"litecoin\",\n    name: \"Litecoin\",\n  });\n  expect(hasCryptoCurrencyId(\"bitcoin\")).toBe(true);\n  expect(hasCryptoCurrencyId(\"\")).toBe(false);\n  expect(() => getCryptoCurrencyById(\"\")).toThrow();\n  expect(hasCryptoCurrencyId(\"_\")).toBe(false);\n  expect(() => getCryptoCurrencyById(\"_\")).toThrow();\n});\n\ntest(\"there are some dev cryptocurrencies\", () => {\n  const all = listCryptoCurrencies(true);\n  const prod = listCryptoCurrencies();\n  expect(listCryptoCurrencies(false)).toBe(listCryptoCurrencies());\n  expect(all).not.toBe(prod);\n  expect(all.filter((a) => !a.isTestnetFor)).toMatchObject(prod);\n  expect(all.length).toBeGreaterThan(prod.length);\n});\n\ntest(\"all cryptocurrencies match (by reference) the one you get by id\", () => {\n  for (let c of listCryptoCurrencies()) {\n    expect(c).toBe(getCryptoCurrencyById(c.id));\n  }\n});\n\ntest(\"there is no testnet or terminated coin by default\", () => {\n  for (let c of listCryptoCurrencies()) {\n    expect(!c.terminated).toBe(true);\n    expect(!c.isTestnetFor).toBe(true);\n  }\n});\n\ntest(\"all cryptocurrencies have at least one unit\", () => {\n  for (let c of listCryptoCurrencies()) {\n    expect(c.units.length).toBeGreaterThan(0);\n  }\n});\n\ntest(\"fiats list is always the same\", () => {\n  expect(listFiatCurrencies()).toEqual(listFiatCurrencies());\n});\n\ntest(\"fiats list elements are correct\", () => {\n  const tickers = {};\n  for (const fiat of listFiatCurrencies()) {\n    expect(fiat.ticker).toBeTruthy();\n    expect(typeof fiat.ticker).toBe(\"string\");\n    expect(tickers[fiat.ticker]).toBeFalsy();\n    expect(fiat.units.length).toBeGreaterThan(0);\n    const unit = fiat.units[0];\n    expect(unit.code).toBeTruthy();\n    expect(typeof unit.code).toBe(\"string\");\n    expect(unit.name).toBeTruthy();\n    expect(typeof unit.name).toBe(\"string\");\n    expect(unit.magnitude).toBeGreaterThan(-1);\n    expect(typeof unit.magnitude).toBe(\"number\");\n    tickers[fiat.ticker] = unit;\n  }\n});\n\ntest(\"tokens are correct\", () => {\n  expect(listTokens().length).toBeGreaterThan(0);\n  for (const token of listTokens()) {\n    expect(token.ticker).toBeTruthy();\n    expect(typeof token.id).toBe(\"string\");\n    expect(typeof token.name).toBe(\"string\");\n    if (token.ledgerSignature) {\n      expect(typeof token.ledgerSignature).toBe(\"string\");\n    }\n    expect(typeof token.tokenType).toBe(\"string\");\n    expect(typeof token.parentCurrency).toBe(\"object\");\n    expect(hasCryptoCurrencyId(token.parentCurrency.id)).toBe(true);\n    expect(typeof token.ticker).toBe(\"string\");\n    expect(token.units.length).toBeGreaterThan(0);\n    const unit = token.units[0];\n    expect(unit.code).toBeTruthy();\n    expect(typeof unit.code).toBe(\"string\");\n    expect(unit.name).toBeTruthy();\n    expect(typeof unit.name).toBe(\"string\");\n    expect(unit.magnitude).toBeGreaterThan(-1);\n    expect(typeof unit.magnitude).toBe(\"number\");\n    if (token.compoundFor) {\n      const t = findTokenById(token.compoundFor);\n      expect(typeof t).toBe(\"object\");\n    }\n  }\n});\n\ntest(\"fiats list is sorted by ticker\", () => {\n  expect(\n    listFiatCurrencies()\n      .map((fiat) => fiat.ticker)\n      .join(\",\")\n  ).toEqual(\n    listFiatCurrencies()\n      .map((fiat) => fiat.ticker)\n      .sort((a, b) => (a > b ? 1 : -1))\n      .join(\",\")\n  );\n});\n\ntest(\"can get fiat by coin type\", () => {\n  expect(getFiatCurrencyByTicker(\"USD\").units[0]).toMatchObject({\n    magnitude: 2,\n  });\n  expect(getFiatCurrencyByTicker(\"EUR\").units[0]).toMatchObject({\n    magnitude: 2,\n  });\n  // this is not a fiat \\o/\n  expect(() => getFiatCurrencyByTicker(\"USDT\").units[0]).toThrow();\n  expect(hasFiatCurrencyTicker(\"USD\")).toBe(true);\n  expect(hasFiatCurrencyTicker(\"USDT\")).toBe(false);\n});\n\ntest(\"all USDT are countervalue enabled\", () => {\n  const tokens = listTokens().filter((t) => t.ticker === \"USDT\");\n  expect(tokens.map((t) => t.id).sort()).toMatchSnapshot();\n  expect(tokens.every((t) => t.disableCountervalue === false)).toBe(true);\n});\n"],"file":"currencies.test.js"}